
F3_SmartDoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003320  08003320  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003320  08003320  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003320  08003320  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  20000010  08003338  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000efc  08003338  00020efc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012843  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acd  00000000  00000000  0003287c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00035350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  000367c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019452  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fca  00000000  00000000  00050fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f29  00000000  00000000  00065f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000faea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000570c  00000000  00000000  000faef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080032b8 	.word	0x080032b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080032b8 	.word	0x080032b8

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f8d1 	bl	8000308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f002 ffd6 	bl	8003118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f002 fe8a 	bl	8002e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000004 	.word	0x20000004
 800019c:	2000002c 	.word	0x2000002c

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	2000002c 	.word	0x2000002c

080001b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f003 0307 	and.w	r3, r3, #7
 80001c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <__NVIC_SetPriorityGrouping+0x44>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001d0:	4013      	ands	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001e6:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <__NVIC_SetPriorityGrouping+0x44>)
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	60d3      	str	r3, [r2, #12]
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__NVIC_GetPriorityGrouping+0x18>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	0a1b      	lsrs	r3, r3, #8
 8000206:	f003 0307 	and.w	r3, r3, #7
}
 800020a:	4618      	mov	r0, r3
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <__NVIC_EnableIRQ+0x34>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000260:	2b00      	cmp	r3, #0
 8000262:	db0a      	blt.n	800027a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	b2da      	uxtb	r2, r3
 8000268:	490c      	ldr	r1, [pc, #48]	; (800029c <__NVIC_SetPriority+0x4c>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	0112      	lsls	r2, r2, #4
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	440b      	add	r3, r1
 8000274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000278:	e00a      	b.n	8000290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <__NVIC_SetPriority+0x50>)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	f003 030f 	and.w	r3, r3, #15
 8000286:	3b04      	subs	r3, #4
 8000288:	0112      	lsls	r2, r2, #4
 800028a:	b2d2      	uxtb	r2, r2
 800028c:	440b      	add	r3, r1
 800028e:	761a      	strb	r2, [r3, #24]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e100 	.word	0xe000e100
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	f1c3 0307 	rsb	r3, r3, #7
 80002be:	2b04      	cmp	r3, #4
 80002c0:	bf28      	it	cs
 80002c2:	2304      	movcs	r3, #4
 80002c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2b06      	cmp	r3, #6
 80002cc:	d902      	bls.n	80002d4 <NVIC_EncodePriority+0x30>
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	3b03      	subs	r3, #3
 80002d2:	e000      	b.n	80002d6 <NVIC_EncodePriority+0x32>
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	f04f 32ff 	mov.w	r2, #4294967295
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	43da      	mvns	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	401a      	ands	r2, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ec:	f04f 31ff 	mov.w	r1, #4294967295
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	fa01 f303 	lsl.w	r3, r1, r3
 80002f6:	43d9      	mvns	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	4313      	orrs	r3, r2
         );
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3724      	adds	r7, #36	; 0x24
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ff4f 	bl	80001b4 <__NVIC_SetPriorityGrouping>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
 800032a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000330:	f7ff ff64 	bl	80001fc <__NVIC_GetPriorityGrouping>
 8000334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	68b9      	ldr	r1, [r7, #8]
 800033a:	6978      	ldr	r0, [r7, #20]
 800033c:	f7ff ffb2 	bl	80002a4 <NVIC_EncodePriority>
 8000340:	4602      	mov	r2, r0
 8000342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff81 	bl	8000250 <__NVIC_SetPriority>
}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b082      	sub	sp, #8
 800035a:	af00      	add	r7, sp, #0
 800035c:	4603      	mov	r3, r0
 800035e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff57 	bl	8000218 <__NVIC_EnableIRQ>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000374:	b480      	push	{r7}
 8000376:	b08b      	sub	sp, #44	; 0x2c
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800037e:	2300      	movs	r3, #0
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000386:	e169      	b.n	800065c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000388:	2201      	movs	r2, #1
 800038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038c:	fa02 f303 	lsl.w	r3, r2, r3
 8000390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	69fa      	ldr	r2, [r7, #28]
 8000398:	4013      	ands	r3, r2
 800039a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800039c:	69ba      	ldr	r2, [r7, #24]
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	f040 8158 	bne.w	8000656 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	4a9a      	ldr	r2, [pc, #616]	; (8000614 <HAL_GPIO_Init+0x2a0>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d05e      	beq.n	800046e <HAL_GPIO_Init+0xfa>
 80003b0:	4a98      	ldr	r2, [pc, #608]	; (8000614 <HAL_GPIO_Init+0x2a0>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d875      	bhi.n	80004a2 <HAL_GPIO_Init+0x12e>
 80003b6:	4a98      	ldr	r2, [pc, #608]	; (8000618 <HAL_GPIO_Init+0x2a4>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d058      	beq.n	800046e <HAL_GPIO_Init+0xfa>
 80003bc:	4a96      	ldr	r2, [pc, #600]	; (8000618 <HAL_GPIO_Init+0x2a4>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d86f      	bhi.n	80004a2 <HAL_GPIO_Init+0x12e>
 80003c2:	4a96      	ldr	r2, [pc, #600]	; (800061c <HAL_GPIO_Init+0x2a8>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d052      	beq.n	800046e <HAL_GPIO_Init+0xfa>
 80003c8:	4a94      	ldr	r2, [pc, #592]	; (800061c <HAL_GPIO_Init+0x2a8>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d869      	bhi.n	80004a2 <HAL_GPIO_Init+0x12e>
 80003ce:	4a94      	ldr	r2, [pc, #592]	; (8000620 <HAL_GPIO_Init+0x2ac>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d04c      	beq.n	800046e <HAL_GPIO_Init+0xfa>
 80003d4:	4a92      	ldr	r2, [pc, #584]	; (8000620 <HAL_GPIO_Init+0x2ac>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d863      	bhi.n	80004a2 <HAL_GPIO_Init+0x12e>
 80003da:	4a92      	ldr	r2, [pc, #584]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d046      	beq.n	800046e <HAL_GPIO_Init+0xfa>
 80003e0:	4a90      	ldr	r2, [pc, #576]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d85d      	bhi.n	80004a2 <HAL_GPIO_Init+0x12e>
 80003e6:	2b12      	cmp	r3, #18
 80003e8:	d82a      	bhi.n	8000440 <HAL_GPIO_Init+0xcc>
 80003ea:	2b12      	cmp	r3, #18
 80003ec:	d859      	bhi.n	80004a2 <HAL_GPIO_Init+0x12e>
 80003ee:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <HAL_GPIO_Init+0x80>)
 80003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f4:	0800046f 	.word	0x0800046f
 80003f8:	08000449 	.word	0x08000449
 80003fc:	0800045b 	.word	0x0800045b
 8000400:	0800049d 	.word	0x0800049d
 8000404:	080004a3 	.word	0x080004a3
 8000408:	080004a3 	.word	0x080004a3
 800040c:	080004a3 	.word	0x080004a3
 8000410:	080004a3 	.word	0x080004a3
 8000414:	080004a3 	.word	0x080004a3
 8000418:	080004a3 	.word	0x080004a3
 800041c:	080004a3 	.word	0x080004a3
 8000420:	080004a3 	.word	0x080004a3
 8000424:	080004a3 	.word	0x080004a3
 8000428:	080004a3 	.word	0x080004a3
 800042c:	080004a3 	.word	0x080004a3
 8000430:	080004a3 	.word	0x080004a3
 8000434:	080004a3 	.word	0x080004a3
 8000438:	08000451 	.word	0x08000451
 800043c:	08000465 	.word	0x08000465
 8000440:	4a79      	ldr	r2, [pc, #484]	; (8000628 <HAL_GPIO_Init+0x2b4>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d013      	beq.n	800046e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000446:	e02c      	b.n	80004a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	623b      	str	r3, [r7, #32]
          break;
 800044e:	e029      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	3304      	adds	r3, #4
 8000456:	623b      	str	r3, [r7, #32]
          break;
 8000458:	e024      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	3308      	adds	r3, #8
 8000460:	623b      	str	r3, [r7, #32]
          break;
 8000462:	e01f      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	330c      	adds	r3, #12
 800046a:	623b      	str	r3, [r7, #32]
          break;
 800046c:	e01a      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d102      	bne.n	800047c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000476:	2304      	movs	r3, #4
 8000478:	623b      	str	r3, [r7, #32]
          break;
 800047a:	e013      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d105      	bne.n	8000490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000484:	2308      	movs	r3, #8
 8000486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	611a      	str	r2, [r3, #16]
          break;
 800048e:	e009      	b.n	80004a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000490:	2308      	movs	r3, #8
 8000492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	69fa      	ldr	r2, [r7, #28]
 8000498:	615a      	str	r2, [r3, #20]
          break;
 800049a:	e003      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
          break;
 80004a0:	e000      	b.n	80004a4 <HAL_GPIO_Init+0x130>
          break;
 80004a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	2bff      	cmp	r3, #255	; 0xff
 80004a8:	d801      	bhi.n	80004ae <HAL_GPIO_Init+0x13a>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	e001      	b.n	80004b2 <HAL_GPIO_Init+0x13e>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3304      	adds	r3, #4
 80004b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	2bff      	cmp	r3, #255	; 0xff
 80004b8:	d802      	bhi.n	80004c0 <HAL_GPIO_Init+0x14c>
 80004ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	e002      	b.n	80004c6 <HAL_GPIO_Init+0x152>
 80004c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c2:	3b08      	subs	r3, #8
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	210f      	movs	r1, #15
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	401a      	ands	r2, r3
 80004d8:	6a39      	ldr	r1, [r7, #32]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	431a      	orrs	r2, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	f000 80b1 	beq.w	8000656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004f4:	4b4d      	ldr	r3, [pc, #308]	; (800062c <HAL_GPIO_Init+0x2b8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a4c      	ldr	r2, [pc, #304]	; (800062c <HAL_GPIO_Init+0x2b8>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <HAL_GPIO_Init+0x2b8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800050c:	4a48      	ldr	r2, [pc, #288]	; (8000630 <HAL_GPIO_Init+0x2bc>)
 800050e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000510:	089b      	lsrs	r3, r3, #2
 8000512:	3302      	adds	r3, #2
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	f003 0303 	and.w	r3, r3, #3
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	220f      	movs	r2, #15
 8000524:	fa02 f303 	lsl.w	r3, r2, r3
 8000528:	43db      	mvns	r3, r3
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a40      	ldr	r2, [pc, #256]	; (8000634 <HAL_GPIO_Init+0x2c0>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d013      	beq.n	8000560 <HAL_GPIO_Init+0x1ec>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a3f      	ldr	r2, [pc, #252]	; (8000638 <HAL_GPIO_Init+0x2c4>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d00d      	beq.n	800055c <HAL_GPIO_Init+0x1e8>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a3e      	ldr	r2, [pc, #248]	; (800063c <HAL_GPIO_Init+0x2c8>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d007      	beq.n	8000558 <HAL_GPIO_Init+0x1e4>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a3d      	ldr	r2, [pc, #244]	; (8000640 <HAL_GPIO_Init+0x2cc>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d101      	bne.n	8000554 <HAL_GPIO_Init+0x1e0>
 8000550:	2303      	movs	r3, #3
 8000552:	e006      	b.n	8000562 <HAL_GPIO_Init+0x1ee>
 8000554:	2304      	movs	r3, #4
 8000556:	e004      	b.n	8000562 <HAL_GPIO_Init+0x1ee>
 8000558:	2302      	movs	r3, #2
 800055a:	e002      	b.n	8000562 <HAL_GPIO_Init+0x1ee>
 800055c:	2301      	movs	r3, #1
 800055e:	e000      	b.n	8000562 <HAL_GPIO_Init+0x1ee>
 8000560:	2300      	movs	r3, #0
 8000562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000564:	f002 0203 	and.w	r2, r2, #3
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	4093      	lsls	r3, r2
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	4313      	orrs	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000572:	492f      	ldr	r1, [pc, #188]	; (8000630 <HAL_GPIO_Init+0x2bc>)
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	3302      	adds	r3, #2
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	492c      	ldr	r1, [pc, #176]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4313      	orrs	r3, r2
 8000596:	600b      	str	r3, [r1, #0]
 8000598:	e006      	b.n	80005a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	43db      	mvns	r3, r3
 80005a2:	4928      	ldr	r1, [pc, #160]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005a4:	4013      	ands	r3, r2
 80005a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d006      	beq.n	80005c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	4922      	ldr	r1, [pc, #136]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	4313      	orrs	r3, r2
 80005be:	604b      	str	r3, [r1, #4]
 80005c0:	e006      	b.n	80005d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005c4:	685a      	ldr	r2, [r3, #4]
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	43db      	mvns	r3, r3
 80005ca:	491e      	ldr	r1, [pc, #120]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005cc:	4013      	ands	r3, r2
 80005ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d006      	beq.n	80005ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	4918      	ldr	r1, [pc, #96]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	608b      	str	r3, [r1, #8]
 80005e8:	e006      	b.n	80005f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4914      	ldr	r1, [pc, #80]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 80005f4:	4013      	ands	r3, r2
 80005f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d021      	beq.n	8000648 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <HAL_GPIO_Init+0x2d0>)
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	4313      	orrs	r3, r2
 800060e:	60cb      	str	r3, [r1, #12]
 8000610:	e021      	b.n	8000656 <HAL_GPIO_Init+0x2e2>
 8000612:	bf00      	nop
 8000614:	10320000 	.word	0x10320000
 8000618:	10310000 	.word	0x10310000
 800061c:	10220000 	.word	0x10220000
 8000620:	10210000 	.word	0x10210000
 8000624:	10120000 	.word	0x10120000
 8000628:	10110000 	.word	0x10110000
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00
 800063c:	40011000 	.word	0x40011000
 8000640:	40011400 	.word	0x40011400
 8000644:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <HAL_GPIO_Init+0x304>)
 800064a:	68da      	ldr	r2, [r3, #12]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4909      	ldr	r1, [pc, #36]	; (8000678 <HAL_GPIO_Init+0x304>)
 8000652:	4013      	ands	r3, r2
 8000654:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	3301      	adds	r3, #1
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000662:	fa22 f303 	lsr.w	r3, r2, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	f47f ae8e 	bne.w	8000388 <HAL_GPIO_Init+0x14>
  }
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	372c      	adds	r7, #44	; 0x2c
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40010400 	.word	0x40010400

0800067c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
 8000688:	4613      	mov	r3, r2
 800068a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800068c:	787b      	ldrb	r3, [r7, #1]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000692:	887a      	ldrh	r2, [r7, #2]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000698:	e003      	b.n	80006a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800069a:	887b      	ldrh	r3, [r7, #2]
 800069c:	041a      	lsls	r2, r3, #16
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	611a      	str	r2, [r3, #16]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e12b      	b.n	8000916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d106      	bne.n	80006d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f002 fc0e 	bl	8002ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2224      	movs	r2, #36	; 0x24
 80006dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f022 0201 	bic.w	r2, r2, #1
 80006ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80006fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800070e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000710:	f000 fce4 	bl	80010dc <HAL_RCC_GetPCLK1Freq>
 8000714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	4a81      	ldr	r2, [pc, #516]	; (8000920 <HAL_I2C_Init+0x274>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d807      	bhi.n	8000730 <HAL_I2C_Init+0x84>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4a80      	ldr	r2, [pc, #512]	; (8000924 <HAL_I2C_Init+0x278>)
 8000724:	4293      	cmp	r3, r2
 8000726:	bf94      	ite	ls
 8000728:	2301      	movls	r3, #1
 800072a:	2300      	movhi	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	e006      	b.n	800073e <HAL_I2C_Init+0x92>
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4a7d      	ldr	r2, [pc, #500]	; (8000928 <HAL_I2C_Init+0x27c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	bf94      	ite	ls
 8000738:	2301      	movls	r3, #1
 800073a:	2300      	movhi	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e0e7      	b.n	8000916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4a78      	ldr	r2, [pc, #480]	; (800092c <HAL_I2C_Init+0x280>)
 800074a:	fba2 2303 	umull	r2, r3, r2, r3
 800074e:	0c9b      	lsrs	r3, r3, #18
 8000750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	430a      	orrs	r2, r1
 8000764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6a1b      	ldr	r3, [r3, #32]
 800076c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a6a      	ldr	r2, [pc, #424]	; (8000920 <HAL_I2C_Init+0x274>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d802      	bhi.n	8000780 <HAL_I2C_Init+0xd4>
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	e009      	b.n	8000794 <HAL_I2C_Init+0xe8>
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000786:	fb02 f303 	mul.w	r3, r2, r3
 800078a:	4a69      	ldr	r2, [pc, #420]	; (8000930 <HAL_I2C_Init+0x284>)
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
 8000790:	099b      	lsrs	r3, r3, #6
 8000792:	3301      	adds	r3, #1
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	6812      	ldr	r2, [r2, #0]
 8000798:	430b      	orrs	r3, r1
 800079a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80007a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	495c      	ldr	r1, [pc, #368]	; (8000920 <HAL_I2C_Init+0x274>)
 80007b0:	428b      	cmp	r3, r1
 80007b2:	d819      	bhi.n	80007e8 <HAL_I2C_Init+0x13c>
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	1e59      	subs	r1, r3, #1
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	fbb1 f3f3 	udiv	r3, r1, r3
 80007c2:	1c59      	adds	r1, r3, #1
 80007c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80007c8:	400b      	ands	r3, r1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <HAL_I2C_Init+0x138>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1e59      	subs	r1, r3, #1
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e2:	e051      	b.n	8000888 <HAL_I2C_Init+0x1dc>
 80007e4:	2304      	movs	r3, #4
 80007e6:	e04f      	b.n	8000888 <HAL_I2C_Init+0x1dc>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d111      	bne.n	8000814 <HAL_I2C_Init+0x168>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	1e58      	subs	r0, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6859      	ldr	r1, [r3, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	440b      	add	r3, r1
 80007fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000802:	3301      	adds	r3, #1
 8000804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf0c      	ite	eq
 800080c:	2301      	moveq	r3, #1
 800080e:	2300      	movne	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	e012      	b.n	800083a <HAL_I2C_Init+0x18e>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	1e58      	subs	r0, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6859      	ldr	r1, [r3, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	440b      	add	r3, r1
 8000822:	0099      	lsls	r1, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	fbb0 f3f3 	udiv	r3, r0, r3
 800082a:	3301      	adds	r3, #1
 800082c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf0c      	ite	eq
 8000834:	2301      	moveq	r3, #1
 8000836:	2300      	movne	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_I2C_Init+0x196>
 800083e:	2301      	movs	r3, #1
 8000840:	e022      	b.n	8000888 <HAL_I2C_Init+0x1dc>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10e      	bne.n	8000868 <HAL_I2C_Init+0x1bc>
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	1e58      	subs	r0, r3, #1
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6859      	ldr	r1, [r3, #4]
 8000852:	460b      	mov	r3, r1
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	440b      	add	r3, r1
 8000858:	fbb0 f3f3 	udiv	r3, r0, r3
 800085c:	3301      	adds	r3, #1
 800085e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000866:	e00f      	b.n	8000888 <HAL_I2C_Init+0x1dc>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	1e58      	subs	r0, r3, #1
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6859      	ldr	r1, [r3, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	440b      	add	r3, r1
 8000876:	0099      	lsls	r1, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	fbb0 f3f3 	udiv	r3, r0, r3
 800087e:	3301      	adds	r3, #1
 8000880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	6809      	ldr	r1, [r1, #0]
 800088c:	4313      	orrs	r3, r2
 800088e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6a1b      	ldr	r3, [r3, #32]
 80008a2:	431a      	orrs	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80008b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	6911      	ldr	r1, [r2, #16]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68d2      	ldr	r2, [r2, #12]
 80008c2:	4311      	orrs	r1, r2
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	430b      	orrs	r3, r1
 80008ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	431a      	orrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f042 0201 	orr.w	r2, r2, #1
 80008f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2220      	movs	r2, #32
 8000902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	000186a0 	.word	0x000186a0
 8000924:	001e847f 	.word	0x001e847f
 8000928:	003d08ff 	.word	0x003d08ff
 800092c:	431bde83 	.word	0x431bde83
 8000930:	10624dd3 	.word	0x10624dd3

08000934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e272      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	2b00      	cmp	r3, #0
 8000950:	f000 8087 	beq.w	8000a62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000954:	4b92      	ldr	r3, [pc, #584]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b04      	cmp	r3, #4
 800095e:	d00c      	beq.n	800097a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000960:	4b8f      	ldr	r3, [pc, #572]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 030c 	and.w	r3, r3, #12
 8000968:	2b08      	cmp	r3, #8
 800096a:	d112      	bne.n	8000992 <HAL_RCC_OscConfig+0x5e>
 800096c:	4b8c      	ldr	r3, [pc, #560]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000978:	d10b      	bne.n	8000992 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800097a:	4b89      	ldr	r3, [pc, #548]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d06c      	beq.n	8000a60 <HAL_RCC_OscConfig+0x12c>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d168      	bne.n	8000a60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e24c      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800099a:	d106      	bne.n	80009aa <HAL_RCC_OscConfig+0x76>
 800099c:	4b80      	ldr	r3, [pc, #512]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a7f      	ldr	r2, [pc, #508]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e02e      	b.n	8000a08 <HAL_RCC_OscConfig+0xd4>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10c      	bne.n	80009cc <HAL_RCC_OscConfig+0x98>
 80009b2:	4b7b      	ldr	r3, [pc, #492]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a7a      	ldr	r2, [pc, #488]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	4b78      	ldr	r3, [pc, #480]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a77      	ldr	r2, [pc, #476]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e01d      	b.n	8000a08 <HAL_RCC_OscConfig+0xd4>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009d4:	d10c      	bne.n	80009f0 <HAL_RCC_OscConfig+0xbc>
 80009d6:	4b72      	ldr	r3, [pc, #456]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a71      	ldr	r2, [pc, #452]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	4b6f      	ldr	r3, [pc, #444]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a6e      	ldr	r2, [pc, #440]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e00b      	b.n	8000a08 <HAL_RCC_OscConfig+0xd4>
 80009f0:	4b6b      	ldr	r3, [pc, #428]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a6a      	ldr	r2, [pc, #424]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a67      	ldr	r2, [pc, #412]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d013      	beq.n	8000a38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a10:	f7ff fbc6 	bl	80001a0 <HAL_GetTick>
 8000a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a16:	e008      	b.n	8000a2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a18:	f7ff fbc2 	bl	80001a0 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b64      	cmp	r3, #100	; 0x64
 8000a24:	d901      	bls.n	8000a2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a26:	2303      	movs	r3, #3
 8000a28:	e200      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f0      	beq.n	8000a18 <HAL_RCC_OscConfig+0xe4>
 8000a36:	e014      	b.n	8000a62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a38:	f7ff fbb2 	bl	80001a0 <HAL_GetTick>
 8000a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a3e:	e008      	b.n	8000a52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a40:	f7ff fbae 	bl	80001a0 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b64      	cmp	r3, #100	; 0x64
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e1ec      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a52:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f0      	bne.n	8000a40 <HAL_RCC_OscConfig+0x10c>
 8000a5e:	e000      	b.n	8000a62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d063      	beq.n	8000b36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 030c 	and.w	r3, r3, #12
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00b      	beq.n	8000a92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 030c 	and.w	r3, r3, #12
 8000a82:	2b08      	cmp	r3, #8
 8000a84:	d11c      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x18c>
 8000a86:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d116      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <HAL_RCC_OscConfig+0x176>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d001      	beq.n	8000aaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e1c0      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aaa:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	4939      	ldr	r1, [pc, #228]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000abe:	e03a      	b.n	8000b36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d020      	beq.n	8000b0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ac8:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <HAL_RCC_OscConfig+0x270>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ace:	f7ff fb67 	bl	80001a0 <HAL_GetTick>
 8000ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad4:	e008      	b.n	8000ae8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ad6:	f7ff fb63 	bl	80001a0 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e1a1      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f0      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4927      	ldr	r1, [pc, #156]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	4313      	orrs	r3, r2
 8000b06:	600b      	str	r3, [r1, #0]
 8000b08:	e015      	b.n	8000b36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_RCC_OscConfig+0x270>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b10:	f7ff fb46 	bl	80001a0 <HAL_GetTick>
 8000b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b16:	e008      	b.n	8000b2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b18:	f7ff fb42 	bl	80001a0 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d901      	bls.n	8000b2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e180      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f0      	bne.n	8000b18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d03a      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d019      	beq.n	8000b7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_RCC_OscConfig+0x274>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b50:	f7ff fb26 	bl	80001a0 <HAL_GetTick>
 8000b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b56:	e008      	b.n	8000b6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b58:	f7ff fb22 	bl	80001a0 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d901      	bls.n	8000b6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b66:	2303      	movs	r3, #3
 8000b68:	e160      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f0      	beq.n	8000b58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fb08 	bl	800118c <RCC_Delay>
 8000b7c:	e01c      	b.n	8000bb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_RCC_OscConfig+0x274>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b84:	f7ff fb0c 	bl	80001a0 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b8a:	e00f      	b.n	8000bac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b8c:	f7ff fb08 	bl	80001a0 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d908      	bls.n	8000bac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e146      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	42420000 	.word	0x42420000
 8000ba8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bac:	4b92      	ldr	r3, [pc, #584]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e9      	bne.n	8000b8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 80a6 	beq.w	8000d12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bca:	4b8b      	ldr	r3, [pc, #556]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10d      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a87      	ldr	r2, [pc, #540]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b85      	ldr	r3, [pc, #532]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf2:	4b82      	ldr	r3, [pc, #520]	; (8000dfc <HAL_RCC_OscConfig+0x4c8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d118      	bne.n	8000c30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bfe:	4b7f      	ldr	r3, [pc, #508]	; (8000dfc <HAL_RCC_OscConfig+0x4c8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a7e      	ldr	r2, [pc, #504]	; (8000dfc <HAL_RCC_OscConfig+0x4c8>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c0a:	f7ff fac9 	bl	80001a0 <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c12:	f7ff fac5 	bl	80001a0 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b64      	cmp	r3, #100	; 0x64
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e103      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c24:	4b75      	ldr	r3, [pc, #468]	; (8000dfc <HAL_RCC_OscConfig+0x4c8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f0      	beq.n	8000c12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d106      	bne.n	8000c46 <HAL_RCC_OscConfig+0x312>
 8000c38:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4a6e      	ldr	r2, [pc, #440]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6213      	str	r3, [r2, #32]
 8000c44:	e02d      	b.n	8000ca2 <HAL_RCC_OscConfig+0x36e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x334>
 8000c4e:	4b6a      	ldr	r3, [pc, #424]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	4a69      	ldr	r2, [pc, #420]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	6213      	str	r3, [r2, #32]
 8000c5a:	4b67      	ldr	r3, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c5c:	6a1b      	ldr	r3, [r3, #32]
 8000c5e:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	f023 0304 	bic.w	r3, r3, #4
 8000c64:	6213      	str	r3, [r2, #32]
 8000c66:	e01c      	b.n	8000ca2 <HAL_RCC_OscConfig+0x36e>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d10c      	bne.n	8000c8a <HAL_RCC_OscConfig+0x356>
 8000c70:	4b61      	ldr	r3, [pc, #388]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	4a60      	ldr	r2, [pc, #384]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6213      	str	r3, [r2, #32]
 8000c7c:	4b5e      	ldr	r3, [pc, #376]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a5d      	ldr	r2, [pc, #372]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6213      	str	r3, [r2, #32]
 8000c88:	e00b      	b.n	8000ca2 <HAL_RCC_OscConfig+0x36e>
 8000c8a:	4b5b      	ldr	r3, [pc, #364]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	4a5a      	ldr	r2, [pc, #360]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c90:	f023 0301 	bic.w	r3, r3, #1
 8000c94:	6213      	str	r3, [r2, #32]
 8000c96:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000c9c:	f023 0304 	bic.w	r3, r3, #4
 8000ca0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d015      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000caa:	f7ff fa79 	bl	80001a0 <HAL_GetTick>
 8000cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb0:	e00a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f7ff fa75 	bl	80001a0 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e0b1      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc8:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0ee      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x37e>
 8000cd4:	e014      	b.n	8000d00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fa63 	bl	80001a0 <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cdc:	e00a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f7ff fa5f 	bl	80001a0 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e09b      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cf4:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1ee      	bne.n	8000cde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d105      	bne.n	8000d12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d06:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8087 	beq.w	8000e2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d061      	beq.n	8000dec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d146      	bne.n	8000dbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <HAL_RCC_OscConfig+0x4cc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fa33 	bl	80001a0 <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d3e:	f7ff fa2f 	bl	80001a0 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e06d      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d64:	d108      	bne.n	8000d78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4921      	ldr	r1, [pc, #132]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a19      	ldr	r1, [r3, #32]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	491b      	ldr	r1, [pc, #108]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_RCC_OscConfig+0x4cc>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fa03 	bl	80001a0 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d9e:	f7ff f9ff 	bl	80001a0 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e03d      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x46a>
 8000dbc:	e035      	b.n	8000e2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_RCC_OscConfig+0x4cc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff f9ec 	bl	80001a0 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dcc:	f7ff f9e8 	bl	80001a0 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e026      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x498>
 8000dea:	e01e      	b.n	8000e2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d107      	bne.n	8000e04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e019      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40007000 	.word	0x40007000
 8000e00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_RCC_OscConfig+0x500>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d106      	bne.n	8000e26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d001      	beq.n	8000e2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e0d0      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d910      	bls.n	8000e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 0207 	bic.w	r2, r3, #7
 8000e62:	4965      	ldr	r1, [pc, #404]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d001      	beq.n	8000e7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e0b8      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d020      	beq.n	8000eca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a58      	ldr	r2, [pc, #352]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000eac:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000eb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000eb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000eb8:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	494d      	ldr	r1, [pc, #308]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d040      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d107      	bne.n	8000eee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d115      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e07f      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d107      	bne.n	8000f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef6:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e073      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e06b      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f16:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f023 0203 	bic.w	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4936      	ldr	r1, [pc, #216]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f28:	f7ff f93a 	bl	80001a0 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f2e:	e00a      	b.n	8000f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f30:	f7ff f936 	bl	80001a0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e053      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 020c 	and.w	r2, r3, #12
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d1eb      	bne.n	8000f30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d210      	bcs.n	8000f88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 0207 	bic.w	r2, r3, #7
 8000f6e:	4922      	ldr	r1, [pc, #136]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d001      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e032      	b.n	8000fee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d008      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4916      	ldr	r1, [pc, #88]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	490e      	ldr	r1, [pc, #56]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fc6:	f000 f821 	bl	800100c <HAL_RCC_GetSysClockFreq>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_RCC_ClockConfig+0x1c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	490a      	ldr	r1, [pc, #40]	; (8001000 <HAL_RCC_ClockConfig+0x1c8>)
 8000fd8:	5ccb      	ldrb	r3, [r1, r3]
 8000fda:	fa22 f303 	lsr.w	r3, r2, r3
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_RCC_ClockConfig+0x1cc>)
 8000fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_RCC_ClockConfig+0x1d0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f896 	bl	8003118 <HAL_InitTick>

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08003308 	.word	0x08003308
 8001004:	2000000c 	.word	0x2000000c
 8001008:	20000000 	.word	0x20000000

0800100c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800100c:	b490      	push	{r4, r7}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001014:	1d3c      	adds	r4, r7, #4
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800101c:	f240 2301 	movw	r3, #513	; 0x201
 8001020:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b04      	cmp	r3, #4
 8001044:	d002      	beq.n	800104c <HAL_RCC_GetSysClockFreq+0x40>
 8001046:	2b08      	cmp	r3, #8
 8001048:	d003      	beq.n	8001052 <HAL_RCC_GetSysClockFreq+0x46>
 800104a:	e02b      	b.n	80010a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800104e:	623b      	str	r3, [r7, #32]
      break;
 8001050:	e02b      	b.n	80010aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	0c9b      	lsrs	r3, r3, #18
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3328      	adds	r3, #40	; 0x28
 800105c:	443b      	add	r3, r7
 800105e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001062:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d012      	beq.n	8001094 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	0c5b      	lsrs	r3, r3, #17
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	3328      	adds	r3, #40	; 0x28
 800107a:	443b      	add	r3, r7
 800107c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001080:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001086:	fb03 f202 	mul.w	r2, r3, r2
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
 8001092:	e004      	b.n	800109e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	623b      	str	r3, [r7, #32]
      break;
 80010a2:	e002      	b.n	80010aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010a6:	623b      	str	r3, [r7, #32]
      break;
 80010a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010aa:	6a3b      	ldr	r3, [r7, #32]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc90      	pop	{r4, r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	080032d0 	.word	0x080032d0
 80010bc:	40021000 	.word	0x40021000
 80010c0:	007a1200 	.word	0x007a1200
 80010c4:	003d0900 	.word	0x003d0900

080010c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	2000000c 	.word	0x2000000c

080010dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010e0:	f7ff fff2 	bl	80010c8 <HAL_RCC_GetHCLKFreq>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	4903      	ldr	r1, [pc, #12]	; (8001100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	08003318 	.word	0x08003318

08001104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001108:	f7ff ffde 	bl	80010c8 <HAL_RCC_GetHCLKFreq>
 800110c:	4602      	mov	r2, r0
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	0adb      	lsrs	r3, r3, #11
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	4903      	ldr	r1, [pc, #12]	; (8001128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800111a:	5ccb      	ldrb	r3, [r1, r3]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001120:	4618      	mov	r0, r3
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	08003318 	.word	0x08003318

0800112c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	220f      	movs	r2, #15
 800113a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_RCC_GetClockConfig+0x58>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_RCC_GetClockConfig+0x58>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_GetClockConfig+0x58>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_RCC_GetClockConfig+0x58>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_RCC_GetClockConfig+0x5c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0207 	and.w	r2, r3, #7
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000
 8001188:	40022000 	.word	0x40022000

0800118c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <RCC_Delay+0x34>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <RCC_Delay+0x38>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0a5b      	lsrs	r3, r3, #9
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011a8:	bf00      	nop
  }
  while (Delay --);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	60fa      	str	r2, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f9      	bne.n	80011a8 <RCC_Delay+0x1c>
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	2000000c 	.word	0x2000000c
 80011c4:	10624dd3 	.word	0x10624dd3

080011c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e076      	b.n	80012c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d108      	bne.n	80011f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011ea:	d009      	beq.n	8001200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
 80011f2:	e005      	b.n	8001200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f001 fea8 	bl	8002f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2202      	movs	r2, #2
 8001224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	ea42 0103 	orr.w	r1, r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	0c1a      	lsrs	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f002 0204 	and.w	r2, r2, #4
 80012a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	69da      	ldr	r2, [r3, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e041      	b.n	8001366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f839 	bl	800136e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3304      	adds	r3, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f000 f9b4 	bl	800167c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d001      	beq.n	8001398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e03a      	b.n	800140e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_TIM_Base_Start_IT+0x98>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00e      	beq.n	80013d8 <HAL_TIM_Base_Start_IT+0x58>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c2:	d009      	beq.n	80013d8 <HAL_TIM_Base_Start_IT+0x58>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <HAL_TIM_Base_Start_IT+0x9c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d004      	beq.n	80013d8 <HAL_TIM_Base_Start_IT+0x58>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_TIM_Base_Start_IT+0xa0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d111      	bne.n	80013fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d010      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013fa:	e007      	b.n	800140c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40012c00 	.word	0x40012c00
 800141c:	40000400 	.word	0x40000400
 8001420:	40000800 	.word	0x40000800

08001424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b02      	cmp	r3, #2
 8001438:	d122      	bne.n	8001480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b02      	cmp	r3, #2
 8001446:	d11b      	bne.n	8001480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0202 	mvn.w	r2, #2
 8001450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8ed 	bl	8001646 <HAL_TIM_IC_CaptureCallback>
 800146c:	e005      	b.n	800147a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f8e0 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f8ef 	bl	8001658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b04      	cmp	r3, #4
 800148c:	d122      	bne.n	80014d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b04      	cmp	r3, #4
 800149a:	d11b      	bne.n	80014d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f06f 0204 	mvn.w	r2, #4
 80014a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2202      	movs	r2, #2
 80014aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f8c3 	bl	8001646 <HAL_TIM_IC_CaptureCallback>
 80014c0:	e005      	b.n	80014ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f8b6 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f8c5 	bl	8001658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d122      	bne.n	8001528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d11b      	bne.n	8001528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f06f 0208 	mvn.w	r2, #8
 80014f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f899 	bl	8001646 <HAL_TIM_IC_CaptureCallback>
 8001514:	e005      	b.n	8001522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f88c 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f89b 	bl	8001658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b10      	cmp	r3, #16
 8001534:	d122      	bne.n	800157c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b10      	cmp	r3, #16
 8001542:	d11b      	bne.n	800157c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f06f 0210 	mvn.w	r2, #16
 800154c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2208      	movs	r2, #8
 8001552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f86f 	bl	8001646 <HAL_TIM_IC_CaptureCallback>
 8001568:	e005      	b.n	8001576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f862 	bl	8001634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f871 	bl	8001658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10e      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d107      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0201 	mvn.w	r2, #1
 80015a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f001 fc58 	bl	8002e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	2b80      	cmp	r3, #128	; 0x80
 80015b4:	d10e      	bne.n	80015d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b80      	cmp	r3, #128	; 0x80
 80015c2:	d107      	bne.n	80015d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8bf 	bl	8001752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d10e      	bne.n	8001600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b40      	cmp	r3, #64	; 0x40
 80015ee:	d107      	bne.n	8001600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f835 	bl	800166a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b20      	cmp	r3, #32
 800160c:	d10e      	bne.n	800162c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b20      	cmp	r3, #32
 800161a:	d107      	bne.n	800162c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0220 	mvn.w	r2, #32
 8001624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f88a 	bl	8001740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <TIM_Base_SetConfig+0xb8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00b      	beq.n	80016ac <TIM_Base_SetConfig+0x30>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169a:	d007      	beq.n	80016ac <TIM_Base_SetConfig+0x30>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a26      	ldr	r2, [pc, #152]	; (8001738 <TIM_Base_SetConfig+0xbc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d003      	beq.n	80016ac <TIM_Base_SetConfig+0x30>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a25      	ldr	r2, [pc, #148]	; (800173c <TIM_Base_SetConfig+0xc0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d108      	bne.n	80016be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <TIM_Base_SetConfig+0xb8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00b      	beq.n	80016de <TIM_Base_SetConfig+0x62>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d007      	beq.n	80016de <TIM_Base_SetConfig+0x62>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <TIM_Base_SetConfig+0xbc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d003      	beq.n	80016de <TIM_Base_SetConfig+0x62>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <TIM_Base_SetConfig+0xc0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d108      	bne.n	80016f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <TIM_Base_SetConfig+0xb8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d103      	bne.n	8001724 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	615a      	str	r2, [r3, #20]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40000400 	.word	0x40000400
 800173c:	40000800 	.word	0x40000800

08001740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e03f      	b.n	80017f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f001 fc3c 	bl	8003008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2224      	movs	r2, #36	; 0x24
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f829 	bl	8001800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800183a:	f023 030c 	bic.w	r3, r3, #12
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	430b      	orrs	r3, r1
 8001846:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <UART_SetConfig+0x114>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d103      	bne.n	8001870 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001868:	f7ff fc4c 	bl	8001104 <HAL_RCC_GetPCLK2Freq>
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	e002      	b.n	8001876 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001870:	f7ff fc34 	bl	80010dc <HAL_RCC_GetPCLK1Freq>
 8001874:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009a      	lsls	r2, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <UART_SetConfig+0x118>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	0119      	lsls	r1, r3, #4
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009a      	lsls	r2, r3, #2
 80018a0:	441a      	add	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <UART_SetConfig+0x118>)
 80018ae:	fba3 0302 	umull	r0, r3, r3, r2
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2064      	movs	r0, #100	; 0x64
 80018b6:	fb00 f303 	mul.w	r3, r0, r3
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	3332      	adds	r3, #50	; 0x32
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <UART_SetConfig+0x118>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018cc:	4419      	add	r1, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009a      	lsls	r2, r3, #2
 80018d8:	441a      	add	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <UART_SetConfig+0x118>)
 80018e6:	fba3 0302 	umull	r0, r3, r3, r2
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2064      	movs	r0, #100	; 0x64
 80018ee:	fb00 f303 	mul.w	r3, r0, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	3332      	adds	r3, #50	; 0x32
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <UART_SetConfig+0x118>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	f003 020f 	and.w	r2, r3, #15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	440a      	add	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40013800 	.word	0x40013800
 8001918:	51eb851f 	.word	0x51eb851f

0800191c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	2b84      	cmp	r3, #132	; 0x84
 8001930:	d005      	beq.n	800193e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001932:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	3303      	adds	r3, #3
 800193c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800194e:	f000 fa4b 	bl	8001de8 <vTaskStartScheduler>
  
  return osOK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}

08001958 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685c      	ldr	r4, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800196e:	b29e      	uxth	r6, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ffd0 	bl	800191c <makeFreeRtosPriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	9200      	str	r2, [sp, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4632      	mov	r2, r6
 800198a:	4629      	mov	r1, r5
 800198c:	4620      	mov	r0, r4
 800198e:	f000 f8cd 	bl	8001b2c <xTaskCreate>
 8001992:	4603      	mov	r3, r0
 8001994:	2b01      	cmp	r3, #1
 8001996:	d001      	beq.n	800199c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <osDelay+0x16>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	e000      	b.n	80019be <osDelay+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f9de 	bl	8001d80 <vTaskDelay>
  
  return osOK;
 80019c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f103 0208 	add.w	r2, r3, #8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f103 0208 	add.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0208 	add.w	r2, r3, #8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d103      	bne.n	8001a8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e00c      	b.n	8001aa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e002      	b.n	8001a98 <vListInsert+0x2e>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d2f6      	bcs.n	8001a92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	601a      	str	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6892      	ldr	r2, [r2, #8]
 8001af0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6852      	ldr	r2, [r2, #4]
 8001afa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d103      	bne.n	8001b0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af04      	add	r7, sp, #16
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fe2d 	bl	80027a0 <pvPortMalloc>
 8001b46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00e      	beq.n	8001b6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001b4e:	2054      	movs	r0, #84	; 0x54
 8001b50:	f000 fe26 	bl	80027a0 <pvPortMalloc>
 8001b54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
 8001b62:	e005      	b.n	8001b70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001b64:	6978      	ldr	r0, [r7, #20]
 8001b66:	f000 fedf 	bl	8002928 <vPortFree>
 8001b6a:	e001      	b.n	8001b70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d013      	beq.n	8001b9e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	9302      	str	r3, [sp, #8]
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f80e 	bl	8001bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b92:	69f8      	ldr	r0, [r7, #28]
 8001b94:	f000 f88a 	bl	8001cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e002      	b.n	8001ba4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b088      	sub	sp, #32
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f023 0307 	bic.w	r3, r3, #7
 8001bd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bf2:	bf00      	nop
 8001bf4:	e7fe      	b.n	8001bf4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e012      	b.n	8001c22 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	4413      	add	r3, r2
 8001c02:	7819      	ldrb	r1, [r3, #0]
 8001c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3334      	adds	r3, #52	; 0x34
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d9e9      	bls.n	8001bfc <prvInitialiseNewTask+0x4e>
 8001c28:	e000      	b.n	8001c2c <prvInitialiseNewTask+0x7e>
		{
			break;
 8001c2a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d901      	bls.n	8001c3e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	3304      	adds	r3, #4
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fed9 	bl	8001a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5c:	3318      	adds	r3, #24
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fed4 	bl	8001a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	f1c3 0207 	rsb	r2, r3, #7
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	69b8      	ldr	r0, [r7, #24]
 8001c8e:	f000 fbd5 	bl	800243c <pxPortInitialiseStack>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001cb4:	f000 fcb2 	bl	800261c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <prvAddNewTaskToReadyList+0xb8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <prvAddNewTaskToReadyList+0xb8>)
 8001cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <prvAddNewTaskToReadyList+0xbc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001cca:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <prvAddNewTaskToReadyList+0xbc>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <prvAddNewTaskToReadyList+0xb8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d110      	bne.n	8001cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001cd8:	f000 faa8 	bl	800222c <prvInitialiseTaskLists>
 8001cdc:	e00d      	b.n	8001cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <prvAddNewTaskToReadyList+0xc0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <prvAddNewTaskToReadyList+0xbc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d802      	bhi.n	8001cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <prvAddNewTaskToReadyList+0xbc>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <prvAddNewTaskToReadyList+0xc4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <prvAddNewTaskToReadyList+0xc4>)
 8001d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	2201      	movs	r2, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <prvAddNewTaskToReadyList+0xc8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <prvAddNewTaskToReadyList+0xc8>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <prvAddNewTaskToReadyList+0xcc>)
 8001d24:	441a      	add	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f7ff fe79 	bl	8001a24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d32:	f000 fca3 	bl	800267c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <prvAddNewTaskToReadyList+0xc0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00e      	beq.n	8001d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <prvAddNewTaskToReadyList+0xbc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <prvAddNewTaskToReadyList+0xd0>)
 8001d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f3bf 8f4f 	dsb	sy
 8001d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000130 	.word	0x20000130
 8001d68:	20000030 	.word	0x20000030
 8001d6c:	2000013c 	.word	0x2000013c
 8001d70:	2000014c 	.word	0x2000014c
 8001d74:	20000138 	.word	0x20000138
 8001d78:	20000034 	.word	0x20000034
 8001d7c:	e000ed04 	.word	0xe000ed04

08001d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d017      	beq.n	8001dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <vTaskDelay+0x60>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <vTaskDelay+0x30>
	__asm volatile
 8001d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	60bb      	str	r3, [r7, #8]
}
 8001dac:	bf00      	nop
 8001dae:	e7fe      	b.n	8001dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001db0:	f000 f862 	bl	8001e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001db4:	2100      	movs	r1, #0
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fada 	bl	8002370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001dbc:	f000 f86a 	bl	8001e94 <xTaskResumeAll>
 8001dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <vTaskDelay+0x64>)
 8001dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000158 	.word	0x20000158
 8001de4:	e000ed04 	.word	0xe000ed04

08001de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <vTaskStartScheduler+0x78>)
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2300      	movs	r3, #0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <vTaskStartScheduler+0x7c>)
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <vTaskStartScheduler+0x80>)
 8001dfe:	f7ff fe95 	bl	8001b2c <xTaskCreate>
 8001e02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d116      	bne.n	8001e38 <vTaskStartScheduler+0x50>
	__asm volatile
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	60bb      	str	r3, [r7, #8]
}
 8001e1c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <vTaskStartScheduler+0x84>)
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <vTaskStartScheduler+0x88>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <vTaskStartScheduler+0x8c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001e32:	f000 fb81 	bl	8002538 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e36:	e00e      	b.n	8001e56 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d10a      	bne.n	8001e56 <vTaskStartScheduler+0x6e>
	__asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	607b      	str	r3, [r7, #4]
}
 8001e52:	bf00      	nop
 8001e54:	e7fe      	b.n	8001e54 <vTaskStartScheduler+0x6c>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000154 	.word	0x20000154
 8001e64:	080032e0 	.word	0x080032e0
 8001e68:	080021fd 	.word	0x080021fd
 8001e6c:	20000150 	.word	0x20000150
 8001e70:	2000013c 	.word	0x2000013c
 8001e74:	20000134 	.word	0x20000134

08001e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <vTaskSuspendAll+0x18>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <vTaskSuspendAll+0x18>)
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000158 	.word	0x20000158

08001e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <xTaskResumeAll+0x114>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <xTaskResumeAll+0x2c>
	__asm volatile
 8001eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	603b      	str	r3, [r7, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	e7fe      	b.n	8001ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ec0:	f000 fbac 	bl	800261c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <xTaskResumeAll+0x114>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a37      	ldr	r2, [pc, #220]	; (8001fa8 <xTaskResumeAll+0x114>)
 8001ecc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <xTaskResumeAll+0x114>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d161      	bne.n	8001f9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <xTaskResumeAll+0x118>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d05d      	beq.n	8001f9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ede:	e02e      	b.n	8001f3e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <xTaskResumeAll+0x11c>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3318      	adds	r3, #24
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fdf4 	bl	8001ada <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fdef 	bl	8001ada <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	2201      	movs	r2, #1
 8001f02:	409a      	lsls	r2, r3
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <xTaskResumeAll+0x120>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <xTaskResumeAll+0x120>)
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <xTaskResumeAll+0x124>)
 8001f1c:	441a      	add	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3304      	adds	r3, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f7ff fd7d 	bl	8001a24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <xTaskResumeAll+0x128>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d302      	bcc.n	8001f3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <xTaskResumeAll+0x12c>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <xTaskResumeAll+0x11c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1cc      	bne.n	8001ee0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f4c:	f000 f9ec 	bl	8002328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <xTaskResumeAll+0x130>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f5c:	f000 f836 	bl	8001fcc <xTaskIncrementTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <xTaskResumeAll+0x12c>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f1      	bne.n	8001f5c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <xTaskResumeAll+0x130>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <xTaskResumeAll+0x12c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <xTaskResumeAll+0x134>)
 8001f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f9a:	f000 fb6f 	bl	800267c <vPortExitCritical>

	return xAlreadyYielded;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000158 	.word	0x20000158
 8001fac:	20000130 	.word	0x20000130
 8001fb0:	200000f0 	.word	0x200000f0
 8001fb4:	20000138 	.word	0x20000138
 8001fb8:	20000034 	.word	0x20000034
 8001fbc:	20000030 	.word	0x20000030
 8001fc0:	20000144 	.word	0x20000144
 8001fc4:	20000140 	.word	0x20000140
 8001fc8:	e000ed04 	.word	0xe000ed04

08001fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fd6:	4b51      	ldr	r3, [pc, #324]	; (800211c <xTaskIncrementTick+0x150>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 808d 	bne.w	80020fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <xTaskIncrementTick+0x154>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001fe8:	4a4d      	ldr	r2, [pc, #308]	; (8002120 <xTaskIncrementTick+0x154>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d120      	bne.n	8002036 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <xTaskIncrementTick+0x158>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <xTaskIncrementTick+0x48>
	__asm volatile
 8001ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	603b      	str	r3, [r7, #0]
}
 8002010:	bf00      	nop
 8002012:	e7fe      	b.n	8002012 <xTaskIncrementTick+0x46>
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <xTaskIncrementTick+0x158>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <xTaskIncrementTick+0x15c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a41      	ldr	r2, [pc, #260]	; (8002124 <xTaskIncrementTick+0x158>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4a41      	ldr	r2, [pc, #260]	; (8002128 <xTaskIncrementTick+0x15c>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b40      	ldr	r3, [pc, #256]	; (800212c <xTaskIncrementTick+0x160>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a3f      	ldr	r2, [pc, #252]	; (800212c <xTaskIncrementTick+0x160>)
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	f000 f979 	bl	8002328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <xTaskIncrementTick+0x164>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d34d      	bcc.n	80020dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002040:	4b38      	ldr	r3, [pc, #224]	; (8002124 <xTaskIncrementTick+0x158>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <xTaskIncrementTick+0x82>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <xTaskIncrementTick+0x84>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <xTaskIncrementTick+0x164>)
 8002056:	f04f 32ff 	mov.w	r2, #4294967295
 800205a:	601a      	str	r2, [r3, #0]
					break;
 800205c:	e03e      	b.n	80020dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <xTaskIncrementTick+0x158>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d203      	bcs.n	800207e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002076:	4a2e      	ldr	r2, [pc, #184]	; (8002130 <xTaskIncrementTick+0x164>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6013      	str	r3, [r2, #0]
						break;
 800207c:	e02e      	b.n	80020dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3304      	adds	r3, #4
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fd29 	bl	8001ada <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3318      	adds	r3, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fd20 	bl	8001ada <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <xTaskIncrementTick+0x168>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	4a22      	ldr	r2, [pc, #136]	; (8002134 <xTaskIncrementTick+0x168>)
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <xTaskIncrementTick+0x16c>)
 80020ba:	441a      	add	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f7ff fcae 	bl	8001a24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <xTaskIncrementTick+0x170>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3b4      	bcc.n	8002040 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020da:	e7b1      	b.n	8002040 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <xTaskIncrementTick+0x170>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	4915      	ldr	r1, [pc, #84]	; (8002138 <xTaskIncrementTick+0x16c>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d907      	bls.n	8002104 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e004      	b.n	8002104 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <xTaskIncrementTick+0x174>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <xTaskIncrementTick+0x174>)
 8002102:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <xTaskIncrementTick+0x178>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002110:	697b      	ldr	r3, [r7, #20]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000158 	.word	0x20000158
 8002120:	20000134 	.word	0x20000134
 8002124:	200000e8 	.word	0x200000e8
 8002128:	200000ec 	.word	0x200000ec
 800212c:	20000148 	.word	0x20000148
 8002130:	20000150 	.word	0x20000150
 8002134:	20000138 	.word	0x20000138
 8002138:	20000034 	.word	0x20000034
 800213c:	20000030 	.word	0x20000030
 8002140:	20000140 	.word	0x20000140
 8002144:	20000144 	.word	0x20000144

08002148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <vTaskSwitchContext+0xa0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <vTaskSwitchContext+0xa4>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800215c:	e03f      	b.n	80021de <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <vTaskSwitchContext+0xa4>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <vTaskSwitchContext+0xa8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f1c3 031f 	rsb	r3, r3, #31
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	491e      	ldr	r1, [pc, #120]	; (80021f4 <vTaskSwitchContext+0xac>)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	607b      	str	r3, [r7, #4]
}
 80021a0:	bf00      	nop
 80021a2:	e7fe      	b.n	80021a2 <vTaskSwitchContext+0x5a>
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <vTaskSwitchContext+0xac>)
 80021b0:	4413      	add	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3308      	adds	r3, #8
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d104      	bne.n	80021d4 <vTaskSwitchContext+0x8c>
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <vTaskSwitchContext+0xb0>)
 80021dc:	6013      	str	r3, [r2, #0]
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000158 	.word	0x20000158
 80021ec:	20000144 	.word	0x20000144
 80021f0:	20000138 	.word	0x20000138
 80021f4:	20000034 	.word	0x20000034
 80021f8:	20000030 	.word	0x20000030

080021fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002204:	f000 f852 	bl	80022ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <prvIdleTask+0x28>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d9f9      	bls.n	8002204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <prvIdleTask+0x2c>)
 8002212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002220:	e7f0      	b.n	8002204 <prvIdleTask+0x8>
 8002222:	bf00      	nop
 8002224:	20000034 	.word	0x20000034
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	e00c      	b.n	8002252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <prvInitialiseTaskLists+0x60>)
 8002244:	4413      	add	r3, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fbc1 	bl	80019ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3301      	adds	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b06      	cmp	r3, #6
 8002256:	d9ef      	bls.n	8002238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <prvInitialiseTaskLists+0x64>)
 800225a:	f7ff fbb8 	bl	80019ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <prvInitialiseTaskLists+0x68>)
 8002260:	f7ff fbb5 	bl	80019ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <prvInitialiseTaskLists+0x6c>)
 8002266:	f7ff fbb2 	bl	80019ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800226a:	480c      	ldr	r0, [pc, #48]	; (800229c <prvInitialiseTaskLists+0x70>)
 800226c:	f7ff fbaf 	bl	80019ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <prvInitialiseTaskLists+0x74>)
 8002272:	f7ff fbac 	bl	80019ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <prvInitialiseTaskLists+0x78>)
 8002278:	4a05      	ldr	r2, [pc, #20]	; (8002290 <prvInitialiseTaskLists+0x64>)
 800227a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <prvInitialiseTaskLists+0x7c>)
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <prvInitialiseTaskLists+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000034 	.word	0x20000034
 8002290:	200000c0 	.word	0x200000c0
 8002294:	200000d4 	.word	0x200000d4
 8002298:	200000f0 	.word	0x200000f0
 800229c:	20000104 	.word	0x20000104
 80022a0:	2000011c 	.word	0x2000011c
 80022a4:	200000e8 	.word	0x200000e8
 80022a8:	200000ec 	.word	0x200000ec

080022ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022b2:	e019      	b.n	80022e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80022b4:	f000 f9b2 	bl	800261c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <prvCheckTasksWaitingTermination+0x50>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc08 	bl	8001ada <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <prvCheckTasksWaitingTermination+0x54>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <prvCheckTasksWaitingTermination+0x54>)
 80022d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <prvCheckTasksWaitingTermination+0x58>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3b01      	subs	r3, #1
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <prvCheckTasksWaitingTermination+0x58>)
 80022dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80022de:	f000 f9cd 	bl	800267c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f810 	bl	8002308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <prvCheckTasksWaitingTermination+0x58>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e1      	bne.n	80022b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000104 	.word	0x20000104
 8002300:	20000130 	.word	0x20000130
 8002304:	20000118 	.word	0x20000118

08002308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fb07 	bl	8002928 <vPortFree>
			vPortFree( pxTCB );
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fb04 	bl	8002928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <prvResetNextTaskUnblockTime+0x40>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <prvResetNextTaskUnblockTime+0x14>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <prvResetNextTaskUnblockTime+0x16>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <prvResetNextTaskUnblockTime+0x44>)
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800234a:	e008      	b.n	800235e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <prvResetNextTaskUnblockTime+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <prvResetNextTaskUnblockTime+0x44>)
 800235c:	6013      	str	r3, [r2, #0]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	200000e8 	.word	0x200000e8
 800236c:	20000150 	.word	0x20000150

08002370 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <prvAddCurrentTaskToDelayedList+0xb0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3304      	adds	r3, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fba7 	bl	8001ada <uxListRemove>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2201      	movs	r2, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4013      	ands	r3, r2
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d10a      	bne.n	80023c8 <prvAddCurrentTaskToDelayedList+0x58>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3304      	adds	r3, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	481a      	ldr	r0, [pc, #104]	; (800242c <prvAddCurrentTaskToDelayedList+0xbc>)
 80023c2:	f7ff fb2f 	bl	8001a24 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023c6:	e026      	b.n	8002416 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d209      	bcs.n	80023f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <prvAddCurrentTaskToDelayedList+0xc0>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3304      	adds	r3, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7ff fb3c 	bl	8001a6a <vListInsert>
}
 80023f2:	e010      	b.n	8002416 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <prvAddCurrentTaskToDelayedList+0xc4>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7ff fb32 	bl	8001a6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	d202      	bcs.n	8002416 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000134 	.word	0x20000134
 8002424:	20000030 	.word	0x20000030
 8002428:	20000138 	.word	0x20000138
 800242c:	2000011c 	.word	0x2000011c
 8002430:	200000ec 	.word	0x200000ec
 8002434:	200000e8 	.word	0x200000e8
 8002438:	20000150 	.word	0x20000150

0800243c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3b04      	subs	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b04      	subs	r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0201 	bic.w	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b04      	subs	r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <pxPortInitialiseStack+0x54>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b14      	subs	r3, #20
 8002476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3b20      	subs	r3, #32
 8002482:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002484:	68fb      	ldr	r3, [r7, #12]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	08002495 	.word	0x08002495

08002494 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <prvTaskExitError+0x54>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d00a      	beq.n	80024be <prvTaskExitError+0x2a>
	__asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	60fb      	str	r3, [r7, #12]
}
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <prvTaskExitError+0x28>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	60bb      	str	r3, [r7, #8]
}
 80024d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80024d2:	bf00      	nop
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0fc      	beq.n	80024d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000008 	.word	0x20000008
 80024ec:	00000000 	.word	0x00000000

080024f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <pxCurrentTCBConst2>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6808      	ldr	r0, [r1, #0]
 80024f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024fa:	f380 8809 	msr	PSP, r0
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	f04e 0e0d 	orr.w	lr, lr, #13
 800250e:	4770      	bx	lr

08002510 <pxCurrentTCBConst2>:
 8002510:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop

08002518 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <prvPortStartFirstTask+0x1c>)
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f380 8808 	msr	MSP, r0
 8002522:	b662      	cpsie	i
 8002524:	b661      	cpsie	f
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	df00      	svc	0
 8002530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002532:	bf00      	nop
 8002534:	e000ed08 	.word	0xe000ed08

08002538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800253e:	4b32      	ldr	r3, [pc, #200]	; (8002608 <xPortStartScheduler+0xd0>)
 8002540:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <xPortStartScheduler+0xd4>)
 8002564:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002566:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <xPortStartScheduler+0xd8>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800256c:	e009      	b.n	8002582 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <xPortStartScheduler+0xd8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3b01      	subs	r3, #1
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <xPortStartScheduler+0xd8>)
 8002576:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b80      	cmp	r3, #128	; 0x80
 800258c:	d0ef      	beq.n	800256e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <xPortStartScheduler+0xd8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00a      	beq.n	80025b0 <xPortStartScheduler+0x78>
	__asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	60bb      	str	r3, [r7, #8]
}
 80025ac:	bf00      	nop
 80025ae:	e7fe      	b.n	80025ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <xPortStartScheduler+0xd8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <xPortStartScheduler+0xd8>)
 80025b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <xPortStartScheduler+0xd8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <xPortStartScheduler+0xd8>)
 80025c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <xPortStartScheduler+0xdc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a10      	ldr	r2, [pc, #64]	; (8002614 <xPortStartScheduler+0xdc>)
 80025d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <xPortStartScheduler+0xdc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <xPortStartScheduler+0xdc>)
 80025e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80025e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80025e6:	f000 f8b9 	bl	800275c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <xPortStartScheduler+0xe0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80025f0:	f7ff ff92 	bl	8002518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80025f4:	f7ff fda8 	bl	8002148 <vTaskSwitchContext>
	prvTaskExitError();
 80025f8:	f7ff ff4c 	bl	8002494 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e400 	.word	0xe000e400
 800260c:	2000015c 	.word	0x2000015c
 8002610:	20000160 	.word	0x20000160
 8002614:	e000ed20 	.word	0xe000ed20
 8002618:	20000008 	.word	0x20000008

0800261c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
	__asm volatile
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	607b      	str	r3, [r7, #4]
}
 8002634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <vPortEnterCritical+0x58>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <vPortEnterCritical+0x58>)
 800263e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <vPortEnterCritical+0x58>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10f      	bne.n	8002668 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <vPortEnterCritical+0x5c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <vPortEnterCritical+0x4c>
	__asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	603b      	str	r3, [r7, #0]
}
 8002664:	bf00      	nop
 8002666:	e7fe      	b.n	8002666 <vPortEnterCritical+0x4a>
	}
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <vPortExitCritical+0x4c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <vPortExitCritical+0x24>
	__asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	607b      	str	r3, [r7, #4]
}
 800269c:	bf00      	nop
 800269e:	e7fe      	b.n	800269e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <vPortExitCritical+0x4c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <vPortExitCritical+0x4c>)
 80026a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <vPortExitCritical+0x4c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <vPortExitCritical+0x42>
 80026b2:	2300      	movs	r3, #0
 80026b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000008 	.word	0x20000008
 80026cc:	00000000 	.word	0x00000000

080026d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80026d0:	f3ef 8009 	mrs	r0, PSP
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <pxCurrentTCBConst>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026e0:	6010      	str	r0, [r2, #0]
 80026e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80026e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80026ea:	f380 8811 	msr	BASEPRI, r0
 80026ee:	f7ff fd2b 	bl	8002148 <vTaskSwitchContext>
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f380 8811 	msr	BASEPRI, r0
 80026fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	6808      	ldr	r0, [r1, #0]
 8002702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002706:	f380 8809 	msr	PSP, r0
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	4770      	bx	lr

08002710 <pxCurrentTCBConst>:
 8002710:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop

08002718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	607b      	str	r3, [r7, #4]
}
 8002730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002732:	f7ff fc4b 	bl	8001fcc <xTaskIncrementTick>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <SysTick_Handler+0x40>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f383 8811 	msr	BASEPRI, r3
}
 800274e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <vPortSetupTimerInterrupt+0x30>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <vPortSetupTimerInterrupt+0x34>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <vPortSetupTimerInterrupt+0x38>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <vPortSetupTimerInterrupt+0x3c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	4a08      	ldr	r2, [pc, #32]	; (800279c <vPortSetupTimerInterrupt+0x40>)
 800277a:	3b01      	subs	r3, #1
 800277c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800277e:	4b03      	ldr	r3, [pc, #12]	; (800278c <vPortSetupTimerInterrupt+0x30>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	e000e010 	.word	0xe000e010
 8002790:	e000e018 	.word	0xe000e018
 8002794:	2000000c 	.word	0x2000000c
 8002798:	10624dd3 	.word	0x10624dd3
 800279c:	e000e014 	.word	0xe000e014

080027a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80027ac:	f7ff fb64 	bl	8001e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <pvPortMalloc+0x174>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027b8:	f000 f910 	bl	80029dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <pvPortMalloc+0x178>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 808e 	bne.w	80028e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01d      	beq.n	800280c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80027d0:	2208      	movs	r2, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f023 0307 	bic.w	r3, r3, #7
 80027e8:	3308      	adds	r3, #8
 80027ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <pvPortMalloc+0x6c>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	617b      	str	r3, [r7, #20]
}
 8002808:	bf00      	nop
 800280a:	e7fe      	b.n	800280a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d069      	beq.n	80028e6 <pvPortMalloc+0x146>
 8002812:	4b42      	ldr	r3, [pc, #264]	; (800291c <pvPortMalloc+0x17c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d864      	bhi.n	80028e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <pvPortMalloc+0x180>)
 800281e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <pvPortMalloc+0x180>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002826:	e004      	b.n	8002832 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d903      	bls.n	8002844 <pvPortMalloc+0xa4>
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f1      	bne.n	8002828 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002844:	4b33      	ldr	r3, [pc, #204]	; (8002914 <pvPortMalloc+0x174>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	429a      	cmp	r2, r3
 800284c:	d04b      	beq.n	80028e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2208      	movs	r2, #8
 8002854:	4413      	add	r3, r2
 8002856:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	2308      	movs	r3, #8
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	429a      	cmp	r2, r3
 800286e:	d91f      	bls.n	80028b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <pvPortMalloc+0xf8>
	__asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	613b      	str	r3, [r7, #16]
}
 8002894:	bf00      	nop
 8002896:	e7fe      	b.n	8002896 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad2      	subs	r2, r2, r3
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028aa:	69b8      	ldr	r0, [r7, #24]
 80028ac:	f000 f8f8 	bl	8002aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <pvPortMalloc+0x17c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <pvPortMalloc+0x17c>)
 80028bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <pvPortMalloc+0x17c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <pvPortMalloc+0x184>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d203      	bcs.n	80028d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <pvPortMalloc+0x17c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <pvPortMalloc+0x184>)
 80028d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <pvPortMalloc+0x178>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	431a      	orrs	r2, r3
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80028e6:	f7ff fad5 	bl	8001e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <pvPortMalloc+0x16a>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	60fb      	str	r3, [r7, #12]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <pvPortMalloc+0x168>
	return pvReturn;
 800290a:	69fb      	ldr	r3, [r7, #28]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000d6c 	.word	0x20000d6c
 8002918:	20000d78 	.word	0x20000d78
 800291c:	20000d70 	.word	0x20000d70
 8002920:	20000d64 	.word	0x20000d64
 8002924:	20000d74 	.word	0x20000d74

08002928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d048      	beq.n	80029cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800293a:	2308      	movs	r3, #8
 800293c:	425b      	negs	r3, r3
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4413      	add	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <vPortFree+0xac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <vPortFree+0x44>
	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	60fb      	str	r3, [r7, #12]
}
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <vPortFree+0x62>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	60bb      	str	r3, [r7, #8]
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <vPortFree+0xac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d019      	beq.n	80029cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d115      	bne.n	80029cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <vPortFree+0xac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	401a      	ands	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80029b0:	f7ff fa62 	bl	8001e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <vPortFree+0xb0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <vPortFree+0xb0>)
 80029c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029c2:	6938      	ldr	r0, [r7, #16]
 80029c4:	f000 f86c 	bl	8002aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80029c8:	f7ff fa64 	bl	8001e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000d78 	.word	0x20000d78
 80029d8:	20000d70 	.word	0x20000d70

080029dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <prvHeapInit+0xac>)
 80029ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3307      	adds	r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <prvHeapInit+0xac>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <prvHeapInit+0xb0>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <prvHeapInit+0xb0>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a28:	2208      	movs	r2, #8
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0307 	bic.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <prvHeapInit+0xb4>)
 8002a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <prvHeapInit+0xb4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <prvHeapInit+0xb4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	1ad2      	subs	r2, r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <prvHeapInit+0xb4>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <prvHeapInit+0xb8>)
 8002a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <prvHeapInit+0xbc>)
 8002a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <prvHeapInit+0xc0>)
 8002a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a7a:	601a      	str	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000164 	.word	0x20000164
 8002a8c:	20000d64 	.word	0x20000d64
 8002a90:	20000d6c 	.word	0x20000d6c
 8002a94:	20000d74 	.word	0x20000d74
 8002a98:	20000d70 	.word	0x20000d70
 8002a9c:	20000d78 	.word	0x20000d78

08002aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <prvInsertBlockIntoFreeList+0xa8>)
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e002      	b.n	8002ab4 <prvInsertBlockIntoFreeList+0x14>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d8f7      	bhi.n	8002aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d108      	bne.n	8002ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	441a      	add	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	441a      	add	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d118      	bne.n	8002b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <prvInsertBlockIntoFreeList+0xac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d00d      	beq.n	8002b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e008      	b.n	8002b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <prvInsertBlockIntoFreeList+0xac>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e003      	b.n	8002b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d002      	beq.n	8002b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000d64 	.word	0x20000d64
 8002b4c:	20000d6c 	.word	0x20000d6c

08002b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b56:	f7fd fafb 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b5a:	f000 f821 	bl	8002ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5e:	f000 f913 	bl	8002d88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b62:	f000 f859 	bl	8002c18 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002b66:	f000 f885 	bl	8002c74 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002b6a:	f000 f8b9 	bl	8002ce0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002b6e:	f000 f8e1 	bl	8002d34 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <main+0x48>)
 8002b74:	1d3c      	adds	r4, r7, #4
 8002b76:	461d      	mov	r5, r3
 8002b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fee7 	bl	8001958 <osThreadCreate>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <main+0x4c>)
 8002b8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002b90:	f7fe fedb 	bl	800194a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <main+0x44>
 8002b96:	bf00      	nop
 8002b98:	080032f4 	.word	0x080032f4
 8002b9c:	20000eb0 	.word	0x20000eb0

08002ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b090      	sub	sp, #64	; 0x40
 8002ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba6:	f107 0318 	add.w	r3, r7, #24
 8002baa:	2228      	movs	r2, #40	; 0x28
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fb7a 	bl	80032a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bca:	2310      	movs	r3, #16
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd2:	f107 0318 	add.w	r3, r7, #24
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd feac 	bl	8000934 <HAL_RCC_OscConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002be2:	f000 f948 	bl	8002e76 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be6:	230f      	movs	r3, #15
 8002be8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f91a 	bl	8000e38 <HAL_RCC_ClockConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002c0a:	f000 f934 	bl	8002e76 <Error_Handler>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3740      	adds	r7, #64	; 0x40
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <MX_I2C1_Init+0x54>)
 8002c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c24:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <MX_I2C1_Init+0x58>)
 8002c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c54:	4804      	ldr	r0, [pc, #16]	; (8002c68 <MX_I2C1_Init+0x50>)
 8002c56:	f7fd fd29 	bl	80006ac <HAL_I2C_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c60:	f000 f909 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000d7c 	.word	0x20000d7c
 8002c6c:	40005400 	.word	0x40005400
 8002c70:	000186a0 	.word	0x000186a0

08002c74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c7a:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <MX_SPI2_Init+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cc4:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cc6:	f7fe fa7f 	bl	80011c8 <HAL_SPI_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002cd0:	f000 f8d1 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000dd0 	.word	0x20000dd0
 8002cdc:	40003800 	.word	0x40003800

08002ce0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <MX_USART1_UART_Init+0x50>)
 8002ce8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d06:	220c      	movs	r2, #12
 8002d08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_USART1_UART_Init+0x4c>)
 8002d18:	f7fe fd24 	bl	8001764 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d22:	f000 f8a8 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000e28 	.word	0x20000e28
 8002d30:	40013800 	.word	0x40013800

08002d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <MX_USART3_UART_Init+0x50>)
 8002d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d6c:	f7fe fcfa 	bl	8001764 <HAL_UART_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d76:	f000 f87e 	bl	8002e76 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000e6c 	.word	0x20000e6c
 8002d84:	40004800 	.word	0x40004800

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <MX_GPIO_Init+0xb4>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <MX_GPIO_Init+0xb4>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6193      	str	r3, [r2, #24]
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <MX_GPIO_Init+0xb4>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <MX_GPIO_Init+0xb4>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <MX_GPIO_Init+0xb4>)
 8002dba:	f043 0308 	orr.w	r3, r3, #8
 8002dbe:	6193      	str	r3, [r2, #24]
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <MX_GPIO_Init+0xb4>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	210f      	movs	r1, #15
 8002dd0:	481b      	ldr	r0, [pc, #108]	; (8002e40 <MX_GPIO_Init+0xb8>)
 8002dd2:	f7fd fc53 	bl	800067c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ddc:	4819      	ldr	r0, [pc, #100]	; (8002e44 <MX_GPIO_Init+0xbc>)
 8002dde:	f7fd fc4d 	bl	800067c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002de2:	230f      	movs	r3, #15
 8002de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2302      	movs	r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	4811      	ldr	r0, [pc, #68]	; (8002e40 <MX_GPIO_Init+0xb8>)
 8002dfa:	f7fd fabb 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dfe:	23f0      	movs	r3, #240	; 0xf0
 8002e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e06:	2301      	movs	r3, #1
 8002e08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	4619      	mov	r1, r3
 8002e10:	480b      	ldr	r0, [pc, #44]	; (8002e40 <MX_GPIO_Init+0xb8>)
 8002e12:	f7fd faaf 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2302      	movs	r3, #2
 8002e26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_GPIO_Init+0xbc>)
 8002e30:	f7fd faa0 	bl	8000374 <HAL_GPIO_Init>

}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010800 	.word	0x40010800
 8002e44:	40010c00 	.word	0x40010c00

08002e48 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7fe fda8 	bl	80019a6 <osDelay>
 8002e56:	e7fb      	b.n	8002e50 <StartDefaultTask+0x8>

08002e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e6a:	f7fd f987 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_MspInit+0x68>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_MspInit+0x68>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6193      	str	r3, [r2, #24]
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_MspInit+0x68>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_MspInit+0x68>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a11      	ldr	r2, [pc, #68]	; (8002eec <HAL_MspInit+0x68>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_MspInit+0x68>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	f06f 0001 	mvn.w	r0, #1
 8002ec2:	f7fd fa2c 	bl	800031e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_MspInit+0x6c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_MspInit+0x6c>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010000 	.word	0x40010000

08002ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_I2C_MspInit+0x70>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d123      	bne.n	8002f5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_I2C_MspInit+0x74>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_I2C_MspInit+0x74>)
 8002f1a:	f043 0308 	orr.w	r3, r3, #8
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_I2C_MspInit+0x74>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f30:	2312      	movs	r3, #18
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480b      	ldr	r0, [pc, #44]	; (8002f6c <HAL_I2C_MspInit+0x78>)
 8002f40:	f7fd fa18 	bl	8000374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_I2C_MspInit+0x74>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_I2C_MspInit+0x74>)
 8002f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_I2C_MspInit+0x74>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40010c00 	.word	0x40010c00

08002f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_SPI_MspInit+0x8c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d131      	bne.n	8002ff4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_SPI_MspInit+0x90>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_SPI_MspInit+0x90>)
 8002f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9a:	61d3      	str	r3, [r2, #28]
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_SPI_MspInit+0x90>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_SPI_MspInit+0x90>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_SPI_MspInit+0x90>)
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_SPI_MspInit+0x90>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002fc0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	f107 0310 	add.w	r3, r7, #16
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480b      	ldr	r0, [pc, #44]	; (8003004 <HAL_SPI_MspInit+0x94>)
 8002fd6:	f7fd f9cd 	bl	8000374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4619      	mov	r1, r3
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <HAL_SPI_MspInit+0x94>)
 8002ff0:	f7fd f9c0 	bl	8000374 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40003800 	.word	0x40003800
 8003000:	40021000 	.word	0x40021000
 8003004:	40010c00 	.word	0x40010c00

08003008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a38      	ldr	r2, [pc, #224]	; (8003104 <HAL_UART_MspInit+0xfc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d132      	bne.n	800308e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_UART_MspInit+0x100>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a36      	ldr	r2, [pc, #216]	; (8003108 <HAL_UART_MspInit+0x100>)
 800302e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_UART_MspInit+0x100>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_UART_MspInit+0x100>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a30      	ldr	r2, [pc, #192]	; (8003108 <HAL_UART_MspInit+0x100>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_UART_MspInit+0x100>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800305c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003066:	f107 0318 	add.w	r3, r7, #24
 800306a:	4619      	mov	r1, r3
 800306c:	4827      	ldr	r0, [pc, #156]	; (800310c <HAL_UART_MspInit+0x104>)
 800306e:	f7fd f981 	bl	8000374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	4619      	mov	r1, r3
 8003086:	4821      	ldr	r0, [pc, #132]	; (800310c <HAL_UART_MspInit+0x104>)
 8003088:	f7fd f974 	bl	8000374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800308c:	e036      	b.n	80030fc <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_UART_MspInit+0x108>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d131      	bne.n	80030fc <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_UART_MspInit+0x100>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_UART_MspInit+0x100>)
 800309e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a2:	61d3      	str	r3, [r2, #28]
 80030a4:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_UART_MspInit+0x100>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b0:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_UART_MspInit+0x100>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_UART_MspInit+0x100>)
 80030b6:	f043 0308 	orr.w	r3, r3, #8
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_UART_MspInit+0x100>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d6:	f107 0318 	add.w	r3, r7, #24
 80030da:	4619      	mov	r1, r3
 80030dc:	480d      	ldr	r0, [pc, #52]	; (8003114 <HAL_UART_MspInit+0x10c>)
 80030de:	f7fd f949 	bl	8000374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	4619      	mov	r1, r3
 80030f6:	4807      	ldr	r0, [pc, #28]	; (8003114 <HAL_UART_MspInit+0x10c>)
 80030f8:	f7fd f93c 	bl	8000374 <HAL_GPIO_Init>
}
 80030fc:	bf00      	nop
 80030fe:	3728      	adds	r7, #40	; 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40013800 	.word	0x40013800
 8003108:	40021000 	.word	0x40021000
 800310c:	40010800 	.word	0x40010800
 8003110:	40004800 	.word	0x40004800
 8003114:	40010c00 	.word	0x40010c00

08003118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8003128:	2200      	movs	r2, #0
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	201c      	movs	r0, #28
 800312e:	f7fd f8f6 	bl	800031e <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003132:	201c      	movs	r0, #28
 8003134:	f7fd f90f 	bl	8000356 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_InitTick+0xa0>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_InitTick+0xa0>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_InitTick+0xa0>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003150:	f107 0210 	add.w	r2, r7, #16
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd ffe6 	bl	800112c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003160:	f7fd ffbc 	bl	80010dc <HAL_RCC_GetPCLK1Freq>
 8003164:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_InitTick+0xa4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	3b01      	subs	r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_InitTick+0xa8>)
 8003176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800317a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_InitTick+0xa8>)
 800317e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003182:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_InitTick+0xa8>)
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_InitTick+0xa8>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_InitTick+0xa8>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003196:	480a      	ldr	r0, [pc, #40]	; (80031c0 <HAL_InitTick+0xa8>)
 8003198:	f7fe f89a 	bl	80012d0 <HAL_TIM_Base_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <HAL_InitTick+0xa8>)
 80031a4:	f7fe f8ec 	bl	8001380 <HAL_TIM_Base_Start_IT>
 80031a8:	4603      	mov	r3, r0
 80031aa:	e000      	b.n	80031ae <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3730      	adds	r7, #48	; 0x30
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	20000eb4 	.word	0x20000eb4

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <HardFault_Handler+0x4>

080031d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <MemManage_Handler+0x4>

080031dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <BusFault_Handler+0x4>

080031e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <UsageFault_Handler+0x4>

080031e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <TIM2_IRQHandler+0x10>)
 80031fa:	f7fe f913 	bl	8001424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000eb4 	.word	0x20000eb4

08003208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003216:	490d      	ldr	r1, [pc, #52]	; (800324c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800323a:	f7ff ffe5 	bl	8003208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323e:	f000 f80f 	bl	8003260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003242:	f7ff fc85 	bl	8002b50 <main>
  bx lr
 8003246:	4770      	bx	lr
  ldr r0, =_sdata
 8003248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800324c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003250:	08003328 	.word	0x08003328
  ldr r2, =_sbss
 8003254:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003258:	20000efc 	.word	0x20000efc

0800325c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC1_2_IRQHandler>
	...

08003260 <__libc_init_array>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	2600      	movs	r6, #0
 8003264:	4d0c      	ldr	r5, [pc, #48]	; (8003298 <__libc_init_array+0x38>)
 8003266:	4c0d      	ldr	r4, [pc, #52]	; (800329c <__libc_init_array+0x3c>)
 8003268:	1b64      	subs	r4, r4, r5
 800326a:	10a4      	asrs	r4, r4, #2
 800326c:	42a6      	cmp	r6, r4
 800326e:	d109      	bne.n	8003284 <__libc_init_array+0x24>
 8003270:	f000 f822 	bl	80032b8 <_init>
 8003274:	2600      	movs	r6, #0
 8003276:	4d0a      	ldr	r5, [pc, #40]	; (80032a0 <__libc_init_array+0x40>)
 8003278:	4c0a      	ldr	r4, [pc, #40]	; (80032a4 <__libc_init_array+0x44>)
 800327a:	1b64      	subs	r4, r4, r5
 800327c:	10a4      	asrs	r4, r4, #2
 800327e:	42a6      	cmp	r6, r4
 8003280:	d105      	bne.n	800328e <__libc_init_array+0x2e>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	f855 3b04 	ldr.w	r3, [r5], #4
 8003288:	4798      	blx	r3
 800328a:	3601      	adds	r6, #1
 800328c:	e7ee      	b.n	800326c <__libc_init_array+0xc>
 800328e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003292:	4798      	blx	r3
 8003294:	3601      	adds	r6, #1
 8003296:	e7f2      	b.n	800327e <__libc_init_array+0x1e>
 8003298:	08003320 	.word	0x08003320
 800329c:	08003320 	.word	0x08003320
 80032a0:	08003320 	.word	0x08003320
 80032a4:	08003324 	.word	0x08003324

080032a8 <memset>:
 80032a8:	4603      	mov	r3, r0
 80032aa:	4402      	add	r2, r0
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d100      	bne.n	80032b2 <memset+0xa>
 80032b0:	4770      	bx	lr
 80032b2:	f803 1b01 	strb.w	r1, [r3], #1
 80032b6:	e7f9      	b.n	80032ac <memset+0x4>

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
