
F3_SmartDoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dfc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800808c  0800808c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800808c  0800808c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800808c  0800808c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08008094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032a0  200000d0  08008164  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003370  08008164  00023370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ae1  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000389b  00000000  00000000  00039bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  0003d478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  0003ec80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b621  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013666  00000000  00000000  0005b949  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097e0f  00000000  00000000  0006efaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006780  00000000  00000000  00106e3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ef4 	.word	0x08007ef4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	08007ef4 	.word	0x08007ef4

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f8f3 	bl	800034c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f006 fbf2 	bl	8006950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f006 fa80 	bl	8006670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000004 	.word	0x20000004
 800019c:	2000313c 	.word	0x2000313c

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	2000313c 	.word	0x2000313c

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001bc:	f7ff fff0 	bl	80001a0 <HAL_GetTick>
 80001c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001cc:	d005      	beq.n	80001da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <HAL_Delay+0x40>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	461a      	mov	r2, r3
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	4413      	add	r3, r2
 80001d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001da:	bf00      	nop
 80001dc:	f7ff ffe0 	bl	80001a0 <HAL_GetTick>
 80001e0:	4602      	mov	r2, r0
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	1ad3      	subs	r3, r2, r3
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d8f7      	bhi.n	80001dc <HAL_Delay+0x28>
  {
  }
}
 80001ec:	bf00      	nop
 80001ee:	3710      	adds	r7, #16
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000004 	.word	0x20000004

080001f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <__NVIC_SetPriorityGrouping+0x44>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020e:	68ba      	ldr	r2, [r7, #8]
 8000210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000214:	4013      	ands	r3, r2
 8000216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800022a:	4a04      	ldr	r2, [pc, #16]	; (800023c <__NVIC_SetPriorityGrouping+0x44>)
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	60d3      	str	r3, [r2, #12]
}
 8000230:	bf00      	nop
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <__NVIC_GetPriorityGrouping+0x18>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	0a1b      	lsrs	r3, r3, #8
 800024a:	f003 0307 	and.w	r3, r3, #7
}
 800024e:	4618      	mov	r0, r3
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	2b00      	cmp	r3, #0
 800026c:	db0b      	blt.n	8000286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	f003 021f 	and.w	r2, r3, #31
 8000274:	4906      	ldr	r1, [pc, #24]	; (8000290 <__NVIC_EnableIRQ+0x34>)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	095b      	lsrs	r3, r3, #5
 800027c:	2001      	movs	r0, #1
 800027e:	fa00 f202 	lsl.w	r2, r0, r2
 8000282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100

08000294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	db0a      	blt.n	80002be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	490c      	ldr	r1, [pc, #48]	; (80002e0 <__NVIC_SetPriority+0x4c>)
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002bc:	e00a      	b.n	80002d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <__NVIC_SetPriority+0x50>)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	3b04      	subs	r3, #4
 80002cc:	0112      	lsls	r2, r2, #4
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	440b      	add	r3, r1
 80002d2:	761a      	strb	r2, [r3, #24]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b089      	sub	sp, #36	; 0x24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	f003 0307 	and.w	r3, r3, #7
 80002fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	f1c3 0307 	rsb	r3, r3, #7
 8000302:	2b04      	cmp	r3, #4
 8000304:	bf28      	it	cs
 8000306:	2304      	movcs	r3, #4
 8000308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030a:	69fb      	ldr	r3, [r7, #28]
 800030c:	3304      	adds	r3, #4
 800030e:	2b06      	cmp	r3, #6
 8000310:	d902      	bls.n	8000318 <NVIC_EncodePriority+0x30>
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	3b03      	subs	r3, #3
 8000316:	e000      	b.n	800031a <NVIC_EncodePriority+0x32>
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	f04f 32ff 	mov.w	r2, #4294967295
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	43da      	mvns	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	401a      	ands	r2, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000330:	f04f 31ff 	mov.w	r1, #4294967295
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
 800033a:	43d9      	mvns	r1, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	4313      	orrs	r3, r2
         );
}
 8000342:	4618      	mov	r0, r3
 8000344:	3724      	adds	r7, #36	; 0x24
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ff4f 	bl	80001f8 <__NVIC_SetPriorityGrouping>
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000362:	b580      	push	{r7, lr}
 8000364:	b086      	sub	sp, #24
 8000366:	af00      	add	r7, sp, #0
 8000368:	4603      	mov	r3, r0
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000374:	f7ff ff64 	bl	8000240 <__NVIC_GetPriorityGrouping>
 8000378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	68b9      	ldr	r1, [r7, #8]
 800037e:	6978      	ldr	r0, [r7, #20]
 8000380:	f7ff ffb2 	bl	80002e8 <NVIC_EncodePriority>
 8000384:	4602      	mov	r2, r0
 8000386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800038a:	4611      	mov	r1, r2
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff81 	bl	8000294 <__NVIC_SetPriority>
}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
 80003a0:	4603      	mov	r3, r0
 80003a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff57 	bl	800025c <__NVIC_EnableIRQ>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b085      	sub	sp, #20
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d008      	beq.n	80003de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2204      	movs	r2, #4
 80003d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80003da:	2301      	movs	r3, #1
 80003dc:	e020      	b.n	8000420 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f022 020e 	bic.w	r2, r2, #14
 80003ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f022 0201 	bic.w	r2, r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000406:	2101      	movs	r1, #1
 8000408:	fa01 f202 	lsl.w	r2, r1, r2
 800040c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2201      	movs	r2, #1
 8000412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2200      	movs	r2, #0
 800041a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800041e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
	...

0800042c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800043e:	2b02      	cmp	r3, #2
 8000440:	d005      	beq.n	800044e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2204      	movs	r2, #4
 8000446:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e051      	b.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f022 020e 	bic.w	r2, r2, #14
 800045c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f022 0201 	bic.w	r2, r2, #1
 800046c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <HAL_DMA_Abort_IT+0xd0>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d029      	beq.n	80004cc <HAL_DMA_Abort_IT+0xa0>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a20      	ldr	r2, [pc, #128]	; (8000500 <HAL_DMA_Abort_IT+0xd4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d022      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x9c>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <HAL_DMA_Abort_IT+0xd8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d01a      	beq.n	80004c2 <HAL_DMA_Abort_IT+0x96>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a1d      	ldr	r2, [pc, #116]	; (8000508 <HAL_DMA_Abort_IT+0xdc>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d012      	beq.n	80004bc <HAL_DMA_Abort_IT+0x90>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <HAL_DMA_Abort_IT+0xe0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d00a      	beq.n	80004b6 <HAL_DMA_Abort_IT+0x8a>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <HAL_DMA_Abort_IT+0xe4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d102      	bne.n	80004b0 <HAL_DMA_Abort_IT+0x84>
 80004aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ae:	e00e      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004b4:	e00b      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	e008      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c0:	e005      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c6:	e002      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004c8:	2310      	movs	r3, #16
 80004ca:	e000      	b.n	80004ce <HAL_DMA_Abort_IT+0xa2>
 80004cc:	2301      	movs	r3, #1
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_DMA_Abort_IT+0xe8>)
 80004d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	4798      	blx	r3
    } 
  }
  return status;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020008 	.word	0x40020008
 8000500:	4002001c 	.word	0x4002001c
 8000504:	40020030 	.word	0x40020030
 8000508:	40020044 	.word	0x40020044
 800050c:	40020058 	.word	0x40020058
 8000510:	4002006c 	.word	0x4002006c
 8000514:	40020000 	.word	0x40020000

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800052a:	e127      	b.n	800077c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800052c:	2201      	movs	r2, #1
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	4013      	ands	r3, r2
 800053e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000540:	69ba      	ldr	r2, [r7, #24]
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	429a      	cmp	r2, r3
 8000546:	f040 8116 	bne.w	8000776 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b12      	cmp	r3, #18
 8000550:	d034      	beq.n	80005bc <HAL_GPIO_Init+0xa4>
 8000552:	2b12      	cmp	r3, #18
 8000554:	d80d      	bhi.n	8000572 <HAL_GPIO_Init+0x5a>
 8000556:	2b02      	cmp	r3, #2
 8000558:	d02b      	beq.n	80005b2 <HAL_GPIO_Init+0x9a>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d804      	bhi.n	8000568 <HAL_GPIO_Init+0x50>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d031      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d01c      	beq.n	80005a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000566:	e048      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000568:	2b03      	cmp	r3, #3
 800056a:	d043      	beq.n	80005f4 <HAL_GPIO_Init+0xdc>
 800056c:	2b11      	cmp	r3, #17
 800056e:	d01b      	beq.n	80005a8 <HAL_GPIO_Init+0x90>
          break;
 8000570:	e043      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000572:	4a89      	ldr	r2, [pc, #548]	; (8000798 <HAL_GPIO_Init+0x280>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d026      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000578:	4a87      	ldr	r2, [pc, #540]	; (8000798 <HAL_GPIO_Init+0x280>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d806      	bhi.n	800058c <HAL_GPIO_Init+0x74>
 800057e:	4a87      	ldr	r2, [pc, #540]	; (800079c <HAL_GPIO_Init+0x284>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d020      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000584:	4a86      	ldr	r2, [pc, #536]	; (80007a0 <HAL_GPIO_Init+0x288>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d01d      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
          break;
 800058a:	e036      	b.n	80005fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800058c:	4a85      	ldr	r2, [pc, #532]	; (80007a4 <HAL_GPIO_Init+0x28c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d019      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000592:	4a85      	ldr	r2, [pc, #532]	; (80007a8 <HAL_GPIO_Init+0x290>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d016      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
 8000598:	4a84      	ldr	r2, [pc, #528]	; (80007ac <HAL_GPIO_Init+0x294>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d013      	beq.n	80005c6 <HAL_GPIO_Init+0xae>
          break;
 800059e:	e02c      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	623b      	str	r3, [r7, #32]
          break;
 80005a6:	e028      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	3304      	adds	r3, #4
 80005ae:	623b      	str	r3, [r7, #32]
          break;
 80005b0:	e023      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	3308      	adds	r3, #8
 80005b8:	623b      	str	r3, [r7, #32]
          break;
 80005ba:	e01e      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	330c      	adds	r3, #12
 80005c2:	623b      	str	r3, [r7, #32]
          break;
 80005c4:	e019      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005ce:	2304      	movs	r3, #4
 80005d0:	623b      	str	r3, [r7, #32]
          break;
 80005d2:	e012      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d105      	bne.n	80005e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005dc:	2308      	movs	r3, #8
 80005de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	611a      	str	r2, [r3, #16]
          break;
 80005e6:	e008      	b.n	80005fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005e8:	2308      	movs	r3, #8
 80005ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	69fa      	ldr	r2, [r7, #28]
 80005f0:	615a      	str	r2, [r3, #20]
          break;
 80005f2:	e002      	b.n	80005fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
          break;
 80005f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	2bff      	cmp	r3, #255	; 0xff
 80005fe:	d801      	bhi.n	8000604 <HAL_GPIO_Init+0xec>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	e001      	b.n	8000608 <HAL_GPIO_Init+0xf0>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d802      	bhi.n	8000616 <HAL_GPIO_Init+0xfe>
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	e002      	b.n	800061c <HAL_GPIO_Init+0x104>
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	3b08      	subs	r3, #8
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	210f      	movs	r1, #15
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	401a      	ands	r2, r3
 800062e:	6a39      	ldr	r1, [r7, #32]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	431a      	orrs	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	2b00      	cmp	r3, #0
 8000646:	f000 8096 	beq.w	8000776 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b59      	ldr	r3, [pc, #356]	; (80007b0 <HAL_GPIO_Init+0x298>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a58      	ldr	r2, [pc, #352]	; (80007b0 <HAL_GPIO_Init+0x298>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <HAL_GPIO_Init+0x298>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000662:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	089b      	lsrs	r3, r3, #2
 8000668:	3302      	adds	r3, #2
 800066a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	f003 0303 	and.w	r3, r3, #3
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	220f      	movs	r2, #15
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4013      	ands	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4b      	ldr	r2, [pc, #300]	; (80007b8 <HAL_GPIO_Init+0x2a0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d013      	beq.n	80006b6 <HAL_GPIO_Init+0x19e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_GPIO_Init+0x2a4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00d      	beq.n	80006b2 <HAL_GPIO_Init+0x19a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <HAL_GPIO_Init+0x2a8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d007      	beq.n	80006ae <HAL_GPIO_Init+0x196>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a48      	ldr	r2, [pc, #288]	; (80007c4 <HAL_GPIO_Init+0x2ac>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_GPIO_Init+0x192>
 80006a6:	2303      	movs	r3, #3
 80006a8:	e006      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e004      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006ae:	2302      	movs	r3, #2
 80006b0:	e002      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <HAL_GPIO_Init+0x1a0>
 80006b6:	2300      	movs	r3, #0
 80006b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ba:	f002 0203 	and.w	r2, r2, #3
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	4093      	lsls	r3, r2
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006c8:	493a      	ldr	r1, [pc, #232]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006e2:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4938      	ldr	r1, [pc, #224]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006f0:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4933      	ldr	r1, [pc, #204]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	492e      	ldr	r1, [pc, #184]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4313      	orrs	r3, r2
 8000714:	604b      	str	r3, [r1, #4]
 8000716:	e006      	b.n	8000726 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	43db      	mvns	r3, r3
 8000720:	4929      	ldr	r1, [pc, #164]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000722:	4013      	ands	r3, r2
 8000724:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	4924      	ldr	r1, [pc, #144]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	4313      	orrs	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
 800073e:	e006      	b.n	800074e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	43db      	mvns	r3, r3
 8000748:	491f      	ldr	r1, [pc, #124]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800074a:	4013      	ands	r3, r2
 800074c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	491a      	ldr	r1, [pc, #104]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	4313      	orrs	r3, r2
 8000764:	60cb      	str	r3, [r1, #12]
 8000766:	e006      	b.n	8000776 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	43db      	mvns	r3, r3
 8000770:	4915      	ldr	r1, [pc, #84]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 8000772:	4013      	ands	r3, r2
 8000774:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	fa22 f303 	lsr.w	r3, r2, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	f47f aed0 	bne.w	800052c <HAL_GPIO_Init+0x14>
  }
}
 800078c:	bf00      	nop
 800078e:	372c      	adds	r7, #44	; 0x2c
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	10210000 	.word	0x10210000
 800079c:	10110000 	.word	0x10110000
 80007a0:	10120000 	.word	0x10120000
 80007a4:	10310000 	.word	0x10310000
 80007a8:	10320000 	.word	0x10320000
 80007ac:	10220000 	.word	0x10220000
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40011400 	.word	0x40011400
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	4013      	ands	r3, r2
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e001      	b.n	80007ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	807b      	strh	r3, [r7, #2]
 8000806:	4613      	mov	r3, r2
 8000808:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800080a:	787b      	ldrb	r3, [r7, #1]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000810:	887a      	ldrh	r2, [r7, #2]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000816:	e003      	b.n	8000820 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	041a      	lsls	r2, r3, #16
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	611a      	str	r2, [r3, #16]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e11f      	b.n	8000a7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d106      	bne.n	8000858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f005 ff44 	bl	80066e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2224      	movs	r2, #36	; 0x24
 800085c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0201 	bic.w	r2, r2, #1
 800086e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800087e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800088e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000890:	f000 ffe0 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8000894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	4a7b      	ldr	r2, [pc, #492]	; (8000a88 <HAL_I2C_Init+0x25c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d807      	bhi.n	80008b0 <HAL_I2C_Init+0x84>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4a7a      	ldr	r2, [pc, #488]	; (8000a8c <HAL_I2C_Init+0x260>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	bf94      	ite	ls
 80008a8:	2301      	movls	r3, #1
 80008aa:	2300      	movhi	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	e006      	b.n	80008be <HAL_I2C_Init+0x92>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4a77      	ldr	r2, [pc, #476]	; (8000a90 <HAL_I2C_Init+0x264>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	bf94      	ite	ls
 80008b8:	2301      	movls	r3, #1
 80008ba:	2300      	movhi	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e0db      	b.n	8000a7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4a72      	ldr	r2, [pc, #456]	; (8000a94 <HAL_I2C_Init+0x268>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6a1b      	ldr	r3, [r3, #32]
 80008ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	4a64      	ldr	r2, [pc, #400]	; (8000a88 <HAL_I2C_Init+0x25c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d802      	bhi.n	8000900 <HAL_I2C_Init+0xd4>
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	e009      	b.n	8000914 <HAL_I2C_Init+0xe8>
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	4a63      	ldr	r2, [pc, #396]	; (8000a98 <HAL_I2C_Init+0x26c>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	099b      	lsrs	r3, r3, #6
 8000912:	3301      	adds	r3, #1
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	430b      	orrs	r3, r1
 800091a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4956      	ldr	r1, [pc, #344]	; (8000a88 <HAL_I2C_Init+0x25c>)
 8000930:	428b      	cmp	r3, r1
 8000932:	d80d      	bhi.n	8000950 <HAL_I2C_Init+0x124>
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	1e59      	subs	r1, r3, #1
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000942:	3301      	adds	r3, #1
 8000944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000948:	2b04      	cmp	r3, #4
 800094a:	bf38      	it	cc
 800094c:	2304      	movcc	r3, #4
 800094e:	e04f      	b.n	80009f0 <HAL_I2C_Init+0x1c4>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d111      	bne.n	800097c <HAL_I2C_Init+0x150>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	1e58      	subs	r0, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	440b      	add	r3, r1
 8000966:	fbb0 f3f3 	udiv	r3, r0, r3
 800096a:	3301      	adds	r3, #1
 800096c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf0c      	ite	eq
 8000974:	2301      	moveq	r3, #1
 8000976:	2300      	movne	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	e012      	b.n	80009a2 <HAL_I2C_Init+0x176>
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1e58      	subs	r0, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6859      	ldr	r1, [r3, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	0099      	lsls	r1, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000992:	3301      	adds	r3, #1
 8000994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf0c      	ite	eq
 800099c:	2301      	moveq	r3, #1
 800099e:	2300      	movne	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_I2C_Init+0x17e>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e022      	b.n	80009f0 <HAL_I2C_Init+0x1c4>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10e      	bne.n	80009d0 <HAL_I2C_Init+0x1a4>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1e58      	subs	r0, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6859      	ldr	r1, [r3, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	440b      	add	r3, r1
 80009c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80009c4:	3301      	adds	r3, #1
 80009c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ce:	e00f      	b.n	80009f0 <HAL_I2C_Init+0x1c4>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	1e58      	subs	r0, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6859      	ldr	r1, [r3, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	0099      	lsls	r1, r3, #2
 80009e0:	440b      	add	r3, r1
 80009e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80009e6:	3301      	adds	r3, #1
 80009e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	6809      	ldr	r1, [r1, #0]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69da      	ldr	r2, [r3, #28]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a1b      	ldr	r3, [r3, #32]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	6911      	ldr	r1, [r2, #16]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68d2      	ldr	r2, [r2, #12]
 8000a2a:	4311      	orrs	r1, r2
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	430b      	orrs	r3, r1
 8000a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	431a      	orrs	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0201 	orr.w	r2, r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2220      	movs	r2, #32
 8000a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	000186a0 	.word	0x000186a0
 8000a8c:	001e847f 	.word	0x001e847f
 8000a90:	003d08ff 	.word	0x003d08ff
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	10624dd3 	.word	0x10624dd3

08000a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	817b      	strh	r3, [r7, #10]
 8000aac:	4613      	mov	r3, r2
 8000aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff fb76 	bl	80001a0 <HAL_GetTick>
 8000ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	f040 80e0 	bne.w	8000c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2319      	movs	r3, #25
 8000aca:	2201      	movs	r2, #1
 8000acc:	4970      	ldr	r1, [pc, #448]	; (8000c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f000 f964 	bl	8000d9c <I2C_WaitOnFlagUntilTimeout>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ada:	2302      	movs	r3, #2
 8000adc:	e0d3      	b.n	8000c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d101      	bne.n	8000aec <HAL_I2C_Master_Transmit+0x50>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	e0cc      	b.n	8000c86 <HAL_I2C_Master_Transmit+0x1ea>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2201      	movs	r2, #1
 8000af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d007      	beq.n	8000b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0201 	orr.w	r2, r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2221      	movs	r2, #33	; 0x21
 8000b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	893a      	ldrh	r2, [r7, #8]
 8000b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4a50      	ldr	r2, [pc, #320]	; (8000c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000b54:	8979      	ldrh	r1, [r7, #10]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	6a3a      	ldr	r2, [r7, #32]
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f89c 	bl	8000c98 <I2C_MasterRequestWrite>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e08d      	b.n	8000c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000b80:	e066      	b.n	8000c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	6a39      	ldr	r1, [r7, #32]
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f000 f9de 	bl	8000f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00d      	beq.n	8000bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d107      	bne.n	8000baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e06b      	b.n	8000c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d11b      	bne.n	8000c24 <HAL_I2C_Master_Transmit+0x188>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d017      	beq.n	8000c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3b01      	subs	r3, #1
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	6a39      	ldr	r1, [r7, #32]
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f000 f9ce 	bl	8000fca <I2C_WaitOnBTFFlagUntilTimeout>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00d      	beq.n	8000c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d107      	bne.n	8000c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e01a      	b.n	8000c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d194      	bne.n	8000b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	e000      	b.n	8000c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000c84:	2302      	movs	r3, #2
  }
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	00100002 	.word	0x00100002
 8000c94:	ffff0000 	.word	0xffff0000

08000c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d006      	beq.n	8000cc2 <I2C_MasterRequestWrite+0x2a>
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d003      	beq.n	8000cc2 <I2C_MasterRequestWrite+0x2a>
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000cc0:	d108      	bne.n	8000cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e00b      	b.n	8000cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	2b12      	cmp	r3, #18
 8000cda:	d107      	bne.n	8000cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f000 f84f 	bl	8000d9c <I2C_WaitOnFlagUntilTimeout>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00d      	beq.n	8000d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d12:	d103      	bne.n	8000d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e035      	b.n	8000d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d28:	d108      	bne.n	8000d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d2a:	897b      	ldrh	r3, [r7, #10]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	e01b      	b.n	8000d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000d3c:	897b      	ldrh	r3, [r7, #10]
 8000d3e:	11db      	asrs	r3, r3, #7
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0306 	and.w	r3, r3, #6
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f063 030f 	orn	r3, r3, #15
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	490e      	ldr	r1, [pc, #56]	; (8000d94 <I2C_MasterRequestWrite+0xfc>)
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f875 	bl	8000e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e010      	b.n	8000d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000d6a:	897b      	ldrh	r3, [r7, #10]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <I2C_MasterRequestWrite+0x100>)
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f000 f865 	bl	8000e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	00010008 	.word	0x00010008
 8000d98:	00010002 	.word	0x00010002

08000d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dac:	e025      	b.n	8000dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d021      	beq.n	8000dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000db6:	f7ff f9f3 	bl	80001a0 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d302      	bcc.n	8000dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d116      	bne.n	8000dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f043 0220 	orr.w	r2, r3, #32
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e023      	b.n	8000e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	0c1b      	lsrs	r3, r3, #16
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d10d      	bne.n	8000e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf0c      	ite	eq
 8000e16:	2301      	moveq	r3, #1
 8000e18:	2300      	movne	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	e00c      	b.n	8000e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf0c      	ite	eq
 8000e32:	2301      	moveq	r3, #1
 8000e34:	2300      	movne	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d0b6      	beq.n	8000dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e58:	e051      	b.n	8000efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e68:	d123      	bne.n	8000eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f043 0204 	orr.w	r2, r3, #4
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e046      	b.n	8000f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d021      	beq.n	8000efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eba:	f7ff f971 	bl	80001a0 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d302      	bcc.n	8000ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d116      	bne.n	8000efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2220      	movs	r2, #32
 8000eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f043 0220 	orr.w	r2, r3, #32
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e020      	b.n	8000f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d10c      	bne.n	8000f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4013      	ands	r3, r2
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	e00b      	b.n	8000f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2301      	movne	r3, #1
 8000f36:	2300      	moveq	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d18d      	bne.n	8000e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f54:	e02d      	b.n	8000fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f878 	bl	800104c <I2C_IsAcknowledgeFailed>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e02d      	b.n	8000fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d021      	beq.n	8000fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f6e:	f7ff f917 	bl	80001a0 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d302      	bcc.n	8000f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d116      	bne.n	8000fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f043 0220 	orr.w	r2, r3, #32
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e007      	b.n	8000fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbc:	2b80      	cmp	r3, #128	; 0x80
 8000fbe:	d1ca      	bne.n	8000f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000fd6:	e02d      	b.n	8001034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 f837 	bl	800104c <I2C_IsAcknowledgeFailed>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e02d      	b.n	8001044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fee:	d021      	beq.n	8001034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ff0:	f7ff f8d6 	bl	80001a0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d302      	bcc.n	8001006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d116      	bne.n	8001034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2220      	movs	r2, #32
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f043 0220 	orr.w	r2, r3, #32
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e007      	b.n	8001044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b04      	cmp	r3, #4
 8001040:	d1ca      	bne.n	8000fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d11b      	bne.n	800109c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800106c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2220      	movs	r2, #32
 8001078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f043 0204 	orr.w	r2, r3, #4
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e26c      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c8:	4b92      	ldr	r3, [pc, #584]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d00c      	beq.n	80010ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d4:	4b8f      	ldr	r3, [pc, #572]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d112      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
 80010e0:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d10b      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	4b89      	ldr	r3, [pc, #548]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d06c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x12c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d168      	bne.n	80011d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e246      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x76>
 8001110:	4b80      	ldr	r3, [pc, #512]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a7f      	ldr	r2, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e02e      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0xbc>
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6e      	ldr	r2, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001164:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a67      	ldr	r2, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff f80c 	bl	80001a0 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff f808 	bl	80001a0 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1fa      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xe4>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7fe fff8 	bl	80001a0 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7fe fff4 	bl	80001a0 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1e6      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x10c>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
 80011fa:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1ba      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7fe ffad 	bl	80001a0 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7fe ffa9 	bl	80001a0 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e19b      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4927      	ldr	r1, [pc, #156]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7fe ff8c 	bl	80001a0 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7fe ff88 	bl	80001a0 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e17a      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03a      	beq.n	800132c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7fe ff6c 	bl	80001a0 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7fe ff68 	bl	80001a0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e15a      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fb0a 	bl	8001904 <RCC_Delay>
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7fe ff52 	bl	80001a0 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fe:	e00f      	b.n	8001320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7fe ff4e 	bl	80001a0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d908      	bls.n	8001320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e140      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	42420000 	.word	0x42420000
 800131c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b9e      	ldr	r3, [pc, #632]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e9      	bne.n	8001300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a6 	beq.w	8001486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b97      	ldr	r3, [pc, #604]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b94      	ldr	r3, [pc, #592]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a93      	ldr	r2, [pc, #588]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b91      	ldr	r3, [pc, #580]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b8e      	ldr	r3, [pc, #568]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a8a      	ldr	r2, [pc, #552]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7fe ff0f 	bl	80001a0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7fe ff0b 	bl	80001a0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0fd      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x312>
 80013ac:	4b7b      	ldr	r3, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a7a      	ldr	r2, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013c2:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a75      	ldr	r2, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b73      	ldr	r3, [pc, #460]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a72      	ldr	r2, [pc, #456]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x356>
 80013e4:	4b6d      	ldr	r3, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a6c      	ldr	r2, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a69      	ldr	r2, [pc, #420]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a66      	ldr	r2, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a63      	ldr	r2, [pc, #396]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7fe febf 	bl	80001a0 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7fe febb 	bl	80001a0 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	; 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0ab      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCC_OscConfig+0x37e>
 8001448:	e014      	b.n	8001474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7fe fea9 	bl	80001a0 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7fe fea5 	bl	80001a0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e095      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ee      	bne.n	8001452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d105      	bne.n	8001486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147a:	4b48      	ldr	r3, [pc, #288]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8081 	beq.w	8001592 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d061      	beq.n	8001560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d146      	bne.n	8001532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_RCC_OscConfig+0x4fc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7fe fe79 	bl	80001a0 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7fe fe75 	bl	80001a0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e067      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	492d      	ldr	r1, [pc, #180]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a19      	ldr	r1, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	430b      	orrs	r3, r1
 80014fe:	4927      	ldr	r1, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x4fc>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7fe fe49 	bl	80001a0 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7fe fe45 	bl	80001a0 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e037      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x46a>
 8001530:	e02f      	b.n	8001592 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_RCC_OscConfig+0x4fc>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7fe fe32 	bl	80001a0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7fe fe2e 	bl	80001a0 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e020      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x498>
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e013      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	429a      	cmp	r2, r3
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	40007000 	.word	0x40007000
 80015a4:	42420060 	.word	0x42420060

080015a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0d0      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d910      	bls.n	80015ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 0207 	bic.w	r2, r3, #7
 80015d2:	4965      	ldr	r1, [pc, #404]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800160e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a52      	ldr	r2, [pc, #328]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d040      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d115      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e073      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06b      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f023 0203 	bic.w	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4936      	ldr	r1, [pc, #216]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001698:	f7fe fd82 	bl	80001a0 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7fe fd7e 	bl	80001a0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e053      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 020c 	and.w	r2, r3, #12
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1eb      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d210      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0207 	bic.w	r2, r3, #7
 80016de:	4922      	ldr	r1, [pc, #136]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4601      	mov	r1, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	fa21 f303 	lsr.w	r3, r1, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1cc>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1d0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f005 f8fa 	bl	8006950 <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000
 800176c:	40021000 	.word	0x40021000
 8001770:	08008040 	.word	0x08008040
 8001774:	20000014 	.word	0x20000014
 8001778:	20000000 	.word	0x20000000

0800177c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	b490      	push	{r4, r7}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001784:	1d3c      	adds	r4, r7, #4
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x46>
 80017ba:	e02d      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017be:	623b      	str	r3, [r7, #32]
      break;
 80017c0:	e02d      	b.n	800181e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ce:	4413      	add	r3, r2
 80017d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c5b      	lsrs	r3, r3, #17
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ee:	4413      	add	r3, r2
 80017f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017fa:	fb02 f203 	mul.w	r2, r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
 8001806:	e004      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_RCC_GetSysClockFreq+0xc0>)
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	623b      	str	r3, [r7, #32]
      break;
 8001816:	e002      	b.n	800181e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_RCC_GetSysClockFreq+0xbc>)
 800181a:	623b      	str	r3, [r7, #32]
      break;
 800181c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181e:	6a3b      	ldr	r3, [r7, #32]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bc90      	pop	{r4, r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	08007f0c 	.word	0x08007f0c
 8001830:	08007f1c 	.word	0x08007f1c
 8001834:	40021000 	.word	0x40021000
 8001838:	007a1200 	.word	0x007a1200
 800183c:	003d0900 	.word	0x003d0900

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_RCC_GetHCLKFreq+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000014 	.word	0x20000014

08001854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001858:	f7ff fff2 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 800185c:	4601      	mov	r1, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	08008050 	.word	0x08008050

0800187c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001880:	f7ff ffde 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001884:	4601      	mov	r1, r0
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	0adb      	lsrs	r3, r3, #11
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4a03      	ldr	r2, [pc, #12]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	08008050 	.word	0x08008050

080018a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	220f      	movs	r2, #15
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_GetClockConfig+0x58>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_RCC_GetClockConfig+0x58>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_GetClockConfig+0x58>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_RCC_GetClockConfig+0x58>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0207 	and.w	r2, r3, #7
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000
 8001900:	40022000 	.word	0x40022000

08001904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <RCC_Delay+0x34>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <RCC_Delay+0x38>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001920:	bf00      	nop
  }
  while (Delay --);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	60fa      	str	r2, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <RCC_Delay+0x1c>
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000014 	.word	0x20000014
 800193c:	10624dd3 	.word	0x10624dd3

08001940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e076      	b.n	8001a40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001962:	d009      	beq.n	8001978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
 800196a:	e005      	b.n	8001978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f004 fee2 	bl	800675c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fc:	ea42 0103 	orr.w	r1, r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	0c1a      	lsrs	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f002 0204 	and.w	r2, r2, #4
 8001a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_SPI_Transmit+0x22>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e126      	b.n	8001cb8 <HAL_SPI_Transmit+0x270>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a72:	f7fe fb95 	bl	80001a0 <HAL_GetTick>
 8001a76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d002      	beq.n	8001a8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a8c:	e10b      	b.n	8001ca6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_SPI_Transmit+0x52>
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a9e:	e102      	b.n	8001ca6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae6:	d10f      	bne.n	8001b08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	2b40      	cmp	r3, #64	; 0x40
 8001b14:	d007      	beq.n	8001b26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2e:	d14b      	bne.n	8001bc8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_SPI_Transmit+0xf6>
 8001b38:	8afb      	ldrh	r3, [r7, #22]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d13e      	bne.n	8001bbc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	1c9a      	adds	r2, r3, #2
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b62:	e02b      	b.n	8001bbc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d112      	bne.n	8001b98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	1c9a      	adds	r2, r3, #2
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b96:	e011      	b.n	8001bbc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b98:	f7fe fb02 	bl	80001a0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d803      	bhi.n	8001bb0 <HAL_SPI_Transmit+0x168>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bae:	d102      	bne.n	8001bb6 <HAL_SPI_Transmit+0x16e>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bba:	e074      	b.n	8001ca6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ce      	bne.n	8001b64 <HAL_SPI_Transmit+0x11c>
 8001bc6:	e04c      	b.n	8001c62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_Transmit+0x18e>
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d140      	bne.n	8001c58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	330c      	adds	r3, #12
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bfc:	e02c      	b.n	8001c58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d113      	bne.n	8001c34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	330c      	adds	r3, #12
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c32:	e011      	b.n	8001c58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c34:	f7fe fab4 	bl	80001a0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d803      	bhi.n	8001c4c <HAL_SPI_Transmit+0x204>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d102      	bne.n	8001c52 <HAL_SPI_Transmit+0x20a>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c56:	e026      	b.n	8001ca6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1cd      	bne.n	8001bfe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fbb8 	bl	80023dc <SPI_EndRxTxTransaction>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10a      	bne.n	8001c96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
 8001ca2:	e000      	b.n	8001ca6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ca4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cdc:	d112      	bne.n	8001d04 <HAL_SPI_Receive+0x44>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10e      	bne.n	8001d04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f8f1 	bl	8001ee2 <HAL_SPI_TransmitReceive>
 8001d00:	4603      	mov	r3, r0
 8001d02:	e0ea      	b.n	8001eda <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_SPI_Receive+0x52>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e0e3      	b.n	8001eda <HAL_SPI_Receive+0x21a>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d1a:	f7fe fa41 	bl	80001a0 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d002      	beq.n	8001d32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d30:	e0ca      	b.n	8001ec8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_SPI_Receive+0x7e>
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d42:	e0c1      	b.n	8001ec8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2204      	movs	r2, #4
 8001d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d8a:	d10f      	bne.n	8001dac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001daa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d007      	beq.n	8001dca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d162      	bne.n	8001e98 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001dd2:	e02e      	b.n	8001e32 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d115      	bne.n	8001e0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f103 020c 	add.w	r2, r3, #12
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e0c:	e011      	b.n	8001e32 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e0e:	f7fe f9c7 	bl	80001a0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d803      	bhi.n	8001e26 <HAL_SPI_Receive+0x166>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d102      	bne.n	8001e2c <HAL_SPI_Receive+0x16c>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e30:	e04a      	b.n	8001ec8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1cb      	bne.n	8001dd4 <HAL_SPI_Receive+0x114>
 8001e3c:	e031      	b.n	8001ea2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d113      	bne.n	8001e74 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	b292      	uxth	r2, r2
 8001e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	1c9a      	adds	r2, r3, #2
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e72:	e011      	b.n	8001e98 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e74:	f7fe f994 	bl	80001a0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d803      	bhi.n	8001e8c <HAL_SPI_Receive+0x1cc>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d102      	bne.n	8001e92 <HAL_SPI_Receive+0x1d2>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e96:	e017      	b.n	8001ec8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1cd      	bne.n	8001e3e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	6839      	ldr	r1, [r7, #0]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fa46 	bl	8002338 <SPI_EndRxTransaction>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	75fb      	strb	r3, [r7, #23]
 8001ec4:	e000      	b.n	8001ec8 <HAL_SPI_Receive+0x208>
  }

error :
 8001ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b08c      	sub	sp, #48	; 0x30
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x26>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e18a      	b.n	800221e <HAL_SPI_TransmitReceive+0x33c>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f10:	f7fe f946 	bl	80001a0 <HAL_GetTick>
 8001f14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d00f      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x70>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f38:	d107      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x68>
 8001f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d003      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f50:	e15b      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x82>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x82>
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f6a:	e14e      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d003      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d007      	beq.n	8001fd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fdc:	d178      	bne.n	80020d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_TransmitReceive+0x10a>
 8001fe6:	8b7b      	ldrh	r3, [r7, #26]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d166      	bne.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002010:	e053      	b.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d11b      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x176>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_SPI_TransmitReceive+0x176>
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d113      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	1c9a      	adds	r2, r3, #2
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d119      	bne.n	800209a <HAL_SPI_TransmitReceive+0x1b8>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d014      	beq.n	800209a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	b292      	uxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	1c9a      	adds	r2, r3, #2
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002096:	2301      	movs	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800209a:	f7fe f881 	bl	80001a0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d807      	bhi.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d003      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020b8:	e0a7      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1a6      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x130>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1a1      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x130>
 80020ce:	e07c      	b.n	80021ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_SPI_TransmitReceive+0x1fc>
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d16b      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	330c      	adds	r3, #12
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002104:	e057      	b.n	80021b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11c      	bne.n	800214e <HAL_SPI_TransmitReceive+0x26c>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d017      	beq.n	800214e <HAL_SPI_TransmitReceive+0x26c>
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d114      	bne.n	800214e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d119      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x2ae>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d014      	beq.n	8002190 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800218c:	2301      	movs	r3, #1
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002190:	f7fe f806 	bl	80001a0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800219c:	429a      	cmp	r2, r3
 800219e:	d803      	bhi.n	80021a8 <HAL_SPI_TransmitReceive+0x2c6>
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d102      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x2cc>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021b4:	e029      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1a2      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x224>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d19d      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f904 	bl	80023dc <SPI_EndRxTxTransaction>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80021e6:	e010      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	e000      	b.n	800220a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002208:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800221a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800221e:	4618      	mov	r0, r3
 8002220:	3730      	adds	r7, #48	; 0x30
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002238:	f7fd ffb2 	bl	80001a0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002248:	f7fd ffaa 	bl	80001a0 <HAL_GetTick>
 800224c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	0d1b      	lsrs	r3, r3, #20
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800225e:	e054      	b.n	800230a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d050      	beq.n	800230a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002268:	f7fd ff9a 	bl	80001a0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	d902      	bls.n	800227e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d13d      	bne.n	80022fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800228c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002296:	d111      	bne.n	80022bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	d004      	beq.n	80022ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022aa:	d107      	bne.n	80022bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c4:	d10f      	bne.n	80022e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e017      	b.n	800232a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3b01      	subs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	429a      	cmp	r2, r3
 8002326:	d19b      	bne.n	8002260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000014 	.word	0x20000014

08002338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800234c:	d111      	bne.n	8002372 <SPI_EndRxTransaction+0x3a>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002356:	d004      	beq.n	8002362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d107      	bne.n	8002372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237a:	d117      	bne.n	80023ac <SPI_EndRxTransaction+0x74>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d112      	bne.n	80023ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	2101      	movs	r1, #1
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff ff49 	bl	8002228 <SPI_WaitFlagStateUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01a      	beq.n	80023d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e013      	b.n	80023d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7ff ff36 	bl	8002228 <SPI_WaitFlagStateUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e000      	b.n	80023d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff ff18 	bl	8002228 <SPI_WaitFlagStateUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e000      	b.n	8002410 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f004 f9d8 	bl	80067f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 fa64 	bl	8002924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a18      	ldr	r2, [pc, #96]	; (8002550 <HAL_TIM_Base_Start_IT+0x98>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00e      	beq.n	8002510 <HAL_TIM_Base_Start_IT+0x58>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d009      	beq.n	8002510 <HAL_TIM_Base_Start_IT+0x58>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_TIM_Base_Start_IT+0x9c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_TIM_Base_Start_IT+0x58>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_Base_Start_IT+0xa0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d111      	bne.n	8002534 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d010      	beq.n	8002544 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	e007      	b.n	8002544 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800

0800255c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b02      	cmp	r3, #2
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0202 	mvn.w	r2, #2
 8002588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9a4 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f997 	bl	80028da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f9a6 	bl	80028fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0204 	mvn.w	r2, #4
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f97a 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f96d 	bl	80028da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f97c 	bl	80028fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b08      	cmp	r3, #8
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0208 	mvn.w	r2, #8
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f950 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f943 	bl	80028da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f952 	bl	80028fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d122      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b10      	cmp	r3, #16
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2208      	movs	r2, #8
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f926 	bl	80028ec <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f919 	bl	80028da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f928 	bl	80028fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0201 	mvn.w	r2, #1
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f003 ffb2 	bl	8006644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa6b 	bl	8002be2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8ec 	bl	8002910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b20      	cmp	r3, #32
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b20      	cmp	r3, #32
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0220 	mvn.w	r2, #32
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa36 	bl	8002bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x18>
 8002780:	2302      	movs	r3, #2
 8002782:	e0a6      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x166>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d067      	beq.n	800288c <HAL_TIM_ConfigClockSource+0x120>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d80b      	bhi.n	80027d8 <HAL_TIM_ConfigClockSource+0x6c>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d073      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x140>
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d802      	bhi.n	80027ce <HAL_TIM_ConfigClockSource+0x62>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06f      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027cc:	e078      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d06c      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x140>
 80027d2:	2b30      	cmp	r3, #48	; 0x30
 80027d4:	d06a      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80027d6:	e073      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d00d      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0x8c>
 80027dc:	2b70      	cmp	r3, #112	; 0x70
 80027de:	d804      	bhi.n	80027ea <HAL_TIM_ConfigClockSource+0x7e>
 80027e0:	2b50      	cmp	r3, #80	; 0x50
 80027e2:	d033      	beq.n	800284c <HAL_TIM_ConfigClockSource+0xe0>
 80027e4:	2b60      	cmp	r3, #96	; 0x60
 80027e6:	d041      	beq.n	800286c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80027e8:	e06a      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	d066      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x152>
 80027f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f4:	d017      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027f6:	e063      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f000 f965 	bl	8002ad6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800281a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]
      break;
 8002824:	e04c      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6899      	ldr	r1, [r3, #8]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f000 f94e 	bl	8002ad6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002848:	609a      	str	r2, [r3, #8]
      break;
 800284a:	e039      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	461a      	mov	r2, r3
 800285a:	f000 f8c5 	bl	80029e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2150      	movs	r1, #80	; 0x50
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f91c 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 800286a:	e029      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	461a      	mov	r2, r3
 800287a:	f000 f8e3 	bl	8002a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2160      	movs	r1, #96	; 0x60
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f90c 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 800288a:	e019      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	461a      	mov	r2, r3
 800289a:	f000 f8a5 	bl	80029e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2140      	movs	r1, #64	; 0x40
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f8fc 	bl	8002aa2 <TIM_ITRx_SetConfig>
      break;
 80028aa:	e009      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 f8f3 	bl	8002aa2 <TIM_ITRx_SetConfig>
        break;
 80028bc:	e000      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80028be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
	...

08002924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a29      	ldr	r2, [pc, #164]	; (80029dc <TIM_Base_SetConfig+0xb8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00b      	beq.n	8002954 <TIM_Base_SetConfig+0x30>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d007      	beq.n	8002954 <TIM_Base_SetConfig+0x30>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <TIM_Base_SetConfig+0xbc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d003      	beq.n	8002954 <TIM_Base_SetConfig+0x30>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <TIM_Base_SetConfig+0xc0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d108      	bne.n	8002966 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <TIM_Base_SetConfig+0xb8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00b      	beq.n	8002986 <TIM_Base_SetConfig+0x62>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d007      	beq.n	8002986 <TIM_Base_SetConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <TIM_Base_SetConfig+0xbc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_Base_SetConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <TIM_Base_SetConfig+0xc0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <TIM_Base_SetConfig+0xb8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	615a      	str	r2, [r3, #20]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800

080029e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f023 030a 	bic.w	r3, r3, #10
 8002a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f023 0210 	bic.w	r2, r3, #16
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	031b      	lsls	r3, r3, #12
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f043 0307 	orr.w	r3, r3, #7
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	021a      	lsls	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	609a      	str	r2, [r3, #8]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e046      	b.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00e      	beq.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d009      	beq.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e03f      	b.n	8002c86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f003 fe08 	bl	8006830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fd29 	bl	8003690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b08a      	sub	sp, #40	; 0x28
 8002c92:	af02      	add	r7, sp, #8
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d17c      	bne.n	8002da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_UART_Transmit+0x2c>
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e075      	b.n	8002daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UART_Transmit+0x3e>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e06e      	b.n	8002daa <HAL_UART_Transmit+0x11c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2221      	movs	r2, #33	; 0x21
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce2:	f7fd fa5d 	bl	80001a0 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfc:	d108      	bne.n	8002d10 <HAL_UART_Transmit+0x82>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e003      	b.n	8002d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d20:	e02a      	b.n	8002d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fadc 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e036      	b.n	8002daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3302      	adds	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	e007      	b.n	8002d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1cf      	bne.n	8002d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2140      	movs	r1, #64	; 0x40
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 faac 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e006      	b.n	8002daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	; 0x28
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 808c 	bne.w	8002eec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_UART_Receive+0x2e>
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e084      	b.n	8002eee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Receive+0x40>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e07d      	b.n	8002eee <HAL_UART_Receive+0x13c>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2222      	movs	r2, #34	; 0x22
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e0e:	f7fd f9c7 	bl	80001a0 <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d108      	bne.n	8002e3c <HAL_UART_Receive+0x8a>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e003      	b.n	8002e44 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e4c:	e043      	b.n	8002ed6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2120      	movs	r1, #32
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa46 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e042      	b.n	8002eee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	3302      	adds	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e01f      	b.n	8002ec8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d007      	beq.n	8002ea2 <HAL_UART_Receive+0xf0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_UART_Receive+0xfe>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e008      	b.n	8002ec2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1b6      	bne.n	8002e4e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d11d      	bne.n	8002f4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_UART_Receive_IT+0x26>
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e016      	b.n	8002f4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Receive_IT+0x38>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e00f      	b.n	8002f4e <HAL_UART_Receive_IT+0x58>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa1b 	bl	800337e <UART_Start_Receive_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_UART_IRQHandler+0x52>
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 facb 	bl	800353e <UART_Receive_IT>
      return;
 8002fa8:	e17c      	b.n	80032a4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80b1 	beq.w	8003114 <HAL_UART_IRQHandler+0x1bc>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x70>
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80a6 	beq.w	8003114 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x90>
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_UART_IRQHandler+0xb0>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0202 	orr.w	r2, r3, #2
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_UART_IRQHandler+0xd0>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00f      	beq.n	8003052 <HAL_UART_IRQHandler+0xfa>
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_UART_IRQHandler+0xee>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0208 	orr.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 811f 	beq.w	800329a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_UART_IRQHandler+0x11e>
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa64 	bl	800353e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <HAL_UART_IRQHandler+0x146>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d031      	beq.n	8003102 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9a6 	bl	80033f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d023      	beq.n	80030fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d013      	beq.n	80030f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	4a77      	ldr	r2, [pc, #476]	; (80032ac <HAL_UART_IRQHandler+0x354>)
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f9a8 	bl	800042c <HAL_DMA_Abort_IT>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ec:	4610      	mov	r0, r2
 80030ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	e00e      	b.n	8003110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8e5 	bl	80032c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	e00a      	b.n	8003110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8e1 	bl	80032c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003100:	e006      	b.n	8003110 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8dd 	bl	80032c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800310e:	e0c4      	b.n	800329a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	bf00      	nop
    return;
 8003112:	e0c2      	b.n	800329a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 80a1 	bne.w	8003260 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 809b 	beq.w	8003260 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8095 	beq.w	8003260 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d04e      	beq.n	80031f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003164:	8a3b      	ldrh	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8099 	beq.w	800329e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003170:	8a3a      	ldrh	r2, [r7, #16]
 8003172:	429a      	cmp	r2, r3
 8003174:	f080 8093 	bcs.w	800329e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8a3a      	ldrh	r2, [r7, #16]
 800317c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b20      	cmp	r3, #32
 8003186:	d02b      	beq.n	80031e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003196:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0210 	bic.w	r2, r2, #16
 80031d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f8eb 	bl	80003b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f86f 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031f6:	e052      	b.n	800329e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003200:	b29b      	uxth	r3, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d048      	beq.n	80032a2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003210:	8a7b      	ldrh	r3, [r7, #18]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d045      	beq.n	80032a2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003224:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0210 	bic.w	r2, r2, #16
 8003252:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003254:	8a7b      	ldrh	r3, [r7, #18]
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f83b 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800325e:	e020      	b.n	80032a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_UART_IRQHandler+0x324>
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8fb 	bl	8003470 <UART_Transmit_IT>
    return;
 800327a:	e013      	b.n	80032a4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x34c>
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f93c 	bl	800350e <UART_EndTransmit_IT>
    return;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <HAL_UART_IRQHandler+0x34c>
    return;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_UART_IRQHandler+0x34c>
      return;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_UART_IRQHandler+0x34c>
      return;
 80032a2:	bf00      	nop
  }
}
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	08003449 	.word	0x08003449

080032b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e02c      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d028      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	f7fc ff49 	bl	80001a0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	429a      	cmp	r2, r3
 8003318:	d21d      	bcs.n	8003356 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003328:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e00f      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d0c3      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2222      	movs	r2, #34	; 0x22
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0220 	orr.w	r2, r2, #32
 80033e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003406:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0210 	bic.w	r2, r2, #16
 800342e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ff2d 	bl	80032c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b21      	cmp	r3, #33	; 0x21
 8003482:	d13e      	bne.n	8003502 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d114      	bne.n	80034b8 <UART_Transmit_IT+0x48>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d110      	bne.n	80034b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]
 80034b6:	e008      	b.n	80034ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	1c59      	adds	r1, r3, #1
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6211      	str	r1, [r2, #32]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4619      	mov	r1, r3
 80034d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f002 fde2 	bl	80060f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b22      	cmp	r3, #34	; 0x22
 8003550:	f040 8099 	bne.w	8003686 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d117      	bne.n	800358e <UART_Receive_IT+0x50>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d113      	bne.n	800358e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	b29a      	uxth	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	1c9a      	adds	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
 800358c:	e026      	b.n	80035dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d007      	beq.n	80035b2 <UART_Receive_IT+0x74>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <UART_Receive_IT+0x82>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e008      	b.n	80035d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4619      	mov	r1, r3
 80035ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d148      	bne.n	8003682 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0220 	bic.w	r2, r2, #32
 80035fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800360e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	2b01      	cmp	r3, #1
 800362e:	d123      	bne.n	8003678 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d10a      	bne.n	800366a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fe2f 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
 8003676:	e002      	b.n	800367e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fe19 	bl	80032b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e002      	b.n	8003688 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ca:	f023 030c 	bic.w	r3, r3, #12
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <UART_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d103      	bne.n	8003700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7fe f8c0 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	e002      	b.n	8003706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003700:	f7fe f8a8 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8003704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <UART_SetConfig+0x118>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	0119      	lsls	r1, r3, #4
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <UART_SetConfig+0x118>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2064      	movs	r0, #100	; 0x64
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <UART_SetConfig+0x118>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	4419      	add	r1, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <UART_SetConfig+0x118>)
 8003776:	fba3 0302 	umull	r0, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2064      	movs	r0, #100	; 0x64
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <UART_SetConfig+0x118>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	440a      	add	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40013800 	.word	0x40013800
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037be:	2b84      	cmp	r3, #132	; 0x84
 80037c0:	d005      	beq.n	80037ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	3303      	adds	r3, #3
 80037cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037de:	f001 f85d 	bl	800489c <vTaskStartScheduler>
  
  return osOK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685c      	ldr	r4, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037fe:	b29e      	uxth	r6, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ffd0 	bl	80037ac <makeFreeRtosPriority>
 800380c:	4602      	mov	r2, r0
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	9200      	str	r2, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	4632      	mov	r2, r6
 800381a:	4629      	mov	r1, r5
 800381c:	4620      	mov	r0, r4
 800381e:	f000 fee0 	bl	80045e2 <xTaskCreate>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d001      	beq.n	800382c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003836 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <osDelay+0x16>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	e000      	b.n	800384e <osDelay+0x18>
 800384c:	2301      	movs	r3, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fff0 	bl	8004834 <vTaskDelay>
  
  return osOK;
 8003854:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d110      	bne.n	8003890 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800386e:	2203      	movs	r2, #3
 8003870:	2100      	movs	r1, #0
 8003872:	2001      	movs	r0, #1
 8003874:	f000 f93a 	bl	8003aec <xQueueGenericCreate>
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <osSemaphoreCreate+0x2e>
 8003880:	2300      	movs	r3, #0
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f988 	bl	8003b9c <xQueueGenericSend>
    return sema;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	e000      	b.n	8003892 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8003890:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	4619      	mov	r1, r3
 80038b0:	f000 f91c 	bl	8003aec <xQueueGenericCreate>
 80038b4:	4603      	mov	r3, r0
#endif
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f103 0208 	add.w	r2, r3, #8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f04f 32ff 	mov.w	r2, #4294967295
 80038d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f103 0208 	add.w	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f103 0208 	add.w	r2, r3, #8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	601a      	str	r2, [r3, #0]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d103      	bne.n	800397a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e00c      	b.n	8003994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3308      	adds	r3, #8
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e002      	b.n	8003988 <vListInsert+0x2e>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d2f6      	bcs.n	8003982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6892      	ldr	r2, [r2, #8]
 80039e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d103      	bne.n	80039fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	e7fe      	b.n	8003a42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a44:	f001 fe20 	bl	8005688 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	441a      	add	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	3b01      	subs	r3, #1
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	22ff      	movs	r2, #255	; 0xff
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d114      	bne.n	8003ac4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01a      	beq.n	8003ad8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 f922 	bl	8004cf0 <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <xQueueGenericReset+0xcc>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	e009      	b.n	8003ad8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3310      	adds	r3, #16
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fef8 	bl	80038be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3324      	adds	r3, #36	; 0x24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fef3 	bl	80038be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ad8:	f001 fe04 	bl	80056e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <xQueueGenericCreate+0x28>
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e7fe      	b.n	8003b12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e004      	b.n	8003b2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3348      	adds	r3, #72	; 0x48
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fea0 	bl	8005874 <pvPortMalloc>
 8003b34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	3348      	adds	r3, #72	; 0x48
 8003b40:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b42:	79fa      	ldrb	r2, [r7, #7]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f805 	bl	8003b5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b54:	69bb      	ldr	r3, [r7, #24]
	}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e002      	b.n	8003b80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	69b8      	ldr	r0, [r7, #24]
 8003b90:	f7ff ff44 	bl	8003a1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08e      	sub	sp, #56	; 0x38
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003baa:	2300      	movs	r3, #0
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <xQueueGenericSend+0x30>
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	e7fe      	b.n	8003bca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <xQueueGenericSend+0x3e>
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <xQueueGenericSend+0x42>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueGenericSend+0x44>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <xQueueGenericSend+0x5c>
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	e7fe      	b.n	8003bf6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d103      	bne.n	8003c06 <xQueueGenericSend+0x6a>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <xQueueGenericSend+0x6e>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <xQueueGenericSend+0x70>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <xQueueGenericSend+0x88>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	e7fe      	b.n	8003c22 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c24:	f001 fa02 	bl	800502c <xTaskGetSchedulerState>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <xQueueGenericSend+0x98>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <xQueueGenericSend+0x9c>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <xQueueGenericSend+0x9e>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <xQueueGenericSend+0xb6>
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e7fe      	b.n	8003c50 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c52:	f001 fd19 	bl	8005688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <xQueueGenericSend+0xcc>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d129      	bne.n	8003cbc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6e:	f000 fba8 	bl	80043c2 <prvCopyDataToQueue>
 8003c72:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 f835 	bl	8004cf0 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <xQueueGenericSend+0x1f0>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	e00a      	b.n	8003cb4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ca4:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <xQueueGenericSend+0x1f0>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cb4:	f001 fd16 	bl	80056e4 <vPortExitCritical>
				return pdPASS;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e063      	b.n	8003d84 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cc2:	f001 fd0f 	bl	80056e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e05c      	b.n	8003d84 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 f86d 	bl	8004db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cde:	f001 fd01 	bl	80056e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce2:	f000 fe21 	bl	8004928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ce6:	f001 fccf 	bl	8005688 <vPortEnterCritical>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d103      	bne.n	8003d00 <xQueueGenericSend+0x164>
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d06:	b25b      	sxtb	r3, r3
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d103      	bne.n	8003d16 <xQueueGenericSend+0x17a>
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d16:	f001 fce5 	bl	80056e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d1a:	1d3a      	adds	r2, r7, #4
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 f85c 	bl	8004de0 <xTaskCheckForTimeOut>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d124      	bne.n	8003d78 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d30:	f000 fc3f 	bl	80045b2 <prvIsQueueFull>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 ffb0 	bl	8004ca8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4a:	f000 fbca 	bl	80044e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d4e:	f000 fdf9 	bl	8004944 <xTaskResumeAll>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f47f af7c 	bne.w	8003c52 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <xQueueGenericSend+0x1f0>)
 8003d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	e772      	b.n	8003c52 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d6e:	f000 fbb8 	bl	80044e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d72:	f000 fde7 	bl	8004944 <xTaskResumeAll>
 8003d76:	e76c      	b.n	8003c52 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7a:	f000 fbb2 	bl	80044e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d7e:	f000 fde1 	bl	8004944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d82:	2300      	movs	r3, #0
		}
	}
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3738      	adds	r7, #56	; 0x38
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <xQueueGenericSendFromISR+0x2c>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	e7fe      	b.n	8003dba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <xQueueGenericSendFromISR+0x3a>
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <xQueueGenericSendFromISR+0x3e>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <xQueueGenericSendFromISR+0x40>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <xQueueGenericSendFromISR+0x58>
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	e7fe      	b.n	8003de6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d103      	bne.n	8003df6 <xQueueGenericSendFromISR+0x66>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <xQueueGenericSendFromISR+0x6a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <xQueueGenericSendFromISR+0x6c>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <xQueueGenericSendFromISR+0x84>
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e7fe      	b.n	8003e12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e14:	f001 fcf2 	bl	80057fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e18:	f3ef 8211 	mrs	r2, BASEPRI
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	61ba      	str	r2, [r7, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <xQueueGenericSendFromISR+0xb6>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d12c      	bne.n	8003ea0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e56:	f000 fab4 	bl	80043c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d112      	bne.n	8003e8a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d016      	beq.n	8003e9a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	3324      	adds	r3, #36	; 0x24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 ff3d 	bl	8004cf0 <xTaskRemoveFromEventList>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e007      	b.n	8003e9a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	3301      	adds	r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	b25a      	sxtb	r2, r3
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003e9e:	e001      	b.n	8003ea4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3738      	adds	r7, #56	; 0x38
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	e7fe      	b.n	8003ede <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <xQueueGiveFromISR+0x44>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	e7fe      	b.n	8003efa <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <xQueueGiveFromISR+0x54>
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGiveFromISR+0x58>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGiveFromISR+0x5a>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xQueueGiveFromISR+0x72>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	e7fe      	b.n	8003f28 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f2a:	f001 fc67 	bl	80057fc <vPortValidateInterruptPriority>
	__asm volatile
 8003f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	617a      	str	r2, [r7, #20]
 8003f44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003f46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d22b      	bcs.n	8003fb2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d112      	bne.n	8003f9c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 feb4 	bl	8004cf0 <xTaskRemoveFromEventList>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e007      	b.n	8003fac <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	b25a      	sxtb	r2, r3
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fac:	2301      	movs	r3, #1
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb0:	e001      	b.n	8003fb6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3738      	adds	r7, #56	; 0x38
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	; 0x30
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <xQueueReceive+0x2e>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <xQueueReceive+0x3c>
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <xQueueReceive+0x40>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <xQueueReceive+0x42>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <xQueueReceive+0x5a>
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e7fe      	b.n	8004024 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004026:	f001 f801 	bl	800502c <xTaskGetSchedulerState>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <xQueueReceive+0x6a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <xQueueReceive+0x6e>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueReceive+0x70>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <xQueueReceive+0x88>
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e7fe      	b.n	8004052 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004054:	f001 fb18 	bl	8005688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01f      	beq.n	80040a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004068:	f000 fa15 	bl	8004496 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00f      	beq.n	800409c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	3310      	adds	r3, #16
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fe35 	bl	8004cf0 <xTaskRemoveFromEventList>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800408c:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <xQueueReceive+0x1b4>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800409c:	f001 fb22 	bl	80056e4 <vPortExitCritical>
				return pdPASS;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e069      	b.n	8004178 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040aa:	f001 fb1b 	bl	80056e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e062      	b.n	8004178 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fe79 	bl	8004db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040c6:	f001 fb0d 	bl	80056e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ca:	f000 fc2d 	bl	8004928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ce:	f001 fadb 	bl	8005688 <vPortEnterCritical>
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d103      	bne.n	80040e8 <xQueueReceive+0x11c>
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d103      	bne.n	80040fe <xQueueReceive+0x132>
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040fe:	f001 faf1 	bl	80056e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004102:	1d3a      	adds	r2, r7, #4
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fe68 	bl	8004de0 <xTaskCheckForTimeOut>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d123      	bne.n	800415e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004118:	f000 fa35 	bl	8004586 <prvIsQueueEmpty>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fdbc 	bl	8004ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004132:	f000 f9d6 	bl	80044e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004136:	f000 fc05 	bl	8004944 <xTaskResumeAll>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d189      	bne.n	8004054 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <xQueueReceive+0x1b4>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	e780      	b.n	8004054 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004154:	f000 f9c5 	bl	80044e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004158:	f000 fbf4 	bl	8004944 <xTaskResumeAll>
 800415c:	e77a      	b.n	8004054 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800415e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004160:	f000 f9bf 	bl	80044e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004164:	f000 fbee 	bl	8004944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416a:	f000 fa0c 	bl	8004586 <prvIsQueueEmpty>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	f43f af6f 	beq.w	8004054 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004176:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004178:	4618      	mov	r0, r3
 800417a:	3730      	adds	r7, #48	; 0x30
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	; 0x38
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <xQueueSemaphoreTake+0x30>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	e7fe      	b.n	80041b2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <xQueueSemaphoreTake+0x4c>
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e7fe      	b.n	80041ce <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041d0:	f000 ff2c 	bl	800502c <xTaskGetSchedulerState>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <xQueueSemaphoreTake+0x5c>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <xQueueSemaphoreTake+0x60>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <xQueueSemaphoreTake+0x62>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <xQueueSemaphoreTake+0x7a>
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e7fe      	b.n	80041fc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041fe:	f001 fa43 	bl	8005688 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800421e:	f001 f8cb 	bl	80053b8 <pvTaskIncrementMutexHeldCount>
 8004222:	4602      	mov	r2, r0
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00f      	beq.n	8004250 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	3310      	adds	r3, #16
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fd5b 	bl	8004cf0 <xTaskRemoveFromEventList>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <xQueueSemaphoreTake+0x20c>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004250:	f001 fa48 	bl	80056e4 <vPortExitCritical>
				return pdPASS;
 8004254:	2301      	movs	r3, #1
 8004256:	e096      	b.n	8004386 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d110      	bne.n	8004280 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <xQueueSemaphoreTake+0xf4>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e7fe      	b.n	8004276 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004278:	f001 fa34 	bl	80056e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800427c:	2300      	movs	r3, #0
 800427e:	e082      	b.n	8004386 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fd92 	bl	8004db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004290:	2301      	movs	r3, #1
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004294:	f001 fa26 	bl	80056e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004298:	f000 fb46 	bl	8004928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800429c:	f001 f9f4 	bl	8005688 <vPortEnterCritical>
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d103      	bne.n	80042b6 <xQueueSemaphoreTake+0x132>
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d103      	bne.n	80042cc <xQueueSemaphoreTake+0x148>
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042cc:	f001 fa0a 	bl	80056e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042d0:	463a      	mov	r2, r7
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fd81 	bl	8004de0 <xTaskCheckForTimeOut>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d132      	bne.n	800434a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042e6:	f000 f94e 	bl	8004586 <prvIsQueueEmpty>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d026      	beq.n	800433e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80042f8:	f001 f9c6 	bl	8005688 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 feb1 	bl	8005068 <xTaskPriorityInherit>
 8004306:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004308:	f001 f9ec 	bl	80056e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	3324      	adds	r3, #36	; 0x24
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fcc7 	bl	8004ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800431a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800431c:	f000 f8e1 	bl	80044e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004320:	f000 fb10 	bl	8004944 <xTaskResumeAll>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	f47f af69 	bne.w	80041fe <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <xQueueSemaphoreTake+0x20c>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	e75f      	b.n	80041fe <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800433e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004340:	f000 f8cf 	bl	80044e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004344:	f000 fafe 	bl	8004944 <xTaskResumeAll>
 8004348:	e759      	b.n	80041fe <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800434a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800434c:	f000 f8c9 	bl	80044e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004350:	f000 faf8 	bl	8004944 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004356:	f000 f916 	bl	8004586 <prvIsQueueEmpty>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	f43f af4e 	beq.w	80041fe <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004368:	f001 f98e 	bl	8005688 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800436c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800436e:	f000 f811 	bl	8004394 <prvGetDisinheritPriorityAfterTimeout>
 8004372:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800437a:	4618      	mov	r0, r3
 800437c:	f000 ff7e 	bl	800527c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004380:	f001 f9b0 	bl	80056e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004386:	4618      	mov	r0, r3
 8004388:	3738      	adds	r7, #56	; 0x38
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1c3 0307 	rsb	r3, r3, #7
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e001      	b.n	80043b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80043b6:	68fb      	ldr	r3, [r7, #12]
	}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d14d      	bne.n	8004484 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fec1 	bl	8005174 <xTaskPriorityDisinherit>
 80043f2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e043      	b.n	8004484 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d119      	bne.n	8004436 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6898      	ldr	r0, [r3, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	461a      	mov	r2, r3
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	f003 f955 	bl	80076bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d32b      	bcc.n	8004484 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	e026      	b.n	8004484 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68d8      	ldr	r0, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	461a      	mov	r2, r3
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	f003 f93b 	bl	80076bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	425b      	negs	r3, r3
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d207      	bcs.n	8004472 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	425b      	negs	r3, r3
 800446c:	441a      	add	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d105      	bne.n	8004484 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	3b01      	subs	r3, #1
 8004482:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800448c:	697b      	ldr	r3, [r7, #20]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d018      	beq.n	80044da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	441a      	add	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d303      	bcc.n	80044ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68d9      	ldr	r1, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	461a      	mov	r2, r3
 80044d4:	6838      	ldr	r0, [r7, #0]
 80044d6:	f003 f8f1 	bl	80076bc <memcpy>
	}
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044ea:	f001 f8cd 	bl	8005688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044f6:	e011      	b.n	800451c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3324      	adds	r3, #36	; 0x24
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fbf3 	bl	8004cf0 <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004510:	f000 fcc6 	bl	8004ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	3b01      	subs	r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800451c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	dce9      	bgt.n	80044f8 <prvUnlockQueue+0x16>
 8004524:	e000      	b.n	8004528 <prvUnlockQueue+0x46>
					break;
 8004526:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	22ff      	movs	r2, #255	; 0xff
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004530:	f001 f8d8 	bl	80056e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004534:	f001 f8a8 	bl	8005688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800453e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004540:	e011      	b.n	8004566 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d012      	beq.n	8004570 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3310      	adds	r3, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fbce 	bl	8004cf0 <xTaskRemoveFromEventList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800455a:	f000 fca1 	bl	8004ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800455e:	7bbb      	ldrb	r3, [r7, #14]
 8004560:	3b01      	subs	r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dce9      	bgt.n	8004542 <prvUnlockQueue+0x60>
 800456e:	e000      	b.n	8004572 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004570:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	22ff      	movs	r2, #255	; 0xff
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800457a:	f001 f8b3 	bl	80056e4 <vPortExitCritical>
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800458e:	f001 f87b 	bl	8005688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e001      	b.n	80045a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045a4:	f001 f89e 	bl	80056e4 <vPortExitCritical>

	return xReturn;
 80045a8:	68fb      	ldr	r3, [r7, #12]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045ba:	f001 f865 	bl	8005688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d102      	bne.n	80045d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e001      	b.n	80045d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045d4:	f001 f886 	bl	80056e4 <vPortExitCritical>

	return xReturn;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b08c      	sub	sp, #48	; 0x30
 80045e6:	af04      	add	r7, sp, #16
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 f93c 	bl	8005874 <pvPortMalloc>
 80045fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004604:	2054      	movs	r0, #84	; 0x54
 8004606:	f001 f935 	bl	8005874 <pvPortMalloc>
 800460a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
 8004618:	e005      	b.n	8004626 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f001 f9ec 	bl	80059f8 <vPortFree>
 8004620:	e001      	b.n	8004626 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	2300      	movs	r3, #0
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f80e 	bl	8004664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004648:	69f8      	ldr	r0, [r7, #28]
 800464a:	f000 f889 	bl	8004760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e002      	b.n	800465a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800465a:	69bb      	ldr	r3, [r7, #24]
	}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800467c:	3b01      	subs	r3, #1
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f023 0307 	bic.w	r3, r3, #7
 800468a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <prvInitialiseNewTask+0x46>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e7fe      	b.n	80046a8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e012      	b.n	80046d6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	7819      	ldrb	r1, [r3, #0]
 80046b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	3334      	adds	r3, #52	; 0x34
 80046c0:	460a      	mov	r2, r1
 80046c2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b0f      	cmp	r3, #15
 80046da:	d9e9      	bls.n	80046b0 <prvInitialiseNewTask+0x4c>
 80046dc:	e000      	b.n	80046e0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80046de:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d901      	bls.n	80046f2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046ee:	2306      	movs	r3, #6
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	2200      	movs	r2, #0
 8004702:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff f8f7 	bl	80038fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	3318      	adds	r3, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff f8f2 	bl	80038fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	f1c3 0207 	rsb	r2, r3, #7
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	2200      	movs	r2, #0
 8004732:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	69b8      	ldr	r0, [r7, #24]
 8004742:	f000 feb3 	bl	80054ac <pxPortInitialiseStack>
 8004746:	4602      	mov	r2, r0
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004758:	bf00      	nop
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004768:	f000 ff8e 	bl	8005688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <prvAddNewTaskToReadyList+0xb8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a29      	ldr	r2, [pc, #164]	; (8004818 <prvAddNewTaskToReadyList+0xb8>)
 8004774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800477e:	4a27      	ldr	r2, [pc, #156]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <prvAddNewTaskToReadyList+0xb8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d110      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800478c:	f000 fbae 	bl	8004eec <prvInitialiseTaskLists>
 8004790:	e00d      	b.n	80047ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <prvAddNewTaskToReadyList+0xc0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d802      	bhi.n	80047ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 80047b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <prvAddNewTaskToReadyList+0xcc>)
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff f897 	bl	8003914 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047e6:	f000 ff7d 	bl	80056e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <prvAddNewTaskToReadyList+0xc0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d207      	bcs.n	8004810 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <prvAddNewTaskToReadyList+0xd0>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	200001ec 	.word	0x200001ec
 800481c:	200000ec 	.word	0x200000ec
 8004820:	200001f8 	.word	0x200001f8
 8004824:	20000208 	.word	0x20000208
 8004828:	200001f4 	.word	0x200001f4
 800482c:	200000f0 	.word	0x200000f0
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <vTaskDelay+0x60>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <vTaskDelay+0x2e>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	e7fe      	b.n	8004860 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004862:	f000 f861 	bl	8004928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004866:	2100      	movs	r1, #0
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fdb9 	bl	80053e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800486e:	f000 f869 	bl	8004944 <xTaskResumeAll>
 8004872:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <vTaskDelay+0x64>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000214 	.word	0x20000214
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <vTaskStartScheduler+0x74>)
 80048a4:	9301      	str	r3, [sp, #4]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	4919      	ldr	r1, [pc, #100]	; (8004914 <vTaskStartScheduler+0x78>)
 80048b0:	4819      	ldr	r0, [pc, #100]	; (8004918 <vTaskStartScheduler+0x7c>)
 80048b2:	f7ff fe96 	bl	80045e2 <xTaskCreate>
 80048b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d115      	bne.n	80048ea <vTaskStartScheduler+0x4e>
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <vTaskStartScheduler+0x80>)
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <vTaskStartScheduler+0x84>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <vTaskStartScheduler+0x88>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048e4:	f000 fe60 	bl	80055a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048e8:	e00d      	b.n	8004906 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d109      	bne.n	8004906 <vTaskStartScheduler+0x6a>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	e7fe      	b.n	8004904 <vTaskStartScheduler+0x68>
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000210 	.word	0x20000210
 8004914:	08007f20 	.word	0x08007f20
 8004918:	08004eb9 	.word	0x08004eb9
 800491c:	2000020c 	.word	0x2000020c
 8004920:	200001f8 	.word	0x200001f8
 8004924:	200001f0 	.word	0x200001f0

08004928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <vTaskSuspendAll+0x18>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	4a03      	ldr	r2, [pc, #12]	; (8004940 <vTaskSuspendAll+0x18>)
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000214 	.word	0x20000214

08004944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004952:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <xTaskResumeAll+0x114>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <xTaskResumeAll+0x2a>
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	e7fe      	b.n	800496c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800496e:	f000 fe8b 	bl	8005688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004972:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <xTaskResumeAll+0x114>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	4a37      	ldr	r2, [pc, #220]	; (8004a58 <xTaskResumeAll+0x114>)
 800497a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <xTaskResumeAll+0x114>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d161      	bne.n	8004a48 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <xTaskResumeAll+0x118>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05d      	beq.n	8004a48 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800498c:	e02e      	b.n	80049ec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <xTaskResumeAll+0x11c>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3318      	adds	r3, #24
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff f815 	bl	80039ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff f810 	bl	80039ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	2201      	movs	r2, #1
 80049b0:	409a      	lsls	r2, r3
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <xTaskResumeAll+0x120>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <xTaskResumeAll+0x120>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <xTaskResumeAll+0x124>)
 80049ca:	441a      	add	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fe ff9e 	bl	8003914 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <xTaskResumeAll+0x128>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80049e6:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <xTaskResumeAll+0x12c>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <xTaskResumeAll+0x11c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cc      	bne.n	800498e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049fa:	f000 faf3 	bl	8004fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <xTaskResumeAll+0x130>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a0a:	f000 f837 	bl	8004a7c <xTaskIncrementTick>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <xTaskResumeAll+0x12c>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f1      	bne.n	8004a0a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004a26:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <xTaskResumeAll+0x130>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <xTaskResumeAll+0x12c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <xTaskResumeAll+0x134>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a48:	f000 fe4c 	bl	80056e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000214 	.word	0x20000214
 8004a5c:	200001ec 	.word	0x200001ec
 8004a60:	200001ac 	.word	0x200001ac
 8004a64:	200001f4 	.word	0x200001f4
 8004a68:	200000f0 	.word	0x200000f0
 8004a6c:	200000ec 	.word	0x200000ec
 8004a70:	20000200 	.word	0x20000200
 8004a74:	200001fc 	.word	0x200001fc
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a86:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <xTaskIncrementTick+0x14c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 808c 	bne.w	8004ba8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a90:	4b4e      	ldr	r3, [pc, #312]	; (8004bcc <xTaskIncrementTick+0x150>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a98:	4a4c      	ldr	r2, [pc, #304]	; (8004bcc <xTaskIncrementTick+0x150>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11f      	bne.n	8004ae4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa4:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <xTaskIncrementTick+0x46>
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	e7fe      	b.n	8004ac0 <xTaskIncrementTick+0x44>
 8004ac2:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4a40      	ldr	r2, [pc, #256]	; (8004bd4 <xTaskIncrementTick+0x158>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <xTaskIncrementTick+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <xTaskIncrementTick+0x15c>)
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	f000 fa80 	bl	8004fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae4:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <xTaskIncrementTick+0x160>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d34d      	bcc.n	8004b8a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <xTaskIncrementTick+0x80>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <xTaskIncrementTick+0x82>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <xTaskIncrementTick+0x160>)
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	601a      	str	r2, [r3, #0]
					break;
 8004b0a:	e03e      	b.n	8004b8a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <xTaskIncrementTick+0x154>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d203      	bcs.n	8004b2c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b24:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <xTaskIncrementTick+0x160>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6013      	str	r3, [r2, #0]
						break;
 8004b2a:	e02e      	b.n	8004b8a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe ff4a 	bl	80039ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3318      	adds	r3, #24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe ff41 	bl	80039ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <xTaskIncrementTick+0x164>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <xTaskIncrementTick+0x164>)
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <xTaskIncrementTick+0x168>)
 8004b68:	441a      	add	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7fe fecf 	bl	8003914 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <xTaskIncrementTick+0x16c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d3b4      	bcc.n	8004aee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b88:	e7b1      	b.n	8004aee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <xTaskIncrementTick+0x16c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	4914      	ldr	r1, [pc, #80]	; (8004be4 <xTaskIncrementTick+0x168>)
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d907      	bls.n	8004bb2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e004      	b.n	8004bb2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ba8:	4b10      	ldr	r3, [pc, #64]	; (8004bec <xTaskIncrementTick+0x170>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	4a0f      	ldr	r2, [pc, #60]	; (8004bec <xTaskIncrementTick+0x170>)
 8004bb0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <xTaskIncrementTick+0x174>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000214 	.word	0x20000214
 8004bcc:	200001f0 	.word	0x200001f0
 8004bd0:	200001a4 	.word	0x200001a4
 8004bd4:	200001a8 	.word	0x200001a8
 8004bd8:	20000204 	.word	0x20000204
 8004bdc:	2000020c 	.word	0x2000020c
 8004be0:	200001f4 	.word	0x200001f4
 8004be4:	200000f0 	.word	0x200000f0
 8004be8:	200000ec 	.word	0x200000ec
 8004bec:	200001fc 	.word	0x200001fc
 8004bf0:	20000200 	.word	0x20000200

08004bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bfa:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <vTaskSwitchContext+0xa0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <vTaskSwitchContext+0xa4>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c08:	e03e      	b.n	8004c88 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <vTaskSwitchContext+0xa4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c10:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <vTaskSwitchContext+0xa8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c1e:	7afb      	ldrb	r3, [r7, #11]
 8004c20:	f1c3 031f 	rsb	r3, r3, #31
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	491e      	ldr	r1, [pc, #120]	; (8004ca0 <vTaskSwitchContext+0xac>)
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <vTaskSwitchContext+0x5a>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	e7fe      	b.n	8004c4c <vTaskSwitchContext+0x58>
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <vTaskSwitchContext+0xac>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d104      	bne.n	8004c7e <vTaskSwitchContext+0x8a>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <vTaskSwitchContext+0xb0>)
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000214 	.word	0x20000214
 8004c98:	20000200 	.word	0x20000200
 8004c9c:	200001f4 	.word	0x200001f4
 8004ca0:	200000f0 	.word	0x200000f0
 8004ca4:	200000ec 	.word	0x200000ec

08004ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <vTaskPlaceOnEventList+0x24>
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e7fe      	b.n	8004cca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <vTaskPlaceOnEventList+0x44>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fe fe40 	bl	800395a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cda:	2101      	movs	r1, #1
 8004cdc:	6838      	ldr	r0, [r7, #0]
 8004cde:	f000 fb7f 	bl	80053e0 <prvAddCurrentTaskToDelayedList>
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200000ec 	.word	0x200000ec

08004cf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <xTaskRemoveFromEventList+0x2a>
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e7fe      	b.n	8004d18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3318      	adds	r3, #24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fe53 	bl	80039ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <xTaskRemoveFromEventList+0xac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11c      	bne.n	8004d66 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fe4a 	bl	80039ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <xTaskRemoveFromEventList+0xb0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <xTaskRemoveFromEventList+0xb0>)
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <xTaskRemoveFromEventList+0xb4>)
 8004d56:	441a      	add	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f7fe fdd8 	bl	8003914 <vListInsertEnd>
 8004d64:	e005      	b.n	8004d72 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3318      	adds	r3, #24
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	480e      	ldr	r0, [pc, #56]	; (8004da8 <xTaskRemoveFromEventList+0xb8>)
 8004d6e:	f7fe fdd1 	bl	8003914 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <xTaskRemoveFromEventList+0xbc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d905      	bls.n	8004d8c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <xTaskRemoveFromEventList+0xc0>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e001      	b.n	8004d90 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d90:	697b      	ldr	r3, [r7, #20]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000214 	.word	0x20000214
 8004da0:	200001f4 	.word	0x200001f4
 8004da4:	200000f0 	.word	0x200000f0
 8004da8:	200001ac 	.word	0x200001ac
 8004dac:	200000ec 	.word	0x200000ec
 8004db0:	20000200 	.word	0x20000200

08004db4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <vTaskInternalSetTimeOutState+0x24>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <vTaskInternalSetTimeOutState+0x28>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	605a      	str	r2, [r3, #4]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000204 	.word	0x20000204
 8004ddc:	200001f0 	.word	0x200001f0

08004de0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <xTaskCheckForTimeOut+0x24>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	e7fe      	b.n	8004e02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <xTaskCheckForTimeOut+0x3e>
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e7fe      	b.n	8004e1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004e1e:	f000 fc33 	bl	8005688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <xTaskCheckForTimeOut+0xb8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d102      	bne.n	8004e42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e023      	b.n	8004e8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <xTaskCheckForTimeOut+0xbc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d007      	beq.n	8004e5e <xTaskCheckForTimeOut+0x7e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d302      	bcc.n	8004e5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e015      	b.n	8004e8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d20b      	bcs.n	8004e80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff9d 	bl	8004db4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e004      	b.n	8004e8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e8a:	f000 fc2b 	bl	80056e4 <vPortExitCritical>

	return xReturn;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200001f0 	.word	0x200001f0
 8004e9c:	20000204 	.word	0x20000204

08004ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <vTaskMissedYield+0x14>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000200 	.word	0x20000200

08004eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ec0:	f000 f854 	bl	8004f6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvIdleTask+0x2c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d907      	bls.n	8004edc <prvIdleTask+0x24>
			{
				taskYIELD();
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <prvIdleTask+0x30>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004edc:	f000 fe9e 	bl	8005c1c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004ee0:	e7ee      	b.n	8004ec0 <prvIdleTask+0x8>
 8004ee2:	bf00      	nop
 8004ee4:	200000f0 	.word	0x200000f0
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	e00c      	b.n	8004f12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <prvInitialiseTaskLists+0x60>)
 8004f04:	4413      	add	r3, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fcd9 	bl	80038be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b06      	cmp	r3, #6
 8004f16:	d9ef      	bls.n	8004ef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f18:	480d      	ldr	r0, [pc, #52]	; (8004f50 <prvInitialiseTaskLists+0x64>)
 8004f1a:	f7fe fcd0 	bl	80038be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f1e:	480d      	ldr	r0, [pc, #52]	; (8004f54 <prvInitialiseTaskLists+0x68>)
 8004f20:	f7fe fccd 	bl	80038be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f24:	480c      	ldr	r0, [pc, #48]	; (8004f58 <prvInitialiseTaskLists+0x6c>)
 8004f26:	f7fe fcca 	bl	80038be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f2a:	480c      	ldr	r0, [pc, #48]	; (8004f5c <prvInitialiseTaskLists+0x70>)
 8004f2c:	f7fe fcc7 	bl	80038be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f30:	480b      	ldr	r0, [pc, #44]	; (8004f60 <prvInitialiseTaskLists+0x74>)
 8004f32:	f7fe fcc4 	bl	80038be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <prvInitialiseTaskLists+0x78>)
 8004f38:	4a05      	ldr	r2, [pc, #20]	; (8004f50 <prvInitialiseTaskLists+0x64>)
 8004f3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <prvInitialiseTaskLists+0x7c>)
 8004f3e:	4a05      	ldr	r2, [pc, #20]	; (8004f54 <prvInitialiseTaskLists+0x68>)
 8004f40:	601a      	str	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200000f0 	.word	0x200000f0
 8004f50:	2000017c 	.word	0x2000017c
 8004f54:	20000190 	.word	0x20000190
 8004f58:	200001ac 	.word	0x200001ac
 8004f5c:	200001c0 	.word	0x200001c0
 8004f60:	200001d8 	.word	0x200001d8
 8004f64:	200001a4 	.word	0x200001a4
 8004f68:	200001a8 	.word	0x200001a8

08004f6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f72:	e019      	b.n	8004fa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f74:	f000 fb88 	bl	8005688 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <prvCheckTasksWaitingTermination+0x4c>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fd20 	bl	80039ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <prvCheckTasksWaitingTermination+0x50>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <prvCheckTasksWaitingTermination+0x50>)
 8004f92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <prvCheckTasksWaitingTermination+0x54>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <prvCheckTasksWaitingTermination+0x54>)
 8004f9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f9e:	f000 fba1 	bl	80056e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f80e 	bl	8004fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <prvCheckTasksWaitingTermination+0x54>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e1      	bne.n	8004f74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	200001c0 	.word	0x200001c0
 8004fbc:	200001ec 	.word	0x200001ec
 8004fc0:	200001d4 	.word	0x200001d4

08004fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd11 	bl	80059f8 <vPortFree>
			vPortFree( pxTCB );
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fd0e 	bl	80059f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <prvResetNextTaskUnblockTime+0x40>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <prvResetNextTaskUnblockTime+0x14>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <prvResetNextTaskUnblockTime+0x16>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <prvResetNextTaskUnblockTime+0x44>)
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005006:	e008      	b.n	800501a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <prvResetNextTaskUnblockTime+0x40>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <prvResetNextTaskUnblockTime+0x44>)
 8005018:	6013      	str	r3, [r2, #0]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	200001a4 	.word	0x200001a4
 8005028:	2000020c 	.word	0x2000020c

0800502c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <xTaskGetSchedulerState+0x34>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d102      	bne.n	8005040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800503a:	2301      	movs	r3, #1
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	e008      	b.n	8005052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <xTaskGetSchedulerState+0x38>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005048:	2302      	movs	r3, #2
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	e001      	b.n	8005052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005052:	687b      	ldr	r3, [r7, #4]
	}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200001f8 	.word	0x200001f8
 8005064:	20000214 	.word	0x20000214

08005068 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d06e      	beq.n	800515c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	4b39      	ldr	r3, [pc, #228]	; (8005168 <xTaskPriorityInherit+0x100>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	429a      	cmp	r2, r3
 800508a:	d25e      	bcs.n	800514a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db06      	blt.n	80050a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005094:	4b34      	ldr	r3, [pc, #208]	; (8005168 <xTaskPriorityInherit+0x100>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f1c3 0207 	rsb	r2, r3, #7
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4a2e      	ldr	r2, [pc, #184]	; (800516c <xTaskPriorityInherit+0x104>)
 80050b4:	4413      	add	r3, r2
 80050b6:	4299      	cmp	r1, r3
 80050b8:	d101      	bne.n	80050be <xTaskPriorityInherit+0x56>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <xTaskPriorityInherit+0x58>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03a      	beq.n	800513a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fc7e 	bl	80039ca <uxListRemove>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d115      	bne.n	8005100 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4924      	ldr	r1, [pc, #144]	; (800516c <xTaskPriorityInherit+0x104>)
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <xTaskPriorityInherit+0x98>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	2201      	movs	r2, #1
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	43da      	mvns	r2, r3
 80050f6:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <xTaskPriorityInherit+0x108>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4013      	ands	r3, r2
 80050fc:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <xTaskPriorityInherit+0x108>)
 80050fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <xTaskPriorityInherit+0x100>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	2201      	movs	r2, #1
 8005110:	409a      	lsls	r2, r3
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <xTaskPriorityInherit+0x108>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4313      	orrs	r3, r2
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <xTaskPriorityInherit+0x108>)
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a10      	ldr	r2, [pc, #64]	; (800516c <xTaskPriorityInherit+0x104>)
 800512a:	441a      	add	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7fe fbee 	bl	8003914 <vListInsertEnd>
 8005138:	e004      	b.n	8005144 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <xTaskPriorityInherit+0x100>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e008      	b.n	800515c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <xTaskPriorityInherit+0x100>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d201      	bcs.n	800515c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800515c:	68fb      	ldr	r3, [r7, #12]
	}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200000ec 	.word	0x200000ec
 800516c:	200000f0 	.word	0x200000f0
 8005170:	200001f4 	.word	0x200001f4

08005174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06c      	beq.n	8005264 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <xTaskPriorityDisinherit+0xfc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	429a      	cmp	r2, r3
 8005192:	d009      	beq.n	80051a8 <xTaskPriorityDisinherit+0x34>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e7fe      	b.n	80051a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <xTaskPriorityDisinherit+0x50>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	e7fe      	b.n	80051c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c8:	1e5a      	subs	r2, r3, #1
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d044      	beq.n	8005264 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d140      	bne.n	8005264 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3304      	adds	r3, #4
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe fbef 	bl	80039ca <uxListRemove>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d115      	bne.n	800521e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	491f      	ldr	r1, [pc, #124]	; (8005274 <xTaskPriorityDisinherit+0x100>)
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <xTaskPriorityDisinherit+0xaa>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	2201      	movs	r2, #1
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	43da      	mvns	r2, r3
 8005214:	4b18      	ldr	r3, [pc, #96]	; (8005278 <xTaskPriorityDisinherit+0x104>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4013      	ands	r3, r2
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <xTaskPriorityDisinherit+0x104>)
 800521c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	f1c3 0207 	rsb	r2, r3, #7
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	2201      	movs	r2, #1
 8005238:	409a      	lsls	r2, r3
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <xTaskPriorityDisinherit+0x104>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4313      	orrs	r3, r2
 8005240:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <xTaskPriorityDisinherit+0x104>)
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4a08      	ldr	r2, [pc, #32]	; (8005274 <xTaskPriorityDisinherit+0x100>)
 8005252:	441a      	add	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f7fe fb5a 	bl	8003914 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005264:	697b      	ldr	r3, [r7, #20]
	}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200000ec 	.word	0x200000ec
 8005274:	200000f0 	.word	0x200000f0
 8005278:	200001f4 	.word	0x200001f4

0800527c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800528a:	2301      	movs	r3, #1
 800528c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8086 	beq.w	80053a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e7fe      	b.n	80052b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	e002      	b.n	80052c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d067      	beq.n	80053a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d162      	bne.n	80053a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80052dc:	4b33      	ldr	r3, [pc, #204]	; (80053ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d109      	bne.n	80052fa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	e7fe      	b.n	80052f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	db04      	blt.n	8005318 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f1c3 0207 	rsb	r2, r3, #7
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	6959      	ldr	r1, [r3, #20]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005328:	4413      	add	r3, r2
 800532a:	4299      	cmp	r1, r3
 800532c:	d101      	bne.n	8005332 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d034      	beq.n	80053a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	3304      	adds	r3, #4
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fb44 	bl	80039ca <uxListRemove>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4918      	ldr	r1, [pc, #96]	; (80053b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43da      	mvns	r2, r3
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4013      	ands	r3, r2
 8005370:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005372:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005394:	441a      	add	r2, r3
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe fab9 	bl	8003914 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053a2:	bf00      	nop
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	200000ec 	.word	0x200000ec
 80053b0:	200000f0 	.word	0x200000f0
 80053b4:	200001f4 	.word	0x200001f4

080053b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053bc:	4b07      	ldr	r3, [pc, #28]	; (80053dc <pvTaskIncrementMutexHeldCount+0x24>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <pvTaskIncrementMutexHeldCount+0x24>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ca:	3201      	adds	r2, #1
 80053cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80053ce:	4b03      	ldr	r3, [pc, #12]	; (80053dc <pvTaskIncrementMutexHeldCount+0x24>)
 80053d0:	681b      	ldr	r3, [r3, #0]
	}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	200000ec 	.word	0x200000ec

080053e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053ea:	4b29      	ldr	r3, [pc, #164]	; (8005490 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3304      	adds	r3, #4
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fae7 	bl	80039ca <uxListRemove>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005402:	4b24      	ldr	r3, [pc, #144]	; (8005494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	2201      	movs	r2, #1
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43da      	mvns	r2, r3
 8005410:	4b21      	ldr	r3, [pc, #132]	; (8005498 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4013      	ands	r3, r2
 8005416:	4a20      	ldr	r2, [pc, #128]	; (8005498 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005418:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d10a      	bne.n	8005438 <prvAddCurrentTaskToDelayedList+0x58>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005428:	4b1a      	ldr	r3, [pc, #104]	; (8005494 <prvAddCurrentTaskToDelayedList+0xb4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3304      	adds	r3, #4
 800542e:	4619      	mov	r1, r3
 8005430:	481a      	ldr	r0, [pc, #104]	; (800549c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005432:	f7fe fa6f 	bl	8003914 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005436:	e026      	b.n	8005486 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	429a      	cmp	r2, r3
 800544e:	d209      	bcs.n	8005464 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f7fe fa7c 	bl	800395a <vListInsert>
}
 8005462:	e010      	b.n	8005486 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvAddCurrentTaskToDelayedList+0xb4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fe fa72 	bl	800395a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d202      	bcs.n	8005486 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005480:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6013      	str	r3, [r2, #0]
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200001f0 	.word	0x200001f0
 8005494:	200000ec 	.word	0x200000ec
 8005498:	200001f4 	.word	0x200001f4
 800549c:	200001d8 	.word	0x200001d8
 80054a0:	200001a8 	.word	0x200001a8
 80054a4:	200001a4 	.word	0x200001a4
 80054a8:	2000020c 	.word	0x2000020c

080054ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3b04      	subs	r3, #4
 80054bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3b04      	subs	r3, #4
 80054ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b04      	subs	r3, #4
 80054da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054dc:	4a08      	ldr	r2, [pc, #32]	; (8005500 <pxPortInitialiseStack+0x54>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b14      	subs	r3, #20
 80054e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b20      	subs	r3, #32
 80054f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054f4:	68fb      	ldr	r3, [r7, #12]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	08005505 	.word	0x08005505

08005504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <prvTaskExitError+0x4c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d009      	beq.n	800552c <prvTaskExitError+0x28>
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e7fe      	b.n	800552a <prvTaskExitError+0x26>
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800553e:	bf00      	nop
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0fc      	beq.n	8005540 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	20000008 	.word	0x20000008
	...

08005560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <pxCurrentTCBConst2>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800556a:	f380 8809 	msr	PSP, r0
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f380 8811 	msr	BASEPRI, r0
 800557a:	f04e 0e0d 	orr.w	lr, lr, #13
 800557e:	4770      	bx	lr

08005580 <pxCurrentTCBConst2>:
 8005580:	200000ec 	.word	0x200000ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005588:	4806      	ldr	r0, [pc, #24]	; (80055a4 <prvPortStartFirstTask+0x1c>)
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f380 8808 	msr	MSP, r0
 8005592:	b662      	cpsie	i
 8005594:	b661      	cpsie	f
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	df00      	svc	0
 80055a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055a2:	bf00      	nop
 80055a4:	e000ed08 	.word	0xe000ed08

080055a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055ae:	4b31      	ldr	r3, [pc, #196]	; (8005674 <xPortStartScheduler+0xcc>)
 80055b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4b29      	ldr	r3, [pc, #164]	; (8005678 <xPortStartScheduler+0xd0>)
 80055d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <xPortStartScheduler+0xd4>)
 80055d8:	2207      	movs	r2, #7
 80055da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055dc:	e009      	b.n	80055f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80055de:	4b27      	ldr	r3, [pc, #156]	; (800567c <xPortStartScheduler+0xd4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4a25      	ldr	r2, [pc, #148]	; (800567c <xPortStartScheduler+0xd4>)
 80055e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d0ef      	beq.n	80055de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055fe:	4b1f      	ldr	r3, [pc, #124]	; (800567c <xPortStartScheduler+0xd4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1c3 0307 	rsb	r3, r3, #7
 8005606:	2b04      	cmp	r3, #4
 8005608:	d009      	beq.n	800561e <xPortStartScheduler+0x76>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	e7fe      	b.n	800561c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800561e:	4b17      	ldr	r3, [pc, #92]	; (800567c <xPortStartScheduler+0xd4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	4a15      	ldr	r2, [pc, #84]	; (800567c <xPortStartScheduler+0xd4>)
 8005626:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005628:	4b14      	ldr	r3, [pc, #80]	; (800567c <xPortStartScheduler+0xd4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005630:	4a12      	ldr	r2, [pc, #72]	; (800567c <xPortStartScheduler+0xd4>)
 8005632:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <xPortStartScheduler+0xd8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <xPortStartScheduler+0xd8>)
 8005642:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005646:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <xPortStartScheduler+0xd8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <xPortStartScheduler+0xd8>)
 800564e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005652:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005654:	f000 f8b0 	bl	80057b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <xPortStartScheduler+0xdc>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800565e:	f7ff ff93 	bl	8005588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005662:	f7ff fac7 	bl	8004bf4 <vTaskSwitchContext>
	prvTaskExitError();
 8005666:	f7ff ff4d 	bl	8005504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	e000e400 	.word	0xe000e400
 8005678:	20000218 	.word	0x20000218
 800567c:	2000021c 	.word	0x2000021c
 8005680:	e000ed20 	.word	0xe000ed20
 8005684:	20000008 	.word	0x20000008

08005688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <vPortEnterCritical+0x54>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <vPortEnterCritical+0x54>)
 80056a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <vPortEnterCritical+0x54>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10e      	bne.n	80056d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <vPortEnterCritical+0x58>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d009      	beq.n	80056d0 <vPortEnterCritical+0x48>
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	e7fe      	b.n	80056ce <vPortEnterCritical+0x46>
	}
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000008 	.word	0x20000008
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <vPortExitCritical+0x48>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <vPortExitCritical+0x22>
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	e7fe      	b.n	8005704 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <vPortExitCritical+0x48>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3b01      	subs	r3, #1
 800570c:	4a07      	ldr	r2, [pc, #28]	; (800572c <vPortExitCritical+0x48>)
 800570e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <vPortExitCritical+0x48>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <vPortExitCritical+0x3e>
 8005718:	2300      	movs	r3, #0
 800571a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	20000008 	.word	0x20000008

08005730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005730:	f3ef 8009 	mrs	r0, PSP
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <pxCurrentTCBConst>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005740:	6010      	str	r0, [r2, #0]
 8005742:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005746:	f04f 0050 	mov.w	r0, #80	; 0x50
 800574a:	f380 8811 	msr	BASEPRI, r0
 800574e:	f7ff fa51 	bl	8004bf4 <vTaskSwitchContext>
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8811 	msr	BASEPRI, r0
 800575a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	6808      	ldr	r0, [r1, #0]
 8005762:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005766:	f380 8809 	msr	PSP, r0
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	4770      	bx	lr

08005770 <pxCurrentTCBConst>:
 8005770:	200000ec 	.word	0x200000ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005790:	f7ff f974 	bl	8004a7c <xTaskIncrementTick>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <SysTick_Handler+0x3c>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <vPortSetupTimerInterrupt+0x30>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <vPortSetupTimerInterrupt+0x34>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057c8:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <vPortSetupTimerInterrupt+0x38>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <vPortSetupTimerInterrupt+0x3c>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	099b      	lsrs	r3, r3, #6
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <vPortSetupTimerInterrupt+0x40>)
 80057d6:	3b01      	subs	r3, #1
 80057d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057da:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <vPortSetupTimerInterrupt+0x30>)
 80057dc:	2207      	movs	r2, #7
 80057de:	601a      	str	r2, [r3, #0]
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	e000e010 	.word	0xe000e010
 80057ec:	e000e018 	.word	0xe000e018
 80057f0:	20000014 	.word	0x20000014
 80057f4:	10624dd3 	.word	0x10624dd3
 80057f8:	e000e014 	.word	0xe000e014

080057fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005802:	f3ef 8305 	mrs	r3, IPSR
 8005806:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d913      	bls.n	8005836 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <vPortValidateInterruptPriority+0x68>)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <vPortValidateInterruptPriority+0x6c>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	7afa      	ldrb	r2, [r7, #11]
 800581e:	429a      	cmp	r2, r3
 8005820:	d209      	bcs.n	8005836 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
 8005834:	e7fe      	b.n	8005834 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <vPortValidateInterruptPriority+0x70>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <vPortValidateInterruptPriority+0x74>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d909      	bls.n	800585a <vPortValidateInterruptPriority+0x5e>
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	e7fe      	b.n	8005858 <vPortValidateInterruptPriority+0x5c>
	}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	e000e3f0 	.word	0xe000e3f0
 8005868:	20000218 	.word	0x20000218
 800586c:	e000ed0c 	.word	0xe000ed0c
 8005870:	2000021c 	.word	0x2000021c

08005874 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005880:	f7ff f852 	bl	8004928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005884:	4b57      	ldr	r3, [pc, #348]	; (80059e4 <pvPortMalloc+0x170>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800588c:	f000 f90c 	bl	8005aa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005890:	4b55      	ldr	r3, [pc, #340]	; (80059e8 <pvPortMalloc+0x174>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	f040 808c 	bne.w	80059b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01c      	beq.n	80058de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80058a4:	2208      	movs	r2, #8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d013      	beq.n	80058de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	3308      	adds	r3, #8
 80058be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <pvPortMalloc+0x6a>
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e7fe      	b.n	80058dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d068      	beq.n	80059b6 <pvPortMalloc+0x142>
 80058e4:	4b41      	ldr	r3, [pc, #260]	; (80059ec <pvPortMalloc+0x178>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d863      	bhi.n	80059b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058ee:	4b40      	ldr	r3, [pc, #256]	; (80059f0 <pvPortMalloc+0x17c>)
 80058f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <pvPortMalloc+0x17c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058f8:	e004      	b.n	8005904 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	d903      	bls.n	8005916 <pvPortMalloc+0xa2>
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f1      	bne.n	80058fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005916:	4b33      	ldr	r3, [pc, #204]	; (80059e4 <pvPortMalloc+0x170>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	429a      	cmp	r2, r3
 800591e:	d04a      	beq.n	80059b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2208      	movs	r2, #8
 8005926:	4413      	add	r3, r2
 8005928:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	1ad2      	subs	r2, r2, r3
 800593a:	2308      	movs	r3, #8
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	429a      	cmp	r2, r3
 8005940:	d91e      	bls.n	8005980 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4413      	add	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <pvPortMalloc+0xf4>
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	e7fe      	b.n	8005966 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800597a:	69b8      	ldr	r0, [r7, #24]
 800597c:	f000 f8f6 	bl	8005b6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <pvPortMalloc+0x178>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <pvPortMalloc+0x178>)
 800598c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800598e:	4b17      	ldr	r3, [pc, #92]	; (80059ec <pvPortMalloc+0x178>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <pvPortMalloc+0x180>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d203      	bcs.n	80059a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800599a:	4b14      	ldr	r3, [pc, #80]	; (80059ec <pvPortMalloc+0x178>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <pvPortMalloc+0x180>)
 80059a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <pvPortMalloc+0x174>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059b6:	f7fe ffc5 	bl	8004944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <pvPortMalloc+0x164>
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e7fe      	b.n	80059d6 <pvPortMalloc+0x162>
	return pvReturn;
 80059d8:	69fb      	ldr	r3, [r7, #28]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3728      	adds	r7, #40	; 0x28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20003108 	.word	0x20003108
 80059e8:	20003114 	.word	0x20003114
 80059ec:	2000310c 	.word	0x2000310c
 80059f0:	20003100 	.word	0x20003100
 80059f4:	20003110 	.word	0x20003110

080059f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d046      	beq.n	8005a98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	425b      	negs	r3, r3
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	4b20      	ldr	r3, [pc, #128]	; (8005aa0 <vPortFree+0xa8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <vPortFree+0x42>
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e7fe      	b.n	8005a38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <vPortFree+0x5e>
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	e7fe      	b.n	8005a54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <vPortFree+0xa8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d019      	beq.n	8005a98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d115      	bne.n	8005a98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <vPortFree+0xa8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a7c:	f7fe ff54 	bl	8004928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <vPortFree+0xac>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4413      	add	r3, r2
 8005a8a:	4a06      	ldr	r2, [pc, #24]	; (8005aa4 <vPortFree+0xac>)
 8005a8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a8e:	6938      	ldr	r0, [r7, #16]
 8005a90:	f000 f86c 	bl	8005b6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a94:	f7fe ff56 	bl	8004944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20003114 	.word	0x20003114
 8005aa4:	2000310c 	.word	0x2000310c

08005aa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aae:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005ab2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ab4:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <prvHeapInit+0xac>)
 8005ab6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00c      	beq.n	8005adc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3307      	adds	r3, #7
 8005ac6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <prvHeapInit+0xac>)
 8005ad8:	4413      	add	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ae0:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <prvHeapInit+0xb0>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <prvHeapInit+0xb0>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	4413      	add	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005af4:	2208      	movs	r2, #8
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <prvHeapInit+0xb4>)
 8005b08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <prvHeapInit+0xb4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <prvHeapInit+0xb4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	1ad2      	subs	r2, r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <prvHeapInit+0xb4>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <prvHeapInit+0xb8>)
 8005b36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <prvHeapInit+0xbc>)
 8005b3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <prvHeapInit+0xc0>)
 8005b42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b46:	601a      	str	r2, [r3, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000220 	.word	0x20000220
 8005b58:	20003100 	.word	0x20003100
 8005b5c:	20003108 	.word	0x20003108
 8005b60:	20003110 	.word	0x20003110
 8005b64:	2000310c 	.word	0x2000310c
 8005b68:	20003114 	.word	0x20003114

08005b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b74:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <prvInsertBlockIntoFreeList+0xa8>)
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e002      	b.n	8005b80 <prvInsertBlockIntoFreeList+0x14>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d8f7      	bhi.n	8005b7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d108      	bne.n	8005bae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d118      	bne.n	8005bf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <prvInsertBlockIntoFreeList+0xac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d00d      	beq.n	8005bea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	441a      	add	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e008      	b.n	8005bfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <prvInsertBlockIntoFreeList+0xac>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e003      	b.n	8005bfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d002      	beq.n	8005c0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	20003100 	.word	0x20003100
 8005c18:	20003108 	.word	0x20003108

08005c1c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b098      	sub	sp, #96	; 0x60
 8005c2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c2e:	f7fa fa8f 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c32:	f000 f899 	bl	8005d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c36:	f000 f9e1 	bl	8005ffc <MX_GPIO_Init>
  MX_I2C1_Init();
 8005c3a:	f000 f8db 	bl	8005df4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8005c3e:	f000 f907 	bl	8005e50 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005c42:	f000 f987 	bl	8005f54 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8005c46:	f000 f9af 	bl	8005fa8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8005c4a:	f000 f937 	bl	8005ebc <MX_TIM3_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8005c4e:	2300      	movs	r3, #0
 8005c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8005c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c56:	2101      	movs	r1, #1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fd fe00 	bl	800385e <osSemaphoreCreate>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <main+0x104>)
 8005c62:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Register */
  osMessageQDef(Register, 1, uint8_t);
 8005c64:	4a32      	ldr	r2, [pc, #200]	; (8005d30 <main+0x108>)
 8005c66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c6e:	e883 0003 	stmia.w	r3, {r0, r1}
  RegisterHandle = osMessageCreate(osMessageQ(Register), NULL);
 8005c72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fd fe0e 	bl	800389a <osMessageCreate>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	4b2c      	ldr	r3, [pc, #176]	; (8005d34 <main+0x10c>)
 8005c82:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of KeyPad */
  osThreadDef(KeyPad, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8005c84:	4b2c      	ldr	r3, [pc, #176]	; (8005d38 <main+0x110>)
 8005c86:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	6023      	str	r3, [r4, #0]
  KeyPadHandle = osThreadCreate(osThread(KeyPad), NULL);
 8005c94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fda4 	bl	80037e8 <osThreadCreate>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b26      	ldr	r3, [pc, #152]	; (8005d3c <main+0x114>)
 8005ca4:	601a      	str	r2, [r3, #0]

  /* definition and creation of RFID */
  osThreadDef(RFID, StartTask02, osPriorityNormal, 0, 128);
 8005ca6:	4b26      	ldr	r3, [pc, #152]	; (8005d40 <main+0x118>)
 8005ca8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005cac:	461d      	mov	r5, r3
 8005cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cb2:	682b      	ldr	r3, [r5, #0]
 8005cb4:	6023      	str	r3, [r4, #0]
  RFIDHandle = osThreadCreate(osThread(RFID), NULL);
 8005cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fd fd93 	bl	80037e8 <osThreadCreate>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <main+0x11c>)
 8005cc6:	601a      	str	r2, [r3, #0]

  /* definition and creation of FingerPrinf */
  osThreadDef(FingerPrinf, StartTask03, osPriorityNormal, 0, 128);
 8005cc8:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <main+0x120>)
 8005cca:	f107 0418 	add.w	r4, r7, #24
 8005cce:	461d      	mov	r5, r3
 8005cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	6023      	str	r3, [r4, #0]
  FingerPrinfHandle = osThreadCreate(osThread(FingerPrinf), NULL);
 8005cd8:	f107 0318 	add.w	r3, r7, #24
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd fd82 	bl	80037e8 <osThreadCreate>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <main+0x124>)
 8005ce8:	601a      	str	r2, [r3, #0]

  /* definition and creation of INTERRUPT */
  osThreadDef(INTERRUPT, StartTask04, osPriorityAboveNormal, 0, 256);
 8005cea:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <main+0x128>)
 8005cec:	1d3c      	adds	r4, r7, #4
 8005cee:	461d      	mov	r5, r3
 8005cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	6023      	str	r3, [r4, #0]
  INTERRUPTHandle = osThreadCreate(osThread(INTERRUPT), NULL);
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fd fd73 	bl	80037e8 <osThreadCreate>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <main+0x12c>)
 8005d06:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  keypad_init();
 8005d08:	f000 fefe 	bl	8006b08 <keypad_init>
  MFRC522_Init();
 8005d0c:	f001 f97a 	bl	8007004 <MFRC522_Init>
  I2C_LCD_init(&LCD, &hi2c1, LCD_ADDR);
 8005d10:	2227      	movs	r2, #39	; 0x27
 8005d12:	4911      	ldr	r1, [pc, #68]	; (8005d58 <main+0x130>)
 8005d14:	4811      	ldr	r0, [pc, #68]	; (8005d5c <main+0x134>)
 8005d16:	f000 ffec 	bl	8006cf2 <I2C_LCD_init>
  HAL_UART_Receive_IT(&huart3, &data_winform, 1);
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4910      	ldr	r1, [pc, #64]	; (8005d60 <main+0x138>)
 8005d1e:	4811      	ldr	r0, [pc, #68]	; (8005d64 <main+0x13c>)
 8005d20:	f7fd f8e9 	bl	8002ef6 <HAL_UART_Receive_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005d24:	f7fd fd59 	bl	80037da <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d28:	e7fe      	b.n	8005d28 <main+0x100>
 8005d2a:	bf00      	nop
 8005d2c:	200032f0 	.word	0x200032f0
 8005d30:	08007f28 	.word	0x08007f28
 8005d34:	20003320 	.word	0x20003320
 8005d38:	08007f38 	.word	0x08007f38
 8005d3c:	200032f8 	.word	0x200032f8
 8005d40:	08007f54 	.word	0x08007f54
 8005d44:	2000328c 	.word	0x2000328c
 8005d48:	08007f74 	.word	0x08007f74
 8005d4c:	200032d4 	.word	0x200032d4
 8005d50:	08007f94 	.word	0x08007f94
 8005d54:	20003238 	.word	0x20003238
 8005d58:	200031e4 	.word	0x200031e4
 8005d5c:	20003314 	.word	0x20003314
 8005d60:	20003118 	.word	0x20003118
 8005d64:	200031a0 	.word	0x200031a0

08005d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b090      	sub	sp, #64	; 0x40
 8005d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d6e:	f107 0318 	add.w	r3, r7, #24
 8005d72:	2228      	movs	r2, #40	; 0x28
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fcab 	bl	80076d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	609a      	str	r2, [r3, #8]
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005d94:	2300      	movs	r3, #0
 8005d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005da6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dac:	f107 0318 	add.w	r3, r7, #24
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fb f979 	bl	80010a8 <HAL_RCC_OscConfig>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005dbc:	f000 fc51 	bl	8006662 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dc0:	230f      	movs	r3, #15
 8005dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	2102      	movs	r1, #2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fb fbe4 	bl	80015a8 <HAL_RCC_ClockConfig>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005de6:	f000 fc3c 	bl	8006662 <Error_Handler>
  }
}
 8005dea:	bf00      	nop
 8005dec:	3740      	adds	r7, #64	; 0x40
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005df8:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005dfa:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <MX_I2C1_Init+0x54>)
 8005dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e00:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <MX_I2C1_Init+0x58>)
 8005e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005e04:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e30:	4804      	ldr	r0, [pc, #16]	; (8005e44 <MX_I2C1_Init+0x50>)
 8005e32:	f7fa fcfb 	bl	800082c <HAL_I2C_Init>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005e3c:	f000 fc11 	bl	8006662 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200031e4 	.word	0x200031e4
 8005e48:	40005400 	.word	0x40005400
 8005e4c:	000186a0 	.word	0x000186a0

08005e50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005e54:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <MX_SPI2_Init+0x68>)
 8005e58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e84:	2208      	movs	r2, #8
 8005e86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e8e:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ea0:	4804      	ldr	r0, [pc, #16]	; (8005eb4 <MX_SPI2_Init+0x64>)
 8005ea2:	f7fb fd4d 	bl	8001940 <HAL_SPI_Init>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005eac:	f000 fbd9 	bl	8006662 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20003148 	.word	0x20003148
 8005eb8:	40003800 	.word	0x40003800

08005ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <MX_TIM3_Init+0x94>)
 8005edc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ef0:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005efc:	4813      	ldr	r0, [pc, #76]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005efe:	f7fc fa8b 	bl	8002418 <HAL_TIM_Base_Init>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8005f08:	f000 fbab 	bl	8006662 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005f12:	f107 0308 	add.w	r3, r7, #8
 8005f16:	4619      	mov	r1, r3
 8005f18:	480c      	ldr	r0, [pc, #48]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005f1a:	f7fc fc27 	bl	800276c <HAL_TIM_ConfigClockSource>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8005f24:	f000 fb9d 	bl	8006662 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f30:	463b      	mov	r3, r7
 8005f32:	4619      	mov	r1, r3
 8005f34:	4805      	ldr	r0, [pc, #20]	; (8005f4c <MX_TIM3_Init+0x90>)
 8005f36:	f7fc fded 	bl	8002b14 <HAL_TIMEx_MasterConfigSynchronization>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8005f40:	f000 fb8f 	bl	8006662 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005f44:	bf00      	nop
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20003244 	.word	0x20003244
 8005f50:	40000400 	.word	0x40000400

08005f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f5a:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <MX_USART1_UART_Init+0x50>)
 8005f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f66:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f7a:	220c      	movs	r2, #12
 8005f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f7e:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <MX_USART1_UART_Init+0x4c>)
 8005f8c:	f7fc fe32 	bl	8002bf4 <HAL_UART_Init>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f96:	f000 fb64 	bl	8006662 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f9a:	bf00      	nop
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20003290 	.word	0x20003290
 8005fa4:	40013800 	.word	0x40013800

08005fa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005fac:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <MX_USART3_UART_Init+0x50>)
 8005fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fce:	220c      	movs	r2, #12
 8005fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fde:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <MX_USART3_UART_Init+0x4c>)
 8005fe0:	f7fc fe08 	bl	8002bf4 <HAL_UART_Init>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005fea:	f000 fb3a 	bl	8006662 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005fee:	bf00      	nop
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200031a0 	.word	0x200031a0
 8005ff8:	40004800 	.word	0x40004800

08005ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006002:	f107 0310 	add.w	r3, r7, #16
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	609a      	str	r2, [r3, #8]
 800600e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006010:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <MX_GPIO_Init+0xec>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	4a34      	ldr	r2, [pc, #208]	; (80060e8 <MX_GPIO_Init+0xec>)
 8006016:	f043 0320 	orr.w	r3, r3, #32
 800601a:	6193      	str	r3, [r2, #24]
 800601c:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <MX_GPIO_Init+0xec>)
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006028:	4b2f      	ldr	r3, [pc, #188]	; (80060e8 <MX_GPIO_Init+0xec>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <MX_GPIO_Init+0xec>)
 800602e:	f043 0304 	orr.w	r3, r3, #4
 8006032:	6193      	str	r3, [r2, #24]
 8006034:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <MX_GPIO_Init+0xec>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006040:	4b29      	ldr	r3, [pc, #164]	; (80060e8 <MX_GPIO_Init+0xec>)
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <MX_GPIO_Init+0xec>)
 8006046:	f043 0308 	orr.w	r3, r3, #8
 800604a:	6193      	str	r3, [r2, #24]
 800604c:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <MX_GPIO_Init+0xec>)
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006058:	2200      	movs	r2, #0
 800605a:	f240 110f 	movw	r1, #271	; 0x10f
 800605e:	4823      	ldr	r0, [pc, #140]	; (80060ec <MX_GPIO_Init+0xf0>)
 8006060:	f7fa fbcb 	bl	80007fa <HAL_GPIO_WritePin>
                          |MFRC522_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, GPIO_PIN_RESET);
 8006064:	2200      	movs	r2, #0
 8006066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800606a:	4821      	ldr	r0, [pc, #132]	; (80060f0 <MX_GPIO_Init+0xf4>)
 800606c:	f7fa fbc5 	bl	80007fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           MFRC522_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006070:	f240 130f 	movw	r3, #271	; 0x10f
 8006074:	613b      	str	r3, [r7, #16]
                          |MFRC522_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800607e:	2302      	movs	r3, #2
 8006080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006082:	f107 0310 	add.w	r3, r7, #16
 8006086:	4619      	mov	r1, r3
 8006088:	4818      	ldr	r0, [pc, #96]	; (80060ec <MX_GPIO_Init+0xf0>)
 800608a:	f7fa fa45 	bl	8000518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800608e:	23f0      	movs	r3, #240	; 0xf0
 8006090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800609a:	f107 0310 	add.w	r3, r7, #16
 800609e:	4619      	mov	r1, r3
 80060a0:	4812      	ldr	r0, [pc, #72]	; (80060ec <MX_GPIO_Init+0xf0>)
 80060a2:	f7fa fa39 	bl	8000518 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFRC522_CS_Pin */
  GPIO_InitStruct.Pin = MFRC522_CS_Pin;
 80060a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060ac:	2301      	movs	r3, #1
 80060ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b4:	2302      	movs	r3, #2
 80060b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MFRC522_CS_GPIO_Port, &GPIO_InitStruct);
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	4619      	mov	r1, r3
 80060be:	480c      	ldr	r0, [pc, #48]	; (80060f0 <MX_GPIO_Init+0xf4>)
 80060c0:	f7fa fa2a 	bl	8000518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80060c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <MX_GPIO_Init+0xf8>)
 80060cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d2:	f107 0310 	add.w	r3, r7, #16
 80060d6:	4619      	mov	r1, r3
 80060d8:	4804      	ldr	r0, [pc, #16]	; (80060ec <MX_GPIO_Init+0xf0>)
 80060da:	f7fa fa1d 	bl	8000518 <HAL_GPIO_Init>

}
 80060de:	bf00      	nop
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40010800 	.word	0x40010800
 80060f0:	40010c00 	.word	0x40010c00
 80060f4:	10110000 	.word	0x10110000

080060f8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
  if (huart->Instance == USART3)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a10      	ldr	r2, [pc, #64]	; (800614c <HAL_UART_TxCpltCallback+0x54>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d119      	bne.n	8006142 <HAL_UART_TxCpltCallback+0x4a>
  {
    xSemaphoreGiveFromISR(myBinarySem01Handle, &xHigherPriorityTaskWoken);
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <HAL_UART_TxCpltCallback+0x58>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f107 020c 	add.w	r2, r7, #12
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f7fd fecd 	bl	8003eb8 <xQueueGiveFromISR>
    xQueueSendFromISR(RegisterHandle, &data_winform, NULL);
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <HAL_UART_TxCpltCallback+0x5c>)
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	2300      	movs	r3, #0
 8006124:	2200      	movs	r2, #0
 8006126:	490c      	ldr	r1, [pc, #48]	; (8006158 <HAL_UART_TxCpltCallback+0x60>)
 8006128:	f7fd fe32 	bl	8003d90 <xQueueGenericSendFromISR>
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_UART_TxCpltCallback+0x4a>
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <HAL_UART_TxCpltCallback+0x64>)
 8006134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	f3bf 8f6f 	isb	sy
  }
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40004800 	.word	0x40004800
 8006150:	200032f0 	.word	0x200032f0
 8006154:	20003320 	.word	0x20003320
 8006158:	20003118 	.word	0x20003118
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
    
    

  /* USER CODE BEGIN 5 */
  char key;
  uint8_t count = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for (;;)
  {
    key = get_char();
 800616c:	f000 fcea 	bl	8006b44 <get_char>
 8006170:	4603      	mov	r3, r0
 8006172:	737b      	strb	r3, [r7, #13]

    if (key != '*' && key != '#' && key != 'D' && key != 0 && key != 0x01 && key != 'A' && key != 'B')
 8006174:	7b7b      	ldrb	r3, [r7, #13]
 8006176:	2b2a      	cmp	r3, #42	; 0x2a
 8006178:	f000 808f 	beq.w	800629a <StartDefaultTask+0x13a>
 800617c:	7b7b      	ldrb	r3, [r7, #13]
 800617e:	2b23      	cmp	r3, #35	; 0x23
 8006180:	f000 808b 	beq.w	800629a <StartDefaultTask+0x13a>
 8006184:	7b7b      	ldrb	r3, [r7, #13]
 8006186:	2b44      	cmp	r3, #68	; 0x44
 8006188:	f000 8087 	beq.w	800629a <StartDefaultTask+0x13a>
 800618c:	7b7b      	ldrb	r3, [r7, #13]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8083 	beq.w	800629a <StartDefaultTask+0x13a>
 8006194:	7b7b      	ldrb	r3, [r7, #13]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d07f      	beq.n	800629a <StartDefaultTask+0x13a>
 800619a:	7b7b      	ldrb	r3, [r7, #13]
 800619c:	2b41      	cmp	r3, #65	; 0x41
 800619e:	d07c      	beq.n	800629a <StartDefaultTask+0x13a>
 80061a0:	7b7b      	ldrb	r3, [r7, #13]
 80061a2:	2b42      	cmp	r3, #66	; 0x42
 80061a4:	d079      	beq.n	800629a <StartDefaultTask+0x13a>
    {
      I2C_LCD_display_clear(&LCD);
 80061a6:	483f      	ldr	r0, [pc, #252]	; (80062a4 <StartDefaultTask+0x144>)
 80061a8:	f000 fe1c 	bl	8006de4 <I2C_LCD_display_clear>
      I2C_LCD_print_string(&LCD, "Press Ur Pass!");
 80061ac:	493e      	ldr	r1, [pc, #248]	; (80062a8 <StartDefaultTask+0x148>)
 80061ae:	483d      	ldr	r0, [pc, #244]	; (80062a4 <StartDefaultTask+0x144>)
 80061b0:	f000 fe25 	bl	8006dfe <I2C_LCD_print_string>
      getPassword[count] = key;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	493d      	ldr	r1, [pc, #244]	; (80062ac <StartDefaultTask+0x14c>)
 80061b8:	7b7a      	ldrb	r2, [r7, #13]
 80061ba:	54ca      	strb	r2, [r1, r3]
      vTaskDelay(100);
 80061bc:	2064      	movs	r0, #100	; 0x64
 80061be:	f7fe fb39 	bl	8004834 <vTaskDelay>
      for (uint8_t i = 0; i <= count; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	73bb      	strb	r3, [r7, #14]
 80061c6:	e00c      	b.n	80061e2 <StartDefaultTask+0x82>
      {
        I2C_LCD_set_cursor(&LCD, 1, i);
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	461a      	mov	r2, r3
 80061cc:	2101      	movs	r1, #1
 80061ce:	4835      	ldr	r0, [pc, #212]	; (80062a4 <StartDefaultTask+0x144>)
 80061d0:	f000 fe2c 	bl	8006e2c <I2C_LCD_set_cursor>
        I2C_LCD_print_char(&LCD, '*');
 80061d4:	212a      	movs	r1, #42	; 0x2a
 80061d6:	4833      	ldr	r0, [pc, #204]	; (80062a4 <StartDefaultTask+0x144>)
 80061d8:	f000 fdf4 	bl	8006dc4 <I2C_LCD_print_char>
      for (uint8_t i = 0; i <= count; i++)
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	3301      	adds	r3, #1
 80061e0:	73bb      	strb	r3, [r7, #14]
 80061e2:	7bba      	ldrb	r2, [r7, #14]
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d9ee      	bls.n	80061c8 <StartDefaultTask+0x68>
      }
      count++;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	3301      	adds	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
      if (count == 4)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d151      	bne.n	800629a <StartDefaultTask+0x13a>
      {
        if (getPassword[0] == password[0] && getPassword[1] == password[1] &&
 80061f6:	4b2d      	ldr	r3, [pc, #180]	; (80062ac <StartDefaultTask+0x14c>)
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	4b2d      	ldr	r3, [pc, #180]	; (80062b0 <StartDefaultTask+0x150>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d12d      	bne.n	800625e <StartDefaultTask+0xfe>
 8006202:	4b2a      	ldr	r3, [pc, #168]	; (80062ac <StartDefaultTask+0x14c>)
 8006204:	785a      	ldrb	r2, [r3, #1]
 8006206:	4b2a      	ldr	r3, [pc, #168]	; (80062b0 <StartDefaultTask+0x150>)
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	429a      	cmp	r2, r3
 800620c:	d127      	bne.n	800625e <StartDefaultTask+0xfe>
            getPassword[2] == password[2] && getPassword[3] == password[3])
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <StartDefaultTask+0x14c>)
 8006210:	789a      	ldrb	r2, [r3, #2]
 8006212:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <StartDefaultTask+0x150>)
 8006214:	789b      	ldrb	r3, [r3, #2]
        if (getPassword[0] == password[0] && getPassword[1] == password[1] &&
 8006216:	429a      	cmp	r2, r3
 8006218:	d121      	bne.n	800625e <StartDefaultTask+0xfe>
            getPassword[2] == password[2] && getPassword[3] == password[3])
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <StartDefaultTask+0x14c>)
 800621c:	78da      	ldrb	r2, [r3, #3]
 800621e:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <StartDefaultTask+0x150>)
 8006220:	78db      	ldrb	r3, [r3, #3]
 8006222:	429a      	cmp	r2, r3
 8006224:	d11b      	bne.n	800625e <StartDefaultTask+0xfe>
        {
          I2C_LCD_display_clear(&LCD);
 8006226:	481f      	ldr	r0, [pc, #124]	; (80062a4 <StartDefaultTask+0x144>)
 8006228:	f000 fddc 	bl	8006de4 <I2C_LCD_display_clear>
          I2C_LCD_set_cursor(&LCD, 0, 4);
 800622c:	2204      	movs	r2, #4
 800622e:	2100      	movs	r1, #0
 8006230:	481c      	ldr	r0, [pc, #112]	; (80062a4 <StartDefaultTask+0x144>)
 8006232:	f000 fdfb 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "WELCOME!!");
 8006236:	491f      	ldr	r1, [pc, #124]	; (80062b4 <StartDefaultTask+0x154>)
 8006238:	481a      	ldr	r0, [pc, #104]	; (80062a4 <StartDefaultTask+0x144>)
 800623a:	f000 fde0 	bl	8006dfe <I2C_LCD_print_string>
          I2C_LCD_set_cursor(&LCD, 1, 4);
 800623e:	2204      	movs	r2, #4
 8006240:	2101      	movs	r1, #1
 8006242:	4818      	ldr	r0, [pc, #96]	; (80062a4 <StartDefaultTask+0x144>)
 8006244:	f000 fdf2 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "WELCOME!!");
 8006248:	491a      	ldr	r1, [pc, #104]	; (80062b4 <StartDefaultTask+0x154>)
 800624a:	4816      	ldr	r0, [pc, #88]	; (80062a4 <StartDefaultTask+0x144>)
 800624c:	f000 fdd7 	bl	8006dfe <I2C_LCD_print_string>
          vTaskDelay(2000);
 8006250:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006254:	f7fe faee 	bl	8004834 <vTaskDelay>
          count = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
 800625c:	e01d      	b.n	800629a <StartDefaultTask+0x13a>
        }
        else
        {
          I2C_LCD_display_clear(&LCD);
 800625e:	4811      	ldr	r0, [pc, #68]	; (80062a4 <StartDefaultTask+0x144>)
 8006260:	f000 fdc0 	bl	8006de4 <I2C_LCD_display_clear>
          I2C_LCD_set_cursor(&LCD, 0, 1);
 8006264:	2201      	movs	r2, #1
 8006266:	2100      	movs	r1, #0
 8006268:	480e      	ldr	r0, [pc, #56]	; (80062a4 <StartDefaultTask+0x144>)
 800626a:	f000 fddf 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "Wrong Password");
 800626e:	4912      	ldr	r1, [pc, #72]	; (80062b8 <StartDefaultTask+0x158>)
 8006270:	480c      	ldr	r0, [pc, #48]	; (80062a4 <StartDefaultTask+0x144>)
 8006272:	f000 fdc4 	bl	8006dfe <I2C_LCD_print_string>
          I2C_LCD_set_cursor(&LCD, 1, 1);
 8006276:	2201      	movs	r2, #1
 8006278:	2101      	movs	r1, #1
 800627a:	480a      	ldr	r0, [pc, #40]	; (80062a4 <StartDefaultTask+0x144>)
 800627c:	f000 fdd6 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "Wrong Password");
 8006280:	490d      	ldr	r1, [pc, #52]	; (80062b8 <StartDefaultTask+0x158>)
 8006282:	4808      	ldr	r0, [pc, #32]	; (80062a4 <StartDefaultTask+0x144>)
 8006284:	f000 fdbb 	bl	8006dfe <I2C_LCD_print_string>
          vTaskDelay(1000);
 8006288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800628c:	f7fe fad2 	bl	8004834 <vTaskDelay>
          I2C_LCD_display_clear(&LCD);
 8006290:	4804      	ldr	r0, [pc, #16]	; (80062a4 <StartDefaultTask+0x144>)
 8006292:	f000 fda7 	bl	8006de4 <I2C_LCD_display_clear>
          count = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    osDelay(1);
 800629a:	2001      	movs	r0, #1
 800629c:	f7fd facb 	bl	8003836 <osDelay>
    key = get_char();
 80062a0:	e764      	b.n	800616c <StartDefaultTask+0xc>
 80062a2:	bf00      	nop
 80062a4:	20003314 	.word	0x20003314
 80062a8:	08007fa8 	.word	0x08007fa8
 80062ac:	20003240 	.word	0x20003240
 80062b0:	20000010 	.word	0x20000010
 80062b4:	08007fb8 	.word	0x08007fb8
 80062b8:	08007fc4 	.word	0x08007fc4

080062bc <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  uint8_t status = MI_ERR;
 80062c4:	2302      	movs	r3, #2
 80062c6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for (;;)
  {
    status = MFRC522_Request(PICC_REQIDL, str);
 80062c8:	4951      	ldr	r1, [pc, #324]	; (8006410 <StartTask02+0x154>)
 80062ca:	2026      	movs	r0, #38	; 0x26
 80062cc:	f000 ff93 	bl	80071f6 <MFRC522_Request>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]
    if (status == MI_OK)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f040 8096 	bne.w	8006408 <StartTask02+0x14c>
    {
      status = MFRC522_Anticoll(str);
 80062dc:	484c      	ldr	r0, [pc, #304]	; (8006410 <StartTask02+0x154>)
 80062de:	f000 ffaf 	bl	8007240 <MFRC522_Anticoll>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
      if (status == MI_OK)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 808d 	bne.w	8006408 <StartTask02+0x14c>
      {
        if ((UID_1[0] == str[0] && UID_1[1] == str[1] && UID_1[2] == str[2] && UID_1[3] == str[3] && UID_1[4] == str[4]) ||
 80062ee:	4b49      	ldr	r3, [pc, #292]	; (8006414 <StartTask02+0x158>)
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	4b47      	ldr	r3, [pc, #284]	; (8006410 <StartTask02+0x154>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d117      	bne.n	800632a <StartTask02+0x6e>
 80062fa:	4b46      	ldr	r3, [pc, #280]	; (8006414 <StartTask02+0x158>)
 80062fc:	785a      	ldrb	r2, [r3, #1]
 80062fe:	4b44      	ldr	r3, [pc, #272]	; (8006410 <StartTask02+0x154>)
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	429a      	cmp	r2, r3
 8006304:	d111      	bne.n	800632a <StartTask02+0x6e>
 8006306:	4b43      	ldr	r3, [pc, #268]	; (8006414 <StartTask02+0x158>)
 8006308:	789a      	ldrb	r2, [r3, #2]
 800630a:	4b41      	ldr	r3, [pc, #260]	; (8006410 <StartTask02+0x154>)
 800630c:	789b      	ldrb	r3, [r3, #2]
 800630e:	429a      	cmp	r2, r3
 8006310:	d10b      	bne.n	800632a <StartTask02+0x6e>
 8006312:	4b40      	ldr	r3, [pc, #256]	; (8006414 <StartTask02+0x158>)
 8006314:	78da      	ldrb	r2, [r3, #3]
 8006316:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <StartTask02+0x154>)
 8006318:	78db      	ldrb	r3, [r3, #3]
 800631a:	429a      	cmp	r2, r3
 800631c:	d105      	bne.n	800632a <StartTask02+0x6e>
 800631e:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <StartTask02+0x158>)
 8006320:	791a      	ldrb	r2, [r3, #4]
 8006322:	4b3b      	ldr	r3, [pc, #236]	; (8006410 <StartTask02+0x154>)
 8006324:	791b      	ldrb	r3, [r3, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d03b      	beq.n	80063a2 <StartTask02+0xe6>
            (UID_2[0] == str[0] && UID_2[1] == str[1] && UID_2[2] == str[2] && UID_2[3] == str[3] && UID_2[4] == str[4]) ||
 800632a:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <StartTask02+0x15c>)
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	4b38      	ldr	r3, [pc, #224]	; (8006410 <StartTask02+0x154>)
 8006330:	781b      	ldrb	r3, [r3, #0]
        if ((UID_1[0] == str[0] && UID_1[1] == str[1] && UID_1[2] == str[2] && UID_1[3] == str[3] && UID_1[4] == str[4]) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d117      	bne.n	8006366 <StartTask02+0xaa>
            (UID_2[0] == str[0] && UID_2[1] == str[1] && UID_2[2] == str[2] && UID_2[3] == str[3] && UID_2[4] == str[4]) ||
 8006336:	4b38      	ldr	r3, [pc, #224]	; (8006418 <StartTask02+0x15c>)
 8006338:	785a      	ldrb	r2, [r3, #1]
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <StartTask02+0x154>)
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	429a      	cmp	r2, r3
 8006340:	d111      	bne.n	8006366 <StartTask02+0xaa>
 8006342:	4b35      	ldr	r3, [pc, #212]	; (8006418 <StartTask02+0x15c>)
 8006344:	789a      	ldrb	r2, [r3, #2]
 8006346:	4b32      	ldr	r3, [pc, #200]	; (8006410 <StartTask02+0x154>)
 8006348:	789b      	ldrb	r3, [r3, #2]
 800634a:	429a      	cmp	r2, r3
 800634c:	d10b      	bne.n	8006366 <StartTask02+0xaa>
 800634e:	4b32      	ldr	r3, [pc, #200]	; (8006418 <StartTask02+0x15c>)
 8006350:	78da      	ldrb	r2, [r3, #3]
 8006352:	4b2f      	ldr	r3, [pc, #188]	; (8006410 <StartTask02+0x154>)
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	429a      	cmp	r2, r3
 8006358:	d105      	bne.n	8006366 <StartTask02+0xaa>
 800635a:	4b2f      	ldr	r3, [pc, #188]	; (8006418 <StartTask02+0x15c>)
 800635c:	791a      	ldrb	r2, [r3, #4]
 800635e:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <StartTask02+0x154>)
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d01d      	beq.n	80063a2 <StartTask02+0xe6>
            (UID_3[0] == str[0] && UID_3[1] == str[1] && UID_3[2] == str[2] && UID_3[3] == str[3] && UID_3[4] == str[4]))
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <StartTask02+0x160>)
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	4b29      	ldr	r3, [pc, #164]	; (8006410 <StartTask02+0x154>)
 800636c:	781b      	ldrb	r3, [r3, #0]
            (UID_2[0] == str[0] && UID_2[1] == str[1] && UID_2[2] == str[2] && UID_2[3] == str[3] && UID_2[4] == str[4]) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d131      	bne.n	80063d6 <StartTask02+0x11a>
            (UID_3[0] == str[0] && UID_3[1] == str[1] && UID_3[2] == str[2] && UID_3[3] == str[3] && UID_3[4] == str[4]))
 8006372:	4b2a      	ldr	r3, [pc, #168]	; (800641c <StartTask02+0x160>)
 8006374:	785a      	ldrb	r2, [r3, #1]
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <StartTask02+0x154>)
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	429a      	cmp	r2, r3
 800637c:	d12b      	bne.n	80063d6 <StartTask02+0x11a>
 800637e:	4b27      	ldr	r3, [pc, #156]	; (800641c <StartTask02+0x160>)
 8006380:	789a      	ldrb	r2, [r3, #2]
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <StartTask02+0x154>)
 8006384:	789b      	ldrb	r3, [r3, #2]
 8006386:	429a      	cmp	r2, r3
 8006388:	d125      	bne.n	80063d6 <StartTask02+0x11a>
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <StartTask02+0x160>)
 800638c:	78da      	ldrb	r2, [r3, #3]
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <StartTask02+0x154>)
 8006390:	78db      	ldrb	r3, [r3, #3]
 8006392:	429a      	cmp	r2, r3
 8006394:	d11f      	bne.n	80063d6 <StartTask02+0x11a>
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <StartTask02+0x160>)
 8006398:	791a      	ldrb	r2, [r3, #4]
 800639a:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <StartTask02+0x154>)
 800639c:	791b      	ldrb	r3, [r3, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d119      	bne.n	80063d6 <StartTask02+0x11a>
        {
          I2C_LCD_display_clear(&LCD);
 80063a2:	481f      	ldr	r0, [pc, #124]	; (8006420 <StartTask02+0x164>)
 80063a4:	f000 fd1e 	bl	8006de4 <I2C_LCD_display_clear>
          I2C_LCD_set_cursor(&LCD, 0, 4);
 80063a8:	2204      	movs	r2, #4
 80063aa:	2100      	movs	r1, #0
 80063ac:	481c      	ldr	r0, [pc, #112]	; (8006420 <StartTask02+0x164>)
 80063ae:	f000 fd3d 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "WELCOME!!");
 80063b2:	491c      	ldr	r1, [pc, #112]	; (8006424 <StartTask02+0x168>)
 80063b4:	481a      	ldr	r0, [pc, #104]	; (8006420 <StartTask02+0x164>)
 80063b6:	f000 fd22 	bl	8006dfe <I2C_LCD_print_string>
          I2C_LCD_set_cursor(&LCD, 1, 4);
 80063ba:	2204      	movs	r2, #4
 80063bc:	2101      	movs	r1, #1
 80063be:	4818      	ldr	r0, [pc, #96]	; (8006420 <StartTask02+0x164>)
 80063c0:	f000 fd34 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "WELCOME!!");
 80063c4:	4917      	ldr	r1, [pc, #92]	; (8006424 <StartTask02+0x168>)
 80063c6:	4816      	ldr	r0, [pc, #88]	; (8006420 <StartTask02+0x164>)
 80063c8:	f000 fd19 	bl	8006dfe <I2C_LCD_print_string>
          vTaskDelay(2000);
 80063cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80063d0:	f7fe fa30 	bl	8004834 <vTaskDelay>
 80063d4:	e018      	b.n	8006408 <StartTask02+0x14c>
        }
        else
        {
          I2C_LCD_display_clear(&LCD);
 80063d6:	4812      	ldr	r0, [pc, #72]	; (8006420 <StartTask02+0x164>)
 80063d8:	f000 fd04 	bl	8006de4 <I2C_LCD_display_clear>
          I2C_LCD_set_cursor(&LCD, 0, 3);
 80063dc:	2203      	movs	r2, #3
 80063de:	2100      	movs	r1, #0
 80063e0:	480f      	ldr	r0, [pc, #60]	; (8006420 <StartTask02+0x164>)
 80063e2:	f000 fd23 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "RFID Error!!");
 80063e6:	4910      	ldr	r1, [pc, #64]	; (8006428 <StartTask02+0x16c>)
 80063e8:	480d      	ldr	r0, [pc, #52]	; (8006420 <StartTask02+0x164>)
 80063ea:	f000 fd08 	bl	8006dfe <I2C_LCD_print_string>
          I2C_LCD_set_cursor(&LCD, 1, 3);
 80063ee:	2203      	movs	r2, #3
 80063f0:	2101      	movs	r1, #1
 80063f2:	480b      	ldr	r0, [pc, #44]	; (8006420 <StartTask02+0x164>)
 80063f4:	f000 fd1a 	bl	8006e2c <I2C_LCD_set_cursor>
          I2C_LCD_print_string(&LCD, "RFID Error!!");
 80063f8:	490b      	ldr	r1, [pc, #44]	; (8006428 <StartTask02+0x16c>)
 80063fa:	4809      	ldr	r0, [pc, #36]	; (8006420 <StartTask02+0x164>)
 80063fc:	f000 fcff 	bl	8006dfe <I2C_LCD_print_string>
          vTaskDelay(1000);
 8006400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006404:	f7fe fa16 	bl	8004834 <vTaskDelay>
        }
      }
    }
    osDelay(1);
 8006408:	2001      	movs	r0, #1
 800640a:	f7fd fa14 	bl	8003836 <osDelay>
    status = MFRC522_Request(PICC_REQIDL, str);
 800640e:	e75b      	b.n	80062c8 <StartTask02+0xc>
 8006410:	20003304 	.word	0x20003304
 8006414:	20003140 	.word	0x20003140
 8006418:	200032dc 	.word	0x200032dc
 800641c:	200032e8 	.word	0x200032e8
 8006420:	20003314 	.word	0x20003314
 8006424:	08007fb8 	.word	0x08007fb8
 8006428:	08007fd4 	.word	0x08007fd4

0800642c <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  uint8_t Result = FP_NOFINGER;
 8006434:	2302      	movs	r3, #2
 8006436:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for (;;)
  {
    SendFPHeader();
 8006438:	f000 ff40 	bl	80072bc <SendFPHeader>
    SendFPGetImage();
 800643c:	f000 ff4e 	bl	80072dc <SendFPGetImage>
    Result = CheckFPRespsone(12);
 8006440:	200c      	movs	r0, #12
 8006442:	f001 f803 	bl	800744c <CheckFPRespsone>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]

    if (Result == FP_OK)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d12e      	bne.n	80064ae <StartTask03+0x82>
    {
      SendFPHeader();
 8006450:	f000 ff34 	bl	80072bc <SendFPHeader>
      SendFPCreateCharFile1();
 8006454:	f000 ff52 	bl	80072fc <SendFPCreateCharFile1>
      Result = CheckFPRespsone(12);
 8006458:	200c      	movs	r0, #12
 800645a:	f000 fff7 	bl	800744c <CheckFPRespsone>
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]
      if (Result == FP_OK)
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d13e      	bne.n	80064e6 <StartTask03+0xba>
      {
        SendFPHeader();
 8006468:	f000 ff28 	bl	80072bc <SendFPHeader>
        SendFPDSearchFinger();
 800646c:	f000 ff76 	bl	800735c <SendFPDSearchFinger>
        Result = CheckFPRespsone(16);
 8006470:	2010      	movs	r0, #16
 8006472:	f000 ffeb 	bl	800744c <CheckFPRespsone>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]

        I2C_LCD_display_clear(&LCD);
 800647a:	481d      	ldr	r0, [pc, #116]	; (80064f0 <StartTask03+0xc4>)
 800647c:	f000 fcb2 	bl	8006de4 <I2C_LCD_display_clear>
        I2C_LCD_set_cursor(&LCD, 0, 4);
 8006480:	2204      	movs	r2, #4
 8006482:	2100      	movs	r1, #0
 8006484:	481a      	ldr	r0, [pc, #104]	; (80064f0 <StartTask03+0xc4>)
 8006486:	f000 fcd1 	bl	8006e2c <I2C_LCD_set_cursor>
        I2C_LCD_print_string(&LCD, "WELCOME!!");
 800648a:	491a      	ldr	r1, [pc, #104]	; (80064f4 <StartTask03+0xc8>)
 800648c:	4818      	ldr	r0, [pc, #96]	; (80064f0 <StartTask03+0xc4>)
 800648e:	f000 fcb6 	bl	8006dfe <I2C_LCD_print_string>
        I2C_LCD_set_cursor(&LCD, 1, 4);
 8006492:	2204      	movs	r2, #4
 8006494:	2101      	movs	r1, #1
 8006496:	4816      	ldr	r0, [pc, #88]	; (80064f0 <StartTask03+0xc4>)
 8006498:	f000 fcc8 	bl	8006e2c <I2C_LCD_set_cursor>
        I2C_LCD_print_string(&LCD, "WELCOME!!");
 800649c:	4915      	ldr	r1, [pc, #84]	; (80064f4 <StartTask03+0xc8>)
 800649e:	4814      	ldr	r0, [pc, #80]	; (80064f0 <StartTask03+0xc4>)
 80064a0:	f000 fcad 	bl	8006dfe <I2C_LCD_print_string>
        vTaskDelay(2000);
 80064a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80064a8:	f7fe f9c4 	bl	8004834 <vTaskDelay>
 80064ac:	e01b      	b.n	80064e6 <StartTask03+0xba>
      }
    }
    else if (Result == FP_ERROR)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2bfe      	cmp	r3, #254	; 0xfe
 80064b2:	d118      	bne.n	80064e6 <StartTask03+0xba>
    {
      I2C_LCD_display_clear(&LCD);
 80064b4:	480e      	ldr	r0, [pc, #56]	; (80064f0 <StartTask03+0xc4>)
 80064b6:	f000 fc95 	bl	8006de4 <I2C_LCD_display_clear>
      I2C_LCD_set_cursor(&LCD, 0, 1);
 80064ba:	2201      	movs	r2, #1
 80064bc:	2100      	movs	r1, #0
 80064be:	480c      	ldr	r0, [pc, #48]	; (80064f0 <StartTask03+0xc4>)
 80064c0:	f000 fcb4 	bl	8006e2c <I2C_LCD_set_cursor>
      I2C_LCD_print_string(&LCD, "Finger Error!!");
 80064c4:	490c      	ldr	r1, [pc, #48]	; (80064f8 <StartTask03+0xcc>)
 80064c6:	480a      	ldr	r0, [pc, #40]	; (80064f0 <StartTask03+0xc4>)
 80064c8:	f000 fc99 	bl	8006dfe <I2C_LCD_print_string>
      I2C_LCD_set_cursor(&LCD, 1, 1);
 80064cc:	2201      	movs	r2, #1
 80064ce:	2101      	movs	r1, #1
 80064d0:	4807      	ldr	r0, [pc, #28]	; (80064f0 <StartTask03+0xc4>)
 80064d2:	f000 fcab 	bl	8006e2c <I2C_LCD_set_cursor>
      I2C_LCD_print_string(&LCD, "Finger Error!!");
 80064d6:	4908      	ldr	r1, [pc, #32]	; (80064f8 <StartTask03+0xcc>)
 80064d8:	4805      	ldr	r0, [pc, #20]	; (80064f0 <StartTask03+0xc4>)
 80064da:	f000 fc90 	bl	8006dfe <I2C_LCD_print_string>
      vTaskDelay(2000);
 80064de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80064e2:	f7fe f9a7 	bl	8004834 <vTaskDelay>
    }

    osDelay(1);
 80064e6:	2001      	movs	r0, #1
 80064e8:	f7fd f9a5 	bl	8003836 <osDelay>
    SendFPHeader();
 80064ec:	e7a4      	b.n	8006438 <StartTask03+0xc>
 80064ee:	bf00      	nop
 80064f0:	20003314 	.word	0x20003314
 80064f4:	08007fb8 	.word	0x08007fb8
 80064f8:	08007fe4 	.word	0x08007fe4

080064fc <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  uint8_t check_data;
  /* Infinite loop */
  for (;;)
  {
    if (xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY) == pdPASS)
 8006504:	4b43      	ldr	r3, [pc, #268]	; (8006614 <StartTask04+0x118>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f04f 31ff 	mov.w	r1, #4294967295
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd fe39 	bl	8004184 <xQueueSemaphoreTake>
 8006512:	4603      	mov	r3, r0
 8006514:	2b01      	cmp	r3, #1
 8006516:	d178      	bne.n	800660a <StartTask04+0x10e>
    {
      if (xQueueReceive(RegisterHandle, &check_data, 10) == pdPASS)
 8006518:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <StartTask04+0x11c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f107 010f 	add.w	r1, r7, #15
 8006520:	220a      	movs	r2, #10
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd fd52 	bl	8003fcc <xQueueReceive>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d16d      	bne.n	800660a <StartTask04+0x10e>
      {
        if (check_data == 'A')
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b41      	cmp	r3, #65	; 0x41
 8006532:	d16a      	bne.n	800660a <StartTask04+0x10e>
        {
          I2C_LCD_display_clear(&LCD);
 8006534:	4839      	ldr	r0, [pc, #228]	; (800661c <StartTask04+0x120>)
 8006536:	f000 fc55 	bl	8006de4 <I2C_LCD_display_clear>
          I2C_LCD_print_string(&LCD, "Register Finger");
 800653a:	4939      	ldr	r1, [pc, #228]	; (8006620 <StartTask04+0x124>)
 800653c:	4837      	ldr	r0, [pc, #220]	; (800661c <StartTask04+0x120>)
 800653e:	f000 fc5e 	bl	8006dfe <I2C_LCD_print_string>
          CurrentNumberFinger = GetNumberOfFinger();
 8006542:	f000 ffe9 	bl	8007518 <GetNumberOfFinger>
 8006546:	4603      	mov	r3, r0
 8006548:	461a      	mov	r2, r3
 800654a:	4b36      	ldr	r3, [pc, #216]	; (8006624 <StartTask04+0x128>)
 800654c:	701a      	strb	r2, [r3, #0]
          if (CurrentNumberFinger > 255)
          {
            CurrentNumberFinger = 1;
          }
          I2C_LCD_set_cursor(&LCD, 1, 0);
 800654e:	2200      	movs	r2, #0
 8006550:	2101      	movs	r1, #1
 8006552:	4832      	ldr	r0, [pc, #200]	; (800661c <StartTask04+0x120>)
 8006554:	f000 fc6a 	bl	8006e2c <I2C_LCD_set_cursor>
          sprintf(fp_str, "Number ID: %d", CurrentNumberFinger);
 8006558:	4b32      	ldr	r3, [pc, #200]	; (8006624 <StartTask04+0x128>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	4932      	ldr	r1, [pc, #200]	; (8006628 <StartTask04+0x12c>)
 8006560:	4832      	ldr	r0, [pc, #200]	; (800662c <StartTask04+0x130>)
 8006562:	f001 f8bf 	bl	80076e4 <siprintf>
          I2C_LCD_print_string(&LCD, fp_str);
 8006566:	4931      	ldr	r1, [pc, #196]	; (800662c <StartTask04+0x130>)
 8006568:	482c      	ldr	r0, [pc, #176]	; (800661c <StartTask04+0x120>)
 800656a:	f000 fc48 	bl	8006dfe <I2C_LCD_print_string>
          register_FingerResult = RegistryNewFinger(CurrentNumberFinger + 1);
 800656e:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <StartTask04+0x128>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	3301      	adds	r3, #1
 8006576:	b29b      	uxth	r3, r3
 8006578:	4618      	mov	r0, r3
 800657a:	f000 ffe7 	bl	800754c <RegistryNewFinger>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <StartTask04+0x134>)
 8006584:	701a      	strb	r2, [r3, #0]

          if (register_FingerResult == FP_NOFINGER)
 8006586:	4b2a      	ldr	r3, [pc, #168]	; (8006630 <StartTask04+0x134>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d10b      	bne.n	80065a6 <StartTask04+0xaa>
          {
            I2C_LCD_display_clear(&LCD);
 800658e:	4823      	ldr	r0, [pc, #140]	; (800661c <StartTask04+0x120>)
 8006590:	f000 fc28 	bl	8006de4 <I2C_LCD_display_clear>
            I2C_LCD_print_string(&LCD, "Finger Not Found");
 8006594:	4927      	ldr	r1, [pc, #156]	; (8006634 <StartTask04+0x138>)
 8006596:	4821      	ldr	r0, [pc, #132]	; (800661c <StartTask04+0x120>)
 8006598:	f000 fc31 	bl	8006dfe <I2C_LCD_print_string>
            vTaskDelay(500);
 800659c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065a0:	f7fe f948 	bl	8004834 <vTaskDelay>
 80065a4:	e031      	b.n	800660a <StartTask04+0x10e>
          }
          else if (register_FingerResult == FP_OK)
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <StartTask04+0x134>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d114      	bne.n	80065d8 <StartTask04+0xdc>
          {
            I2C_LCD_display_clear(&LCD);
 80065ae:	481b      	ldr	r0, [pc, #108]	; (800661c <StartTask04+0x120>)
 80065b0:	f000 fc18 	bl	8006de4 <I2C_LCD_display_clear>
            I2C_LCD_print_string(&LCD, "Registry Finger");
 80065b4:	4920      	ldr	r1, [pc, #128]	; (8006638 <StartTask04+0x13c>)
 80065b6:	4819      	ldr	r0, [pc, #100]	; (800661c <StartTask04+0x120>)
 80065b8:	f000 fc21 	bl	8006dfe <I2C_LCD_print_string>
            I2C_LCD_set_cursor(&LCD, 1, 5);
 80065bc:	2205      	movs	r2, #5
 80065be:	2101      	movs	r1, #1
 80065c0:	4816      	ldr	r0, [pc, #88]	; (800661c <StartTask04+0x120>)
 80065c2:	f000 fc33 	bl	8006e2c <I2C_LCD_set_cursor>
            I2C_LCD_print_string(&LCD, "DONE :>");
 80065c6:	491d      	ldr	r1, [pc, #116]	; (800663c <StartTask04+0x140>)
 80065c8:	4814      	ldr	r0, [pc, #80]	; (800661c <StartTask04+0x120>)
 80065ca:	f000 fc18 	bl	8006dfe <I2C_LCD_print_string>
            vTaskDelay(1000);
 80065ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065d2:	f7fe f92f 	bl	8004834 <vTaskDelay>
 80065d6:	e018      	b.n	800660a <StartTask04+0x10e>
          }
          else
          {
            I2C_LCD_display_clear(&LCD);
 80065d8:	4810      	ldr	r0, [pc, #64]	; (800661c <StartTask04+0x120>)
 80065da:	f000 fc03 	bl	8006de4 <I2C_LCD_display_clear>
            I2C_LCD_set_cursor(&LCD, 0, 1);
 80065de:	2201      	movs	r2, #1
 80065e0:	2100      	movs	r1, #0
 80065e2:	480e      	ldr	r0, [pc, #56]	; (800661c <StartTask04+0x120>)
 80065e4:	f000 fc22 	bl	8006e2c <I2C_LCD_set_cursor>
            I2C_LCD_print_string(&LCD, "Finger Error!!");
 80065e8:	4915      	ldr	r1, [pc, #84]	; (8006640 <StartTask04+0x144>)
 80065ea:	480c      	ldr	r0, [pc, #48]	; (800661c <StartTask04+0x120>)
 80065ec:	f000 fc07 	bl	8006dfe <I2C_LCD_print_string>
            I2C_LCD_set_cursor(&LCD, 1, 1);
 80065f0:	2201      	movs	r2, #1
 80065f2:	2101      	movs	r1, #1
 80065f4:	4809      	ldr	r0, [pc, #36]	; (800661c <StartTask04+0x120>)
 80065f6:	f000 fc19 	bl	8006e2c <I2C_LCD_set_cursor>
            I2C_LCD_print_string(&LCD, "Finger Error!!");
 80065fa:	4911      	ldr	r1, [pc, #68]	; (8006640 <StartTask04+0x144>)
 80065fc:	4807      	ldr	r0, [pc, #28]	; (800661c <StartTask04+0x120>)
 80065fe:	f000 fbfe 	bl	8006dfe <I2C_LCD_print_string>
            vTaskDelay(500);
 8006602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006606:	f7fe f915 	bl	8004834 <vTaskDelay>
        {
        }
      }
    }

    osDelay(1);
 800660a:	2001      	movs	r0, #1
 800660c:	f7fd f913 	bl	8003836 <osDelay>
    if (xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY) == pdPASS)
 8006610:	e778      	b.n	8006504 <StartTask04+0x8>
 8006612:	bf00      	nop
 8006614:	200032f0 	.word	0x200032f0
 8006618:	20003320 	.word	0x20003320
 800661c:	20003314 	.word	0x20003314
 8006620:	08007ff4 	.word	0x08007ff4
 8006624:	200032e1 	.word	0x200032e1
 8006628:	08008004 	.word	0x08008004
 800662c:	2000311c 	.word	0x2000311c
 8006630:	2000000c 	.word	0x2000000c
 8006634:	08008014 	.word	0x08008014
 8006638:	08008028 	.word	0x08008028
 800663c:	08008038 	.word	0x08008038
 8006640:	08007fe4 	.word	0x08007fe4

08006644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d101      	bne.n	800665a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006656:	f7f9 fd91 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006662:	b480      	push	{r7}
 8006664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006666:	bf00      	nop
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr
	...

08006670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006676:	4b18      	ldr	r3, [pc, #96]	; (80066d8 <HAL_MspInit+0x68>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <HAL_MspInit+0x68>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6193      	str	r3, [r2, #24]
 8006682:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <HAL_MspInit+0x68>)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_MspInit+0x68>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <HAL_MspInit+0x68>)
 8006694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006698:	61d3      	str	r3, [r2, #28]
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <HAL_MspInit+0x68>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80066a6:	2200      	movs	r2, #0
 80066a8:	210f      	movs	r1, #15
 80066aa:	f06f 0001 	mvn.w	r0, #1
 80066ae:	f7f9 fe58 	bl	8000362 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <HAL_MspInit+0x6c>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	4a04      	ldr	r2, [pc, #16]	; (80066dc <HAL_MspInit+0x6c>)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40010000 	.word	0x40010000

080066e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e8:	f107 0310 	add.w	r3, r7, #16
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a15      	ldr	r2, [pc, #84]	; (8006750 <HAL_I2C_MspInit+0x70>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d123      	bne.n	8006748 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006700:	4b14      	ldr	r3, [pc, #80]	; (8006754 <HAL_I2C_MspInit+0x74>)
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <HAL_I2C_MspInit+0x74>)
 8006706:	f043 0308 	orr.w	r3, r3, #8
 800670a:	6193      	str	r3, [r2, #24]
 800670c:	4b11      	ldr	r3, [pc, #68]	; (8006754 <HAL_I2C_MspInit+0x74>)
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006718:	23c0      	movs	r3, #192	; 0xc0
 800671a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800671c:	2312      	movs	r3, #18
 800671e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006720:	2303      	movs	r3, #3
 8006722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006724:	f107 0310 	add.w	r3, r7, #16
 8006728:	4619      	mov	r1, r3
 800672a:	480b      	ldr	r0, [pc, #44]	; (8006758 <HAL_I2C_MspInit+0x78>)
 800672c:	f7f9 fef4 	bl	8000518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006730:	4b08      	ldr	r3, [pc, #32]	; (8006754 <HAL_I2C_MspInit+0x74>)
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	4a07      	ldr	r2, [pc, #28]	; (8006754 <HAL_I2C_MspInit+0x74>)
 8006736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800673a:	61d3      	str	r3, [r2, #28]
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_I2C_MspInit+0x74>)
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006748:	bf00      	nop
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40005400 	.word	0x40005400
 8006754:	40021000 	.word	0x40021000
 8006758:	40010c00 	.word	0x40010c00

0800675c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <HAL_SPI_MspInit+0x8c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d131      	bne.n	80067e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <HAL_SPI_MspInit+0x90>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_SPI_MspInit+0x90>)
 8006782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006786:	61d3      	str	r3, [r2, #28]
 8006788:	4b18      	ldr	r3, [pc, #96]	; (80067ec <HAL_SPI_MspInit+0x90>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <HAL_SPI_MspInit+0x90>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	4a14      	ldr	r2, [pc, #80]	; (80067ec <HAL_SPI_MspInit+0x90>)
 800679a:	f043 0308 	orr.w	r3, r3, #8
 800679e:	6193      	str	r3, [r2, #24]
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <HAL_SPI_MspInit+0x90>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80067ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80067b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b2:	2302      	movs	r3, #2
 80067b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067b6:	2303      	movs	r3, #3
 80067b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ba:	f107 0310 	add.w	r3, r7, #16
 80067be:	4619      	mov	r1, r3
 80067c0:	480b      	ldr	r0, [pc, #44]	; (80067f0 <HAL_SPI_MspInit+0x94>)
 80067c2:	f7f9 fea9 	bl	8000518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80067c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	4619      	mov	r1, r3
 80067da:	4805      	ldr	r0, [pc, #20]	; (80067f0 <HAL_SPI_MspInit+0x94>)
 80067dc:	f7f9 fe9c 	bl	8000518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80067e0:	bf00      	nop
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40003800 	.word	0x40003800
 80067ec:	40021000 	.word	0x40021000
 80067f0:	40010c00 	.word	0x40010c00

080067f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a09      	ldr	r2, [pc, #36]	; (8006828 <HAL_TIM_Base_MspInit+0x34>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10b      	bne.n	800681e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_TIM_Base_MspInit+0x38>)
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <HAL_TIM_Base_MspInit+0x38>)
 800680c:	f043 0302 	orr.w	r3, r3, #2
 8006810:	61d3      	str	r3, [r2, #28]
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_TIM_Base_MspInit+0x38>)
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr
 8006828:	40000400 	.word	0x40000400
 800682c:	40021000 	.word	0x40021000

08006830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006838:	f107 0318 	add.w	r3, r7, #24
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3c      	ldr	r2, [pc, #240]	; (800693c <HAL_UART_MspInit+0x10c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d132      	bne.n	80068b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006850:	4b3b      	ldr	r3, [pc, #236]	; (8006940 <HAL_UART_MspInit+0x110>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	4a3a      	ldr	r2, [pc, #232]	; (8006940 <HAL_UART_MspInit+0x110>)
 8006856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800685a:	6193      	str	r3, [r2, #24]
 800685c:	4b38      	ldr	r3, [pc, #224]	; (8006940 <HAL_UART_MspInit+0x110>)
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006868:	4b35      	ldr	r3, [pc, #212]	; (8006940 <HAL_UART_MspInit+0x110>)
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4a34      	ldr	r2, [pc, #208]	; (8006940 <HAL_UART_MspInit+0x110>)
 800686e:	f043 0304 	orr.w	r3, r3, #4
 8006872:	6193      	str	r3, [r2, #24]
 8006874:	4b32      	ldr	r3, [pc, #200]	; (8006940 <HAL_UART_MspInit+0x110>)
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006886:	2302      	movs	r3, #2
 8006888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800688a:	2303      	movs	r3, #3
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800688e:	f107 0318 	add.w	r3, r7, #24
 8006892:	4619      	mov	r1, r3
 8006894:	482b      	ldr	r0, [pc, #172]	; (8006944 <HAL_UART_MspInit+0x114>)
 8006896:	f7f9 fe3f 	bl	8000518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800689e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a8:	f107 0318 	add.w	r3, r7, #24
 80068ac:	4619      	mov	r1, r3
 80068ae:	4825      	ldr	r0, [pc, #148]	; (8006944 <HAL_UART_MspInit+0x114>)
 80068b0:	f7f9 fe32 	bl	8000518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80068b4:	e03e      	b.n	8006934 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a23      	ldr	r2, [pc, #140]	; (8006948 <HAL_UART_MspInit+0x118>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d139      	bne.n	8006934 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80068c0:	4b1f      	ldr	r3, [pc, #124]	; (8006940 <HAL_UART_MspInit+0x110>)
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <HAL_UART_MspInit+0x110>)
 80068c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068ca:	61d3      	str	r3, [r2, #28]
 80068cc:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <HAL_UART_MspInit+0x110>)
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <HAL_UART_MspInit+0x110>)
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	4a18      	ldr	r2, [pc, #96]	; (8006940 <HAL_UART_MspInit+0x110>)
 80068de:	f043 0308 	orr.w	r3, r3, #8
 80068e2:	6193      	str	r3, [r2, #24]
 80068e4:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_UART_MspInit+0x110>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80068f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f6:	2302      	movs	r3, #2
 80068f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068fa:	2303      	movs	r3, #3
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	4619      	mov	r1, r3
 8006904:	4811      	ldr	r0, [pc, #68]	; (800694c <HAL_UART_MspInit+0x11c>)
 8006906:	f7f9 fe07 	bl	8000518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800690a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800690e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006914:	2300      	movs	r3, #0
 8006916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006918:	f107 0318 	add.w	r3, r7, #24
 800691c:	4619      	mov	r1, r3
 800691e:	480b      	ldr	r0, [pc, #44]	; (800694c <HAL_UART_MspInit+0x11c>)
 8006920:	f7f9 fdfa 	bl	8000518 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006924:	2200      	movs	r2, #0
 8006926:	2105      	movs	r1, #5
 8006928:	2027      	movs	r0, #39	; 0x27
 800692a:	f7f9 fd1a 	bl	8000362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800692e:	2027      	movs	r0, #39	; 0x27
 8006930:	f7f9 fd33 	bl	800039a <HAL_NVIC_EnableIRQ>
}
 8006934:	bf00      	nop
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40013800 	.word	0x40013800
 8006940:	40021000 	.word	0x40021000
 8006944:	40010800 	.word	0x40010800
 8006948:	40004800 	.word	0x40004800
 800694c:	40010c00 	.word	0x40010c00

08006950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8006960:	2200      	movs	r2, #0
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	201c      	movs	r0, #28
 8006966:	f7f9 fcfc 	bl	8000362 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800696a:	201c      	movs	r0, #28
 800696c:	f7f9 fd15 	bl	800039a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006970:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <HAL_InitTick+0xa4>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <HAL_InitTick+0xa4>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	61d3      	str	r3, [r2, #28]
 800697c:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <HAL_InitTick+0xa4>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006988:	f107 0210 	add.w	r2, r7, #16
 800698c:	f107 0314 	add.w	r3, r7, #20
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f7fa ff86 	bl	80018a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006998:	f7fa ff5c 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 800699c:	4603      	mov	r3, r0
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <HAL_InitTick+0xa8>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	0c9b      	lsrs	r3, r3, #18
 80069ac:	3b01      	subs	r3, #1
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <HAL_InitTick+0xac>)
 80069b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80069b8:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_InitTick+0xac>)
 80069ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80069be:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80069c0:	4a0e      	ldr	r2, [pc, #56]	; (80069fc <HAL_InitTick+0xac>)
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <HAL_InitTick+0xac>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_InitTick+0xac>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80069d2:	480a      	ldr	r0, [pc, #40]	; (80069fc <HAL_InitTick+0xac>)
 80069d4:	f7fb fd20 	bl	8002418 <HAL_TIM_Base_Init>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80069de:	4807      	ldr	r0, [pc, #28]	; (80069fc <HAL_InitTick+0xac>)
 80069e0:	f7fb fd6a 	bl	80024b8 <HAL_TIM_Base_Start_IT>
 80069e4:	4603      	mov	r3, r0
 80069e6:	e000      	b.n	80069ea <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3730      	adds	r7, #48	; 0x30
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	431bde83 	.word	0x431bde83
 80069fc:	20003324 	.word	0x20003324

08006a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a10:	e7fe      	b.n	8006a10 <HardFault_Handler+0x4>

08006a12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a12:	b480      	push	{r7}
 8006a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a16:	e7fe      	b.n	8006a16 <MemManage_Handler+0x4>

08006a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a1c:	e7fe      	b.n	8006a1c <BusFault_Handler+0x4>

08006a1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a22:	e7fe      	b.n	8006a22 <UsageFault_Handler+0x4>

08006a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006a34:	4802      	ldr	r0, [pc, #8]	; (8006a40 <TIM2_IRQHandler+0x10>)
 8006a36:	f7fb fd91 	bl	800255c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20003324 	.word	0x20003324

08006a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006a48:	4802      	ldr	r0, [pc, #8]	; (8006a54 <USART3_IRQHandler+0x10>)
 8006a4a:	f7fc fa85 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200031a0 	.word	0x200031a0

08006a58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006a60:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <_sbrk+0x50>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <_sbrk+0x16>
		heap_end = &end;
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <_sbrk+0x50>)
 8006a6a:	4a10      	ldr	r2, [pc, #64]	; (8006aac <_sbrk+0x54>)
 8006a6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <_sbrk+0x50>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <_sbrk+0x50>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	466a      	mov	r2, sp
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d907      	bls.n	8006a92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a82:	f000 fdf1 	bl	8007668 <__errno>
 8006a86:	4602      	mov	r2, r0
 8006a88:	230c      	movs	r3, #12
 8006a8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a90:	e006      	b.n	8006aa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <_sbrk+0x50>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	4a03      	ldr	r2, [pc, #12]	; (8006aa8 <_sbrk+0x50>)
 8006a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20003130 	.word	0x20003130
 8006aac:	20003370 	.word	0x20003370

08006ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006abc:	480c      	ldr	r0, [pc, #48]	; (8006af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006abe:	490d      	ldr	r1, [pc, #52]	; (8006af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ac4:	e002      	b.n	8006acc <LoopCopyDataInit>

08006ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006aca:	3304      	adds	r3, #4

08006acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ad0:	d3f9      	bcc.n	8006ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006ad4:	4c0a      	ldr	r4, [pc, #40]	; (8006b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ad8:	e001      	b.n	8006ade <LoopFillZerobss>

08006ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006adc:	3204      	adds	r2, #4

08006ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ae0:	d3fb      	bcc.n	8006ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ae2:	f7ff ffe5 	bl	8006ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ae6:	f000 fdc5 	bl	8007674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006aea:	f7ff f89d 	bl	8005c28 <main>
  bx lr
 8006aee:	4770      	bx	lr
  ldr r0, =_sdata
 8006af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006af4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8006af8:	08008094 	.word	0x08008094
  ldr r2, =_sbss
 8006afc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8006b00:	20003370 	.word	0x20003370

08006b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b04:	e7fe      	b.n	8006b04 <ADC1_2_IRQHandler>
	...

08006b08 <keypad_init>:

uint8_t tableColum[4] = {COL_PIN_1, COL_PIN_2, COL_PIN_3, COL_PIN_4};
uint8_t tableRow[4] = {ROW_PIN_1, ROW_PIN_2, ROW_PIN_3, ROW_PIN_4};

void keypad_init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
    for (uint8_t colum = 0; colum < 4; colum++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	71fb      	strb	r3, [r7, #7]
 8006b12:	e00b      	b.n	8006b2c <keypad_init+0x24>
    {
        HAL_GPIO_WritePin(KEYPAD_PORT, tableColum[colum], GPIO_PIN_SET);
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <keypad_init+0x34>)
 8006b18:	5cd3      	ldrb	r3, [r2, r3]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4807      	ldr	r0, [pc, #28]	; (8006b40 <keypad_init+0x38>)
 8006b22:	f7f9 fe6a 	bl	80007fa <HAL_GPIO_WritePin>
    for (uint8_t colum = 0; colum < 4; colum++)
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	71fb      	strb	r3, [r7, #7]
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d9f0      	bls.n	8006b14 <keypad_init+0xc>
    }
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000028 	.word	0x20000028
 8006b40:	40010800 	.word	0x40010800

08006b44 <get_char>:

char get_char(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
    for (uint8_t colum = 0; colum < 4; colum++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	71fb      	strb	r3, [r7, #7]
 8006b4e:	e03f      	b.n	8006bd0 <get_char+0x8c>
    {
        HAL_GPIO_WritePin(KEYPAD_PORT, tableColum[colum], GPIO_PIN_RESET);
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	4a23      	ldr	r2, [pc, #140]	; (8006be0 <get_char+0x9c>)
 8006b54:	5cd3      	ldrb	r3, [r2, r3]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4821      	ldr	r0, [pc, #132]	; (8006be4 <get_char+0xa0>)
 8006b5e:	f7f9 fe4c 	bl	80007fa <HAL_GPIO_WritePin>
        for (uint8_t row = 0; row < 4; row++)
 8006b62:	2300      	movs	r3, #0
 8006b64:	71bb      	strb	r3, [r7, #6]
 8006b66:	e024      	b.n	8006bb2 <get_char+0x6e>
        {
            if (!HAL_GPIO_ReadPin(KEYPAD_PORT, tableRow[row]))
 8006b68:	79bb      	ldrb	r3, [r7, #6]
 8006b6a:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <get_char+0xa4>)
 8006b6c:	5cd3      	ldrb	r3, [r2, r3]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	481c      	ldr	r0, [pc, #112]	; (8006be4 <get_char+0xa0>)
 8006b74:	f7f9 fe2a 	bl	80007cc <HAL_GPIO_ReadPin>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d116      	bne.n	8006bac <get_char+0x68>
                {
                    vTaskDelay(100);
 8006b7e:	2064      	movs	r0, #100	; 0x64
 8006b80:	f7fd fe58 	bl	8004834 <vTaskDelay>
                    while (!HAL_GPIO_ReadPin(KEYPAD_PORT, tableRow[row]))
 8006b84:	bf00      	nop
 8006b86:	79bb      	ldrb	r3, [r7, #6]
 8006b88:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <get_char+0xa4>)
 8006b8a:	5cd3      	ldrb	r3, [r2, r3]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4814      	ldr	r0, [pc, #80]	; (8006be4 <get_char+0xa0>)
 8006b92:	f7f9 fe1b 	bl	80007cc <HAL_GPIO_ReadPin>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f4      	beq.n	8006b86 <get_char+0x42>
                    {
                    };
                    return keyPad[row][colum];
 8006b9c:	79ba      	ldrb	r2, [r7, #6]
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	4912      	ldr	r1, [pc, #72]	; (8006bec <get_char+0xa8>)
 8006ba2:	0092      	lsls	r2, r2, #2
 8006ba4:	440a      	add	r2, r1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	e015      	b.n	8006bd8 <get_char+0x94>
        for (uint8_t row = 0; row < 4; row++)
 8006bac:	79bb      	ldrb	r3, [r7, #6]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	71bb      	strb	r3, [r7, #6]
 8006bb2:	79bb      	ldrb	r3, [r7, #6]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d9d7      	bls.n	8006b68 <get_char+0x24>
            }
        }
        HAL_GPIO_WritePin(KEYPAD_PORT, tableColum[colum], GPIO_PIN_SET);
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <get_char+0x9c>)
 8006bbc:	5cd3      	ldrb	r3, [r2, r3]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4807      	ldr	r0, [pc, #28]	; (8006be4 <get_char+0xa0>)
 8006bc6:	f7f9 fe18 	bl	80007fa <HAL_GPIO_WritePin>
    for (uint8_t colum = 0; colum < 4; colum++)
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	71fb      	strb	r3, [r7, #7]
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d9bc      	bls.n	8006b50 <get_char+0xc>
    }
    return 0;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000028 	.word	0x20000028
 8006be4:	40010800 	.word	0x40010800
 8006be8:	2000002c 	.word	0x2000002c
 8006bec:	20000018 	.word	0x20000018

08006bf0 <mdelay>:
 *      Author: DELL
 */
#include "lcd_i2c.h"

static void mdelay(uint32_t time)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < (time * 1000); i++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e002      	b.n	8006c04 <mdelay+0x14>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d3f4      	bcc.n	8006bfe <mdelay+0xe>
    ;
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <udelay>:

static void udelay(uint32_t time)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < (time * 1); i++)
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e002      	b.n	8006c32 <udelay+0x14>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3f8      	bcc.n	8006c2c <udelay+0xe>
    ;
}
 8006c3a:	bf00      	nop
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <I2C_LCD_Write>:

static void I2C_LCD_Write(I2C_LCD_Handle_t *LCD, uint8_t data, uint8_t mode)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
 8006c50:	4613      	mov	r3, r2
 8006c52:	70bb      	strb	r3, [r7, #2]
  char data_h;
  char data_l;
  uint8_t data_t[4];
  data_h = data & 0xF0;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	f023 030f 	bic.w	r3, r3, #15
 8006c5a:	73fb      	strb	r3, [r7, #15]
  data_l = (data << 4) & 0xF0;
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	73bb      	strb	r3, [r7, #14]

  if (LCD->BACKLIGHT)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7a5b      	ldrb	r3, [r3, #9]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d007      	beq.n	8006c7a <I2C_LCD_Write+0x36>
  {
    data_h |= LCD_BACKLIGHT;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	f043 0308 	orr.w	r3, r3, #8
 8006c70:	73fb      	strb	r3, [r7, #15]
    data_l |= LCD_BACKLIGHT;
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	f043 0308 	orr.w	r3, r3, #8
 8006c78:	73bb      	strb	r3, [r7, #14]
  }

  if (mode == LCD_DATA)
 8006c7a:	78bb      	ldrb	r3, [r7, #2]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d108      	bne.n	8006c92 <I2C_LCD_Write+0x4e>
  {
    data_h |= LCD_RS;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
    data_l |= LCD_RS;
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	73bb      	strb	r3, [r7, #14]
 8006c90:	e00a      	b.n	8006ca8 <I2C_LCD_Write+0x64>
  }
  else if (mode == LCD_COMMAND)
 8006c92:	78bb      	ldrb	r3, [r7, #2]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d107      	bne.n	8006ca8 <I2C_LCD_Write+0x64>
  {
    data_h &= ~LCD_RS;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
    data_l &= ~LCD_RS;
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	73bb      	strb	r3, [r7, #14]
  }
  data_t[0] = data_h | LCD_EN;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	f043 0304 	orr.w	r3, r3, #4
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	723b      	strb	r3, [r7, #8]
  mdelay(1);
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	f7ff ff9c 	bl	8006bf0 <mdelay>
  data_t[1] = data_h;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l | LCD_EN;
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	f043 0304 	orr.w	r3, r3, #4
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	72bb      	strb	r3, [r7, #10]
  mdelay(1);
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	f7ff ff92 	bl	8006bf0 <mdelay>
  data_t[3] = data_l;
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)data_t, sizeof(data_t), HAL_MAX_DELAY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	791b      	ldrb	r3, [r3, #4]
 8006cd8:	b299      	uxth	r1, r3
 8006cda:	f107 0208 	add.w	r2, r7, #8
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f7f9 fed9 	bl	8000a9c <HAL_I2C_Master_Transmit>
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <I2C_LCD_init>:

void I2C_LCD_init(I2C_LCD_Handle_t *LCD, I2C_HandleTypeDef *I2CHandle, uint8_t SlaveAddr)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	71fb      	strb	r3, [r7, #7]
  LCD->I2C = I2CHandle;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	601a      	str	r2, [r3, #0]
  LCD->ADDRESS = SlaveAddr;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	79fa      	ldrb	r2, [r7, #7]
 8006d0a:	711a      	strb	r2, [r3, #4]
  LCD->FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2228      	movs	r2, #40	; 0x28
 8006d10:	721a      	strb	r2, [r3, #8]
  LCD->ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2206      	movs	r2, #6
 8006d16:	715a      	strb	r2, [r3, #5]
  LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	220c      	movs	r2, #12
 8006d1c:	719a      	strb	r2, [r3, #6]
  LCD->CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2214      	movs	r2, #20
 8006d22:	71da      	strb	r2, [r3, #7]
  LCD->BACKLIGHT = LCD_BACKLIGHT;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2208      	movs	r2, #8
 8006d28:	725a      	strb	r2, [r3, #9]

  mdelay(50);
 8006d2a:	2032      	movs	r0, #50	; 0x32
 8006d2c:	f7ff ff60 	bl	8006bf0 <mdelay>
  I2C_LCD_Write(LCD, 0x33, LCD_COMMAND);
 8006d30:	2200      	movs	r2, #0
 8006d32:	2133      	movs	r1, #51	; 0x33
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff ff85 	bl	8006c44 <I2C_LCD_Write>
  mdelay(5);
 8006d3a:	2005      	movs	r0, #5
 8006d3c:	f7ff ff58 	bl	8006bf0 <mdelay>
  I2C_LCD_Write(LCD, 0x33, LCD_COMMAND);
 8006d40:	2200      	movs	r2, #0
 8006d42:	2133      	movs	r1, #51	; 0x33
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff ff7d 	bl	8006c44 <I2C_LCD_Write>
  udelay(200);
 8006d4a:	20c8      	movs	r0, #200	; 0xc8
 8006d4c:	f7ff ff67 	bl	8006c1e <udelay>
  I2C_LCD_Write(LCD, 0x32, LCD_COMMAND);
 8006d50:	2200      	movs	r2, #0
 8006d52:	2132      	movs	r1, #50	; 0x32
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff ff75 	bl	8006c44 <I2C_LCD_Write>
  mdelay(5);
 8006d5a:	2005      	movs	r0, #5
 8006d5c:	f7ff ff48 	bl	8006bf0 <mdelay>
  I2C_LCD_Write(LCD, 0x20, LCD_COMMAND);
 8006d60:	2200      	movs	r2, #0
 8006d62:	2120      	movs	r1, #32
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ff6d 	bl	8006c44 <I2C_LCD_Write>
  mdelay(5);
 8006d6a:	2005      	movs	r0, #5
 8006d6c:	f7ff ff40 	bl	8006bf0 <mdelay>

  I2C_LCD_Write(LCD, LCD->ENTRYMODE, LCD_COMMAND);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	795b      	ldrb	r3, [r3, #5]
 8006d74:	2200      	movs	r2, #0
 8006d76:	4619      	mov	r1, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff ff63 	bl	8006c44 <I2C_LCD_Write>
  I2C_LCD_Write(LCD, LCD->DISPLAYCTRL, LCD_COMMAND);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	799b      	ldrb	r3, [r3, #6]
 8006d82:	2200      	movs	r2, #0
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff ff5c 	bl	8006c44 <I2C_LCD_Write>
  I2C_LCD_Write(LCD, LCD->CURSORSHIFT, LCD_COMMAND);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	79db      	ldrb	r3, [r3, #7]
 8006d90:	2200      	movs	r2, #0
 8006d92:	4619      	mov	r1, r3
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff ff55 	bl	8006c44 <I2C_LCD_Write>
  I2C_LCD_Write(LCD, LCD->FUNCTIONSET, LCD_COMMAND);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	7a1b      	ldrb	r3, [r3, #8]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	4619      	mov	r1, r3
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7ff ff4e 	bl	8006c44 <I2C_LCD_Write>
  I2C_LCD_Write(LCD, LCD_CLEARDISPLAY, LCD_COMMAND);
 8006da8:	2200      	movs	r2, #0
 8006daa:	2101      	movs	r1, #1
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff ff49 	bl	8006c44 <I2C_LCD_Write>
  I2C_LCD_Write(LCD, LCD_RETURNHOME, LCD_COMMAND);
 8006db2:	2200      	movs	r2, #0
 8006db4:	2102      	movs	r1, #2
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff ff44 	bl	8006c44 <I2C_LCD_Write>
}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <I2C_LCD_print_char>:

void I2C_LCD_print_char(I2C_LCD_Handle_t *LCD, char data)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  I2C_LCD_Write(LCD, data, LCD_DATA);
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ff34 	bl	8006c44 <I2C_LCD_Write>
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <I2C_LCD_display_clear>:

void I2C_LCD_display_clear(I2C_LCD_Handle_t *LCD)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  I2C_LCD_Write(LCD, LCD_CLEARDISPLAY, LCD_COMMAND);
 8006dec:	2200      	movs	r2, #0
 8006dee:	2101      	movs	r1, #1
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ff27 	bl	8006c44 <I2C_LCD_Write>
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <I2C_LCD_print_string>:
{
  I2C_LCD_Write(LCD, LCD_RETURNHOME, LCD_COMMAND);
}

void I2C_LCD_print_string(I2C_LCD_Handle_t *LCD, char *str)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  while (*str)
 8006e08:	e008      	b.n	8006e1c <I2C_LCD_print_string+0x1e>
    I2C_LCD_Write(LCD, *str++, LCD_DATA);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	603a      	str	r2, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2201      	movs	r2, #1
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff ff14 	bl	8006c44 <I2C_LCD_Write>
  while (*str)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f2      	bne.n	8006e0a <I2C_LCD_print_string+0xc>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <I2C_LCD_set_cursor>:

void I2C_LCD_set_cursor(I2C_LCD_Handle_t *LCD, uint8_t row, uint8_t column)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	70bb      	strb	r3, [r7, #2]
  switch (row)
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <I2C_LCD_set_cursor+0x1c>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d005      	beq.n	8006e52 <I2C_LCD_set_cursor+0x26>
 8006e46:	e009      	b.n	8006e5c <I2C_LCD_set_cursor+0x30>
  {
  case 0:
    column |= 0x80;
 8006e48:	78bb      	ldrb	r3, [r7, #2]
 8006e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e4e:	70bb      	strb	r3, [r7, #2]
    break;
 8006e50:	e004      	b.n	8006e5c <I2C_LCD_set_cursor+0x30>
  case 1:
    column |= 0xC0;
 8006e52:	78bb      	ldrb	r3, [r7, #2]
 8006e54:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006e58:	70bb      	strb	r3, [r7, #2]
    break;
 8006e5a:	bf00      	nop
  }
  I2C_LCD_Write(LCD, column, LCD_COMMAND);
 8006e5c:	78bb      	ldrb	r3, [r7, #2]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff feee 	bl	8006c44 <I2C_LCD_Write>
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SPI_Transfer>:
 * Chuc nang: Viet 1 byte du lieu vao thanh ghi MFRC522
 * Input:addr-> DIa chi ghi, val-> Gia tri de ghi
 * Tra ve: Khong
 */
uint8_t SPI_Transfer(uint8_t data)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
    uint8_t TxBuffer = data;
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	73fb      	strb	r3, [r7, #15]
    uint8_t RxBuffer;
    HAL_SPI_Transmit(&hspi2, &TxBuffer, 1, 1000);
 8006e7e:	f107 010f 	add.w	r1, r7, #15
 8006e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e86:	2201      	movs	r2, #1
 8006e88:	4807      	ldr	r0, [pc, #28]	; (8006ea8 <SPI_Transfer+0x38>)
 8006e8a:	f7fa fddd 	bl	8001a48 <HAL_SPI_Transmit>

    HAL_SPI_Receive(&hspi2, &RxBuffer, 1, 1000);
 8006e8e:	f107 010e 	add.w	r1, r7, #14
 8006e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e96:	2201      	movs	r2, #1
 8006e98:	4803      	ldr	r0, [pc, #12]	; (8006ea8 <SPI_Transfer+0x38>)
 8006e9a:	f7fa ff11 	bl	8001cc0 <HAL_SPI_Receive>
    return RxBuffer;
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20003148 	.word	0x20003148

08006eac <RC522_SPI_Transfer>:

uint8_t RC522_SPI_Transfer(uint8_t data)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
    return SPI_Transfer(data);
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff ffd9 	bl	8006e70 <SPI_Transfer>
 8006ebe:	4603      	mov	r3, r0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <Write_MFRC522>:
 * Chuc nang: Viet 1 byte du lieu vao thanh ghi MFRC522
 * Input:addr-> DIa chi ghi, val-> Gia tri de ghi
 * Tra ve: Khong
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	460a      	mov	r2, r1
 8006ed2:	71fb      	strb	r3, [r7, #7]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71bb      	strb	r3, [r7, #6]
    /* CS LOW */
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 0);
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ede:	480d      	ldr	r0, [pc, #52]	; (8006f14 <Write_MFRC522+0x4c>)
 8006ee0:	f7f9 fc8b 	bl	80007fa <HAL_GPIO_WritePin>

    // Dinh dang dia chi:0XXXXXX0
    RC522_SPI_Transfer((addr << 1) & 0x7E);
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff ffdb 	bl	8006eac <RC522_SPI_Transfer>
    RC522_SPI_Transfer(val);
 8006ef6:	79bb      	ldrb	r3, [r7, #6]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ffd7 	bl	8006eac <RC522_SPI_Transfer>

    /* CS HIGH */
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 8006efe:	2201      	movs	r2, #1
 8006f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f04:	4803      	ldr	r0, [pc, #12]	; (8006f14 <Write_MFRC522+0x4c>)
 8006f06:	f7f9 fc78 	bl	80007fa <HAL_GPIO_WritePin>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40010c00 	.word	0x40010c00

08006f18 <Read_MFRC522>:
 * Chuc nang:Doc 1 byte du lieu tu 1 thanh ghi MFRC522
 * Input:addr-> dia chi doc
 * Tra ve: Gia tri trong thanh ghi doc ve
 */
uchar Read_MFRC522(uchar addr)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	71fb      	strb	r3, [r7, #7]
    uchar val;

    /* CS LOW */
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 0);
 8006f22:	2200      	movs	r2, #0
 8006f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f28:	480f      	ldr	r0, [pc, #60]	; (8006f68 <Read_MFRC522+0x50>)
 8006f2a:	f7f9 fc66 	bl	80007fa <HAL_GPIO_WritePin>

    // Dinh dang dia chi:1XXXXXX0
    RC522_SPI_Transfer(((addr << 1) & 0x7E) | 0x80);
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff ffb2 	bl	8006eac <RC522_SPI_Transfer>
    val = RC522_SPI_Transfer(0x00);
 8006f48:	2000      	movs	r0, #0
 8006f4a:	f7ff ffaf 	bl	8006eac <RC522_SPI_Transfer>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]

    /* CS HIGH */
    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);
 8006f52:	2201      	movs	r2, #1
 8006f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f58:	4803      	ldr	r0, [pc, #12]	; (8006f68 <Read_MFRC522+0x50>)
 8006f5a:	f7f9 fc4e 	bl	80007fa <HAL_GPIO_WritePin>

    return val;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40010c00 	.word	0x40010c00

08006f6c <SetBitMask>:
 * Chuc nang:Set bit trong mot thanh ghi MFRC522
 * Input:reg--Thanh ghi cai dat; mask--gia tri set
 * Tra ve: Khong
 */
void SetBitMask(uchar reg, uchar mask)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	460a      	mov	r2, r1
 8006f76:	71fb      	strb	r3, [r7, #7]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff ffca 	bl	8006f18 <Read_MFRC522>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask); // set bit mask
 8006f88:	7bfa      	ldrb	r2, [r7, #15]
 8006f8a:	79bb      	ldrb	r3, [r7, #6]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	4611      	mov	r1, r2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff ff97 	bl	8006ec8 <Write_MFRC522>
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <ClearBitMask>:
 * Chuc nang:Reset bit trong thanh ghi MFRC522
 * Input:reg--Dia chi thanh ghi; mask--Gia tri bit can clear
 * Tra ve: Khong
 */
void ClearBitMask(uchar reg, uchar mask)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460a      	mov	r2, r1
 8006fac:	71fb      	strb	r3, [r7, #7]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ffaf 	bl	8006f18 <Read_MFRC522>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask)); // clear bit mask
 8006fbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	b25a      	sxtb	r2, r3
 8006fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	b25b      	sxtb	r3, r3
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff ff77 	bl	8006ec8 <Write_MFRC522>
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <AntennaOn>:
 * Chuc Nang:Mo anten, nen co it nhat 1 ms
 * Input: khong
 * Tra ve: khong
 */
void AntennaOn(void)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	af00      	add	r7, sp, #0
    //  temp = Read_MFRC522(TxControlReg);
    //  if (!(temp & 0x03))
    //  {
    //      SetBitMask(TxControlReg, 0x03);
    //  }
    SetBitMask(TxControlReg, 0x03);
 8006fe6:	2103      	movs	r1, #3
 8006fe8:	2014      	movs	r0, #20
 8006fea:	f7ff ffbf 	bl	8006f6c <SetBitMask>
}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <MFRC522_Reset>:
 * Chuc nang:Khoi dong lai RC522
 * Input: Khong
 * Return: Khong
 */
void MFRC522_Reset(void)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8006ff6:	210f      	movs	r1, #15
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	f7ff ff65 	bl	8006ec8 <Write_MFRC522>
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <MFRC522_Init>:
 * Chuc nang:Khoi tao RC522
 * Input: Khong
 * Tra va: Khong
 */
void MFRC522_Init(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, 1);   // Activate the RFID reader
 8007008:	2201      	movs	r2, #1
 800700a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800700e:	4813      	ldr	r0, [pc, #76]	; (800705c <MFRC522_Init+0x58>)
 8007010:	f7f9 fbf3 	bl	80007fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, 1); // not reset
 8007014:	2201      	movs	r2, #1
 8007016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800701a:	4811      	ldr	r0, [pc, #68]	; (8007060 <MFRC522_Init+0x5c>)
 800701c:	f7f9 fbed 	bl	80007fa <HAL_GPIO_WritePin>

    MFRC522_Reset();
 8007020:	f7ff ffe7 	bl	8006ff2 <MFRC522_Reset>

    // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    Write_MFRC522(TModeReg, 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8007024:	218d      	movs	r1, #141	; 0x8d
 8007026:	202a      	movs	r0, #42	; 0x2a
 8007028:	f7ff ff4e 	bl	8006ec8 <Write_MFRC522>
    Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 800702c:	213e      	movs	r1, #62	; 0x3e
 800702e:	202b      	movs	r0, #43	; 0x2b
 8007030:	f7ff ff4a 	bl	8006ec8 <Write_MFRC522>
    Write_MFRC522(TReloadRegL, 30);
 8007034:	211e      	movs	r1, #30
 8007036:	202d      	movs	r0, #45	; 0x2d
 8007038:	f7ff ff46 	bl	8006ec8 <Write_MFRC522>
    Write_MFRC522(TReloadRegH, 0);
 800703c:	2100      	movs	r1, #0
 800703e:	202c      	movs	r0, #44	; 0x2c
 8007040:	f7ff ff42 	bl	8006ec8 <Write_MFRC522>

    Write_MFRC522(TxAutoReg, 0x40); // 100%ASK
 8007044:	2140      	movs	r1, #64	; 0x40
 8007046:	2015      	movs	r0, #21
 8007048:	f7ff ff3e 	bl	8006ec8 <Write_MFRC522>
    Write_MFRC522(ModeReg, 0x3D);   // CRC Gia tri ban dau 0x6363    ???
 800704c:	213d      	movs	r1, #61	; 0x3d
 800704e:	2011      	movs	r0, #17
 8007050:	f7ff ff3a 	bl	8006ec8 <Write_MFRC522>

    // ClearBitMask(Status2Reg, 0x08);       //MFCrypto1On=0
    // Write_MFRC522(RxSelReg, 0x86);        //RxWait = RxSelReg[5..0]
    // Write_MFRC522(RFCfgReg, 0x7F);        //RxGain = 48dB

    AntennaOn(); // Mo Anten
 8007054:	f7ff ffc5 	bl	8006fe2 <AntennaOn>
}
 8007058:	bf00      	nop
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40010c00 	.word	0x40010c00
 8007060:	40010800 	.word	0x40010800

08007064 <MFRC522_ToCard>:
 *           backData--Du lieu nhan duoc tro lai
 *           backLen--Tra ve do dai bit cua du lieu
 * Tra ve: MI_OK neu thanh cong
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, unsigned int *backLen)
{
 8007064:	b590      	push	{r4, r7, lr}
 8007066:	b089      	sub	sp, #36	; 0x24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
 8007072:	4613      	mov	r3, r2
 8007074:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8007076:	2302      	movs	r3, #2
 8007078:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800707a:	2300      	movs	r3, #0
 800707c:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800707e:	2300      	movs	r3, #0
 8007080:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    unsigned int i;

    switch (command)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b0c      	cmp	r3, #12
 8007086:	d007      	beq.n	8007098 <MFRC522_ToCard+0x34>
 8007088:	2b0e      	cmp	r3, #14
 800708a:	d000      	beq.n	800708e <MFRC522_ToCard+0x2a>
        irqEn = 0x77;
        waitIRq = 0x30;
        break;
    }
    default:
        break;
 800708c:	e009      	b.n	80070a2 <MFRC522_ToCard+0x3e>
        irqEn = 0x12;
 800708e:	2312      	movs	r3, #18
 8007090:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8007092:	2310      	movs	r3, #16
 8007094:	777b      	strb	r3, [r7, #29]
        break;
 8007096:	e004      	b.n	80070a2 <MFRC522_ToCard+0x3e>
        irqEn = 0x77;
 8007098:	2377      	movs	r3, #119	; 0x77
 800709a:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	777b      	strb	r3, [r7, #29]
        break;
 80070a0:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn | 0x80); // Yeu cau ngat
 80070a2:	7fbb      	ldrb	r3, [r7, #30]
 80070a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	2002      	movs	r0, #2
 80070ae:	f7ff ff0b 	bl	8006ec8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);          // Clear tat ca cac bit yeu cau ngat
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	2004      	movs	r0, #4
 80070b6:	f7ff ff74 	bl	8006fa2 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);          // FlushBuffer=1, Khoi tao FIFO
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	200a      	movs	r0, #10
 80070be:	f7ff ff55 	bl	8006f6c <SetBitMask>

    Write_MFRC522(CommandReg, PCD_IDLE); // NO action; Huy bo lenh hien hanh  ???
 80070c2:	2100      	movs	r1, #0
 80070c4:	2001      	movs	r0, #1
 80070c6:	f7ff feff 	bl	8006ec8 <Write_MFRC522>

    // Ghi du lieu vao FIFO
    for (i = 0; i < sendLen; i++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	e00a      	b.n	80070e6 <MFRC522_ToCard+0x82>
    {
        Write_MFRC522(FIFODataReg, sendData[i]);
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	4413      	add	r3, r2
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	2009      	movs	r0, #9
 80070dc:	f7ff fef4 	bl	8006ec8 <Write_MFRC522>
    for (i = 0; i < sendLen; i++)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	3301      	adds	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3f0      	bcc.n	80070d0 <MFRC522_ToCard+0x6c>
    }

    // chay
    Write_MFRC522(CommandReg, command);
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	4619      	mov	r1, r3
 80070f2:	2001      	movs	r0, #1
 80070f4:	f7ff fee8 	bl	8006ec8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b0c      	cmp	r3, #12
 80070fc:	d103      	bne.n	8007106 <MFRC522_ToCard+0xa2>
    {
        SetBitMask(BitFramingReg, 0x80); // StartSend=1,transmission of data starts
 80070fe:	2180      	movs	r1, #128	; 0x80
 8007100:	200d      	movs	r0, #13
 8007102:	f7ff ff33 	bl	8006f6c <SetBitMask>
    }

    // Cho doi de nhan duoc du lieu day du
    i = 2000; // i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8007106:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800710a:	61bb      	str	r3, [r7, #24]
    do
    {
        // CommIrqReg[7..0]
        // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800710c:	2004      	movs	r0, #4
 800710e:	f7ff ff03 	bl	8006f18 <Read_MFRC522>
 8007112:	4603      	mov	r3, r0
 8007114:	773b      	strb	r3, [r7, #28]
        i--;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	3b01      	subs	r3, #1
 800711a:	61bb      	str	r3, [r7, #24]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <MFRC522_ToCard+0xd4>
 8007122:	7f3b      	ldrb	r3, [r7, #28]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <MFRC522_ToCard+0xd4>
 800712c:	7f3a      	ldrb	r2, [r7, #28]
 800712e:	7f7b      	ldrb	r3, [r7, #29]
 8007130:	4013      	ands	r3, r2
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0e9      	beq.n	800710c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80); // StartSend=0
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	200d      	movs	r0, #13
 800713c:	f7ff ff31 	bl	8006fa2 <ClearBitMask>

    if (i != 0)
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d052      	beq.n	80071ec <MFRC522_ToCard+0x188>
    {
        if (!(Read_MFRC522(ErrorReg) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 8007146:	2006      	movs	r0, #6
 8007148:	f7ff fee6 	bl	8006f18 <Read_MFRC522>
 800714c:	4603      	mov	r3, r0
 800714e:	f003 031b 	and.w	r3, r3, #27
 8007152:	2b00      	cmp	r3, #0
 8007154:	d148      	bne.n	80071e8 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800715a:	7f3a      	ldrb	r2, [r7, #28]
 800715c:	7fbb      	ldrb	r3, [r7, #30]
 800715e:	4013      	ands	r3, r2
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <MFRC522_ToCard+0x10a>
            {
                status = MI_NOTAGERR; //??
 800716a:	2301      	movs	r3, #1
 800716c:	77fb      	strb	r3, [r7, #31]
            }

            if (command == PCD_TRANSCEIVE)
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d13b      	bne.n	80071ec <MFRC522_ToCard+0x188>
            {
                n = Read_MFRC522(FIFOLevelReg);
 8007174:	200a      	movs	r0, #10
 8007176:	f7ff fecf 	bl	8006f18 <Read_MFRC522>
 800717a:	4603      	mov	r3, r0
 800717c:	773b      	strb	r3, [r7, #28]
                lastBits = Read_MFRC522(ControlReg) & 0x07;
 800717e:	200c      	movs	r0, #12
 8007180:	f7ff feca 	bl	8006f18 <Read_MFRC522>
 8007184:	4603      	mov	r3, r0
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d008      	beq.n	80071a4 <MFRC522_ToCard+0x140>
                {
                    *backLen = (n - 1) * 8 + lastBits;
 8007192:	7f3b      	ldrb	r3, [r7, #28]
 8007194:	3b01      	subs	r3, #1
 8007196:	00da      	lsls	r2, r3, #3
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	4413      	add	r3, r2
 800719c:	461a      	mov	r2, r3
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e004      	b.n	80071ae <MFRC522_ToCard+0x14a>
                }
                else
                {
                    *backLen = n * 8;
 80071a4:	7f3b      	ldrb	r3, [r7, #28]
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	461a      	mov	r2, r3
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	601a      	str	r2, [r3, #0]
                }

                if (n == 0)
 80071ae:	7f3b      	ldrb	r3, [r7, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <MFRC522_ToCard+0x154>
                {
                    n = 1;
 80071b4:	2301      	movs	r3, #1
 80071b6:	773b      	strb	r3, [r7, #28]
                }
                if (n > MAX_LEN)
 80071b8:	7f3b      	ldrb	r3, [r7, #28]
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d901      	bls.n	80071c2 <MFRC522_ToCard+0x15e>
                {
                    n = MAX_LEN;
 80071be:	2310      	movs	r3, #16
 80071c0:	773b      	strb	r3, [r7, #28]
                }

                // Doc FIFO trong cac du lieu nhan duoc
                for (i = 0; i < n; i++)
 80071c2:	2300      	movs	r3, #0
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e00a      	b.n	80071de <MFRC522_ToCard+0x17a>
                {
                    backData[i] = Read_MFRC522(FIFODataReg);
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	18d4      	adds	r4, r2, r3
 80071ce:	2009      	movs	r0, #9
 80071d0:	f7ff fea2 	bl	8006f18 <Read_MFRC522>
 80071d4:	4603      	mov	r3, r0
 80071d6:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	3301      	adds	r3, #1
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	7f3b      	ldrb	r3, [r7, #28]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d3f0      	bcc.n	80071c8 <MFRC522_ToCard+0x164>
 80071e6:	e001      	b.n	80071ec <MFRC522_ToCard+0x188>
                }
            }
        }
        else
        {
            status = MI_ERR;
 80071e8:	2302      	movs	r3, #2
 80071ea:	77fb      	strb	r3, [r7, #31]
    }

    // SetBitMask(ControlReg,0x80);           //timer stops
    // Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80071ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3724      	adds	r7, #36	; 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}

080071f6 <MFRC522_Request>:
 *              0x0800 = Mifare_Pro(X)
 *              0x4403 = Mifare_DESFire
 * Return: MI_OK neu thanh cong
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af02      	add	r7, sp, #8
 80071fc:	4603      	mov	r3, r0
 80071fe:	6039      	str	r1, [r7, #0]
 8007200:	71fb      	strb	r3, [r7, #7]
    uchar status;
    unsigned int backBits; // cac bit du lieu nhan duoc

    Write_MFRC522(BitFramingReg, 0x07); // TxLastBists = BitFramingReg[2..0] ???
 8007202:	2107      	movs	r1, #7
 8007204:	200d      	movs	r0, #13
 8007206:	f7ff fe5f 	bl	8006ec8 <Write_MFRC522>

    TagType[0] = reqMode;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	79fa      	ldrb	r2, [r7, #7]
 800720e:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	200c      	movs	r0, #12
 800721e:	f7ff ff21 	bl	8007064 <MFRC522_ToCard>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (backBits != 0x10))
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <MFRC522_Request+0x3c>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b10      	cmp	r3, #16
 8007230:	d001      	beq.n	8007236 <MFRC522_Request+0x40>
    {
        status = MI_ERR;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <MFRC522_Anticoll>:
 * Chuc nang:Phat hien chong va cham, chon the va doc so serial the
 * Input:serNum--Tra ve serial the 4 byte, byte 5 la ma checksum
 * Tra ve: MI_OK neu thanh cong
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af02      	add	r7, sp, #8
 8007246:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
    uchar serNumCheck = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	737b      	strb	r3, [r7, #13]
    unsigned int unLen;

    // ClearBitMask(Status2Reg, 0x08);       //TempSensclear
    // ClearBitMask(CollReg,0x80);           //ValuesAfterColl
    Write_MFRC522(BitFramingReg, 0x00); // TxLastBists = BitFramingReg[2..0]
 800724c:	2100      	movs	r1, #0
 800724e:	200d      	movs	r0, #13
 8007250:	f7ff fe3a 	bl	8006ec8 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2293      	movs	r2, #147	; 0x93
 8007258:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3301      	adds	r3, #1
 800725e:	2220      	movs	r2, #32
 8007260:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8007262:	f107 0308 	add.w	r3, r7, #8
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	200c      	movs	r0, #12
 8007270:	f7ff fef8 	bl	8007064 <MFRC522_ToCard>
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d118      	bne.n	80072b0 <MFRC522_Anticoll+0x70>
    {
        // Kiem tra so serial the
        for (i = 0; i < 4; i++)
 800727e:	2300      	movs	r3, #0
 8007280:	73bb      	strb	r3, [r7, #14]
 8007282:	e009      	b.n	8007298 <MFRC522_Anticoll+0x58>
        {
            serNumCheck ^= serNum[i];
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4413      	add	r3, r2
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	7b7b      	ldrb	r3, [r7, #13]
 800728e:	4053      	eors	r3, r2
 8007290:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	3301      	adds	r3, #1
 8007296:	73bb      	strb	r3, [r7, #14]
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d9f2      	bls.n	8007284 <MFRC522_Anticoll+0x44>
        }
        if (serNumCheck != serNum[i])
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	7b7a      	ldrb	r2, [r7, #13]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d001      	beq.n	80072b0 <MFRC522_Anticoll+0x70>
        {
            status = MI_ERR;
 80072ac:	2302      	movs	r3, #2
 80072ae:	73fb      	strb	r3, [r7, #15]
        }
    }

    // SetBitMask(CollReg, 0x80);        //ValuesAfterColl=1

    return status;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <SendFPHeader>:
uint8_t FPGetNumberOfFinger[6] = {0x01, 0x00, 0x03, 0x1D, 0x00, 0x21};
uint8_t CurrentNumberFinger;
uint8_t IDFromFinger;

void SendFPHeader()
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPHeader, 6, 1000);
 80072c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072c4:	2206      	movs	r2, #6
 80072c6:	4903      	ldr	r1, [pc, #12]	; (80072d4 <SendFPHeader+0x18>)
 80072c8:	4803      	ldr	r0, [pc, #12]	; (80072d8 <SendFPHeader+0x1c>)
 80072ca:	f7fb fce0 	bl	8002c8e <HAL_UART_Transmit>
}
 80072ce:	bf00      	nop
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000030 	.word	0x20000030
 80072d8:	20003290 	.word	0x20003290

080072dc <SendFPGetImage>:

void SendFPGetImage()
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPGetImage, 6, 1000);
 80072e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e4:	2206      	movs	r2, #6
 80072e6:	4903      	ldr	r1, [pc, #12]	; (80072f4 <SendFPGetImage+0x18>)
 80072e8:	4803      	ldr	r0, [pc, #12]	; (80072f8 <SendFPGetImage+0x1c>)
 80072ea:	f7fb fcd0 	bl	8002c8e <HAL_UART_Transmit>
}
 80072ee:	bf00      	nop
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000038 	.word	0x20000038
 80072f8:	20003290 	.word	0x20003290

080072fc <SendFPCreateCharFile1>:

void SendFPCreateCharFile1()
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPCreateCharFile1, 7, 1000);
 8007300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007304:	2207      	movs	r2, #7
 8007306:	4903      	ldr	r1, [pc, #12]	; (8007314 <SendFPCreateCharFile1+0x18>)
 8007308:	4803      	ldr	r0, [pc, #12]	; (8007318 <SendFPCreateCharFile1+0x1c>)
 800730a:	f7fb fcc0 	bl	8002c8e <HAL_UART_Transmit>
}
 800730e:	bf00      	nop
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000040 	.word	0x20000040
 8007318:	20003290 	.word	0x20003290

0800731c <SendFPCreateCharFile2>:

void SendFPCreateCharFile2()
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPCreateCharFile2, 7, 1000);
 8007320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007324:	2207      	movs	r2, #7
 8007326:	4903      	ldr	r1, [pc, #12]	; (8007334 <SendFPCreateCharFile2+0x18>)
 8007328:	4803      	ldr	r0, [pc, #12]	; (8007338 <SendFPCreateCharFile2+0x1c>)
 800732a:	f7fb fcb0 	bl	8002c8e <HAL_UART_Transmit>
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000048 	.word	0x20000048
 8007338:	20003290 	.word	0x20003290

0800733c <SendFPCreateTemplate>:

void SendFPCreateTemplate()
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPCreateTemplate, 6, 1000);
 8007340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007344:	2206      	movs	r2, #6
 8007346:	4903      	ldr	r1, [pc, #12]	; (8007354 <SendFPCreateTemplate+0x18>)
 8007348:	4803      	ldr	r0, [pc, #12]	; (8007358 <SendFPCreateTemplate+0x1c>)
 800734a:	f7fb fca0 	bl	8002c8e <HAL_UART_Transmit>
}
 800734e:	bf00      	nop
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000050 	.word	0x20000050
 8007358:	20003290 	.word	0x20003290

0800735c <SendFPDSearchFinger>:
{
    HAL_UART_Transmit(&huart1, FPDeleteAllFinger, 6, 1000);
}

void SendFPDSearchFinger()
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPSearchFinger, 11, 1000);
 8007360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007364:	220b      	movs	r2, #11
 8007366:	4903      	ldr	r1, [pc, #12]	; (8007374 <SendFPDSearchFinger+0x18>)
 8007368:	4803      	ldr	r0, [pc, #12]	; (8007378 <SendFPDSearchFinger+0x1c>)
 800736a:	f7fb fc90 	bl	8002c8e <HAL_UART_Transmit>
}
 800736e:	bf00      	nop
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000058 	.word	0x20000058
 8007378:	20003290 	.word	0x20003290

0800737c <SendFGetNumberOfFinger>:

void SendFGetNumberOfFinger()
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart1, FPGetNumberOfFinger, 6, 1000);
 8007380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007384:	2206      	movs	r2, #6
 8007386:	4903      	ldr	r1, [pc, #12]	; (8007394 <SendFGetNumberOfFinger+0x18>)
 8007388:	4803      	ldr	r0, [pc, #12]	; (8007398 <SendFGetNumberOfFinger+0x1c>)
 800738a:	f7fb fc80 	bl	8002c8e <HAL_UART_Transmit>
}
 800738e:	bf00      	nop
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000064 	.word	0x20000064
 8007398:	20003290 	.word	0x20003290

0800739c <SendStoreFinger>:

void SendStoreFinger(uint16_t IDStore)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	80fb      	strh	r3, [r7, #6]
    uint16_t Sum = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	82fb      	strh	r3, [r7, #22]
    uint8_t DataSend[9] = {0};
 80073aa:	f107 030c 	add.w	r3, r7, #12
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	605a      	str	r2, [r3, #4]
 80073b4:	721a      	strb	r2, [r3, #8]

    DataSend[0] = 0x01;
 80073b6:	2301      	movs	r3, #1
 80073b8:	733b      	strb	r3, [r7, #12]
    Sum = Sum + DataSend[0];
 80073ba:	7b3b      	ldrb	r3, [r7, #12]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	8afb      	ldrh	r3, [r7, #22]
 80073c0:	4413      	add	r3, r2
 80073c2:	82fb      	strh	r3, [r7, #22]
    DataSend[1] = 0x00;
 80073c4:	2300      	movs	r3, #0
 80073c6:	737b      	strb	r3, [r7, #13]
    Sum = Sum + DataSend[1];
 80073c8:	7b7b      	ldrb	r3, [r7, #13]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	8afb      	ldrh	r3, [r7, #22]
 80073ce:	4413      	add	r3, r2
 80073d0:	82fb      	strh	r3, [r7, #22]
    DataSend[2] = 0x06;
 80073d2:	2306      	movs	r3, #6
 80073d4:	73bb      	strb	r3, [r7, #14]
    Sum = Sum + DataSend[2];
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	b29a      	uxth	r2, r3
 80073da:	8afb      	ldrh	r3, [r7, #22]
 80073dc:	4413      	add	r3, r2
 80073de:	82fb      	strh	r3, [r7, #22]
    DataSend[3] = 0x06;
 80073e0:	2306      	movs	r3, #6
 80073e2:	73fb      	strb	r3, [r7, #15]
    Sum = Sum + DataSend[3];
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	8afb      	ldrh	r3, [r7, #22]
 80073ea:	4413      	add	r3, r2
 80073ec:	82fb      	strh	r3, [r7, #22]
    DataSend[4] = 0x01;
 80073ee:	2301      	movs	r3, #1
 80073f0:	743b      	strb	r3, [r7, #16]
    Sum = Sum + DataSend[4];
 80073f2:	7c3b      	ldrb	r3, [r7, #16]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	8afb      	ldrh	r3, [r7, #22]
 80073f8:	4413      	add	r3, r2
 80073fa:	82fb      	strh	r3, [r7, #22]
    DataSend[5] = (uint8_t)(IDStore >> 8);
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	b29b      	uxth	r3, r3
 8007402:	b2db      	uxtb	r3, r3
 8007404:	747b      	strb	r3, [r7, #17]
    Sum = Sum + DataSend[5];
 8007406:	7c7b      	ldrb	r3, [r7, #17]
 8007408:	b29a      	uxth	r2, r3
 800740a:	8afb      	ldrh	r3, [r7, #22]
 800740c:	4413      	add	r3, r2
 800740e:	82fb      	strh	r3, [r7, #22]
    DataSend[6] = (uint8_t)(IDStore & 0xFF);
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	74bb      	strb	r3, [r7, #18]
    Sum = Sum + DataSend[6];
 8007416:	7cbb      	ldrb	r3, [r7, #18]
 8007418:	b29a      	uxth	r2, r3
 800741a:	8afb      	ldrh	r3, [r7, #22]
 800741c:	4413      	add	r3, r2
 800741e:	82fb      	strh	r3, [r7, #22]
    DataSend[7] = (uint8_t)(Sum >> 8);
 8007420:	8afb      	ldrh	r3, [r7, #22]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	b29b      	uxth	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	74fb      	strb	r3, [r7, #19]
    DataSend[8] = (uint8_t)(Sum & 0xFF);
 800742a:	8afb      	ldrh	r3, [r7, #22]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	753b      	strb	r3, [r7, #20]
    HAL_UART_Transmit(&huart1, DataSend, 9, 1000);
 8007430:	f107 010c 	add.w	r1, r7, #12
 8007434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007438:	2209      	movs	r2, #9
 800743a:	4803      	ldr	r0, [pc, #12]	; (8007448 <SendStoreFinger+0xac>)
 800743c:	f7fb fc27 	bl	8002c8e <HAL_UART_Transmit>
}
 8007440:	bf00      	nop
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20003290 	.word	0x20003290

0800744c <CheckFPRespsone>:
    DataSend[9] = (uint8_t)(Sum & 0xFF);
    HAL_UART_Transmit(&huart1, DataSend, 10, 1000);
}

uint8_t CheckFPRespsone(uint8_t MaxRead)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08c      	sub	sp, #48	; 0x30
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
    uint8_t ByteCount = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t FPRXData[20] = {0xFE};
 800745c:	f107 0310 	add.w	r3, r7, #16
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	609a      	str	r2, [r3, #8]
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	611a      	str	r2, [r3, #16]
 800746c:	23fe      	movs	r3, #254	; 0xfe
 800746e:	743b      	strb	r3, [r7, #16]
    uint8_t UARTData[1] = {0};
 8007470:	2300      	movs	r3, #0
 8007472:	733b      	strb	r3, [r7, #12]
    uint32_t TimeOut = HAL_GetTick();
 8007474:	f7f8 fe94 	bl	80001a0 <HAL_GetTick>
 8007478:	62b8      	str	r0, [r7, #40]	; 0x28
    uint8_t Result;
    IDFromFinger = 0xFF;
 800747a:	4b25      	ldr	r3, [pc, #148]	; (8007510 <CheckFPRespsone+0xc4>)
 800747c:	22ff      	movs	r2, #255	; 0xff
 800747e:	701a      	strb	r2, [r3, #0]
    while ((HAL_GetTick() - TimeOut < 1000) && ByteCount < MaxRead) // time out is 1000 ms
 8007480:	e017      	b.n	80074b2 <CheckFPRespsone+0x66>
    {
        if (HAL_UART_Receive(&huart1, (uint8_t *)UARTData, 1, 1000) == HAL_OK)
 8007482:	f107 010c 	add.w	r1, r7, #12
 8007486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800748a:	2201      	movs	r2, #1
 800748c:	4821      	ldr	r0, [pc, #132]	; (8007514 <CheckFPRespsone+0xc8>)
 800748e:	f7fb fc90 	bl	8002db2 <HAL_UART_Receive>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10c      	bne.n	80074b2 <CheckFPRespsone+0x66>
        {
            FPRXData[ByteCount] = UARTData[0];
 8007498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800749c:	7b3a      	ldrb	r2, [r7, #12]
 800749e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80074a2:	440b      	add	r3, r1
 80074a4:	f803 2c20 	strb.w	r2, [r3, #-32]
            ByteCount++;
 80074a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ac:	3301      	adds	r3, #1
 80074ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((HAL_GetTick() - TimeOut < 1000) && ByteCount < MaxRead) // time out is 1000 ms
 80074b2:	f7f8 fe75 	bl	80001a0 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074c0:	d204      	bcs.n	80074cc <CheckFPRespsone+0x80>
 80074c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3da      	bcc.n	8007482 <CheckFPRespsone+0x36>
        }
    }

    if (ByteCount == 0)
 80074cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <CheckFPRespsone+0x94>
    {
        Result = FP_ERROR;
 80074d4:	23fe      	movs	r3, #254	; 0xfe
 80074d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return Result;
 80074da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074de:	e012      	b.n	8007506 <CheckFPRespsone+0xba>
    }
    else if (ByteCount < MaxRead)
 80074e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d205      	bcs.n	80074f6 <CheckFPRespsone+0xaa>
    {
        Result = FP_ERROR;
 80074ea:	23fe      	movs	r3, #254	; 0xfe
 80074ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return Result;
 80074f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f4:	e007      	b.n	8007506 <CheckFPRespsone+0xba>
    }
    else // vail data return
    {
        IDFromFinger = FPRXData[11];
 80074f6:	7efa      	ldrb	r2, [r7, #27]
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <CheckFPRespsone+0xc4>)
 80074fa:	701a      	strb	r2, [r3, #0]
        Result = FPRXData[9];
 80074fc:	7e7b      	ldrb	r3, [r7, #25]
 80074fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return Result;
 8007502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    }
}
 8007506:	4618      	mov	r0, r3
 8007508:	3730      	adds	r7, #48	; 0x30
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200032f4 	.word	0x200032f4
 8007514:	20003290 	.word	0x20003290

08007518 <GetNumberOfFinger>:

uint8_t GetNumberOfFinger()
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
    uint8_t Result;
    SendFPHeader();
 800751e:	f7ff fecd 	bl	80072bc <SendFPHeader>
    SendFGetNumberOfFinger();
 8007522:	f7ff ff2b 	bl	800737c <SendFGetNumberOfFinger>
    Result = CheckFPRespsone(14);
 8007526:	200e      	movs	r0, #14
 8007528:	f7ff ff90 	bl	800744c <CheckFPRespsone>
 800752c:	4603      	mov	r3, r0
 800752e:	71fb      	strb	r3, [r7, #7]
    if (Result != FP_OK)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <GetNumberOfFinger+0x22>
        return 0xFF;
 8007536:	23ff      	movs	r3, #255	; 0xff
 8007538:	e001      	b.n	800753e <GetNumberOfFinger+0x26>

     return IDFromFinger;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <GetNumberOfFinger+0x30>)
 800753c:	781b      	ldrb	r3, [r3, #0]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200032f4 	.word	0x200032f4

0800754c <RegistryNewFinger>:

uint8_t RegistryNewFinger(uint16_t LocationID)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	80fb      	strh	r3, [r7, #6]

    uint8_t Result = FP_NOFINGER;
 8007556:	2302      	movs	r3, #2
 8007558:	73fb      	strb	r3, [r7, #15]
    uint32_t TimeOut = HAL_GetTick();
 800755a:	f7f8 fe21 	bl	80001a0 <HAL_GetTick>
 800755e:	60b8      	str	r0, [r7, #8]

    while (Result == FP_NOFINGER && (HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8007560:	e008      	b.n	8007574 <RegistryNewFinger+0x28>
    {

        SendFPHeader();
 8007562:	f7ff feab 	bl	80072bc <SendFPHeader>
        SendFPGetImage();
 8007566:	f7ff feb9 	bl	80072dc <SendFPGetImage>
        Result = CheckFPRespsone(12);
 800756a:	200c      	movs	r0, #12
 800756c:	f7ff ff6e 	bl	800744c <CheckFPRespsone>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
    while (Result == FP_NOFINGER && (HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d108      	bne.n	800758c <RegistryNewFinger+0x40>
 800757a:	f7f8 fe11 	bl	80001a0 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	f241 3287 	movw	r2, #4999	; 0x1387
 8007588:	4293      	cmp	r3, r2
 800758a:	d9ea      	bls.n	8007562 <RegistryNewFinger+0x16>
    }
    if (Result != FP_OK)
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <RegistryNewFinger+0x4a>
        return FP_ERROR;
 8007592:	23fe      	movs	r3, #254	; 0xfe
 8007594:	e063      	b.n	800765e <RegistryNewFinger+0x112>
    // continue if detect finger;
    SendFPHeader();
 8007596:	f7ff fe91 	bl	80072bc <SendFPHeader>
    SendFPCreateCharFile1();
 800759a:	f7ff feaf 	bl	80072fc <SendFPCreateCharFile1>
    Result = CheckFPRespsone(12);
 800759e:	200c      	movs	r0, #12
 80075a0:	f7ff ff54 	bl	800744c <CheckFPRespsone>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
    if (Result != FP_OK)
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <RegistryNewFinger+0x66>
        return FP_ERROR;
 80075ae:	23fe      	movs	r3, #254	; 0xfe
 80075b0:	e055      	b.n	800765e <RegistryNewFinger+0x112>

    // second get image

    HAL_Delay(2000);
 80075b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80075b6:	f7f8 fdfd 	bl	80001b4 <HAL_Delay>
    Result = FP_NOFINGER;
 80075ba:	2302      	movs	r3, #2
 80075bc:	73fb      	strb	r3, [r7, #15]
    TimeOut = HAL_GetTick();
 80075be:	f7f8 fdef 	bl	80001a0 <HAL_GetTick>
 80075c2:	60b8      	str	r0, [r7, #8]

    while (Result == FP_NOFINGER && (HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 80075c4:	e008      	b.n	80075d8 <RegistryNewFinger+0x8c>
    {

        SendFPHeader();
 80075c6:	f7ff fe79 	bl	80072bc <SendFPHeader>
        SendFPGetImage();
 80075ca:	f7ff fe87 	bl	80072dc <SendFPGetImage>
        Result = CheckFPRespsone(12);
 80075ce:	200c      	movs	r0, #12
 80075d0:	f7ff ff3c 	bl	800744c <CheckFPRespsone>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]
    while (Result == FP_NOFINGER && (HAL_GetTick() - TimeOut < 5000)) // time out is 5000 ms
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d108      	bne.n	80075f0 <RegistryNewFinger+0xa4>
 80075de:	f7f8 fddf 	bl	80001a0 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	f241 3287 	movw	r2, #4999	; 0x1387
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d9ea      	bls.n	80075c6 <RegistryNewFinger+0x7a>
    }
    if (Result != FP_OK)
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <RegistryNewFinger+0xae>
        return FP_ERROR;
 80075f6:	23fe      	movs	r3, #254	; 0xfe
 80075f8:	e031      	b.n	800765e <RegistryNewFinger+0x112>

    // continue if detect finger;
    SendFPHeader();
 80075fa:	f7ff fe5f 	bl	80072bc <SendFPHeader>
    SendFPCreateCharFile2();
 80075fe:	f7ff fe8d 	bl	800731c <SendFPCreateCharFile2>
    Result = CheckFPRespsone(12);
 8007602:	200c      	movs	r0, #12
 8007604:	f7ff ff22 	bl	800744c <CheckFPRespsone>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]
    if (Result != FP_OK)
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <RegistryNewFinger+0xca>
        return FP_ERROR;
 8007612:	23fe      	movs	r3, #254	; 0xfe
 8007614:	e023      	b.n	800765e <RegistryNewFinger+0x112>

    // Compare finger, create template
    SendFPHeader();
 8007616:	f7ff fe51 	bl	80072bc <SendFPHeader>
    SendFPCreateTemplate();
 800761a:	f7ff fe8f 	bl	800733c <SendFPCreateTemplate>
    Result = CheckFPRespsone(12);
 800761e:	200c      	movs	r0, #12
 8007620:	f7ff ff14 	bl	800744c <CheckFPRespsone>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
    if (Result == FP_FINGER_NOTMATCH)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b0a      	cmp	r3, #10
 800762c:	d101      	bne.n	8007632 <RegistryNewFinger+0xe6>
    {

        return FP_FINGER_NOTMATCH;
 800762e:	230a      	movs	r3, #10
 8007630:	e015      	b.n	800765e <RegistryNewFinger+0x112>
    }
    else if (Result != FP_OK)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <RegistryNewFinger+0xf0>
        return FP_ERROR;
 8007638:	23fe      	movs	r3, #254	; 0xfe
 800763a:	e010      	b.n	800765e <RegistryNewFinger+0x112>

    // save finger
    SendFPHeader();
 800763c:	f7ff fe3e 	bl	80072bc <SendFPHeader>
    SendStoreFinger(LocationID);
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff feaa 	bl	800739c <SendStoreFinger>
    Result = CheckFPRespsone(12);
 8007648:	200c      	movs	r0, #12
 800764a:	f7ff feff 	bl	800744c <CheckFPRespsone>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
    if (Result != FP_OK)
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <RegistryNewFinger+0x110>
        return FP_ERROR;
 8007658:	23fe      	movs	r3, #254	; 0xfe
 800765a:	e000      	b.n	800765e <RegistryNewFinger+0x112>
    else
    {
        return FP_OK;
 800765c:	2300      	movs	r3, #0
    }
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <__errno>:
 8007668:	4b01      	ldr	r3, [pc, #4]	; (8007670 <__errno+0x8>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	2000006c 	.word	0x2000006c

08007674 <__libc_init_array>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	2500      	movs	r5, #0
 8007678:	4e0c      	ldr	r6, [pc, #48]	; (80076ac <__libc_init_array+0x38>)
 800767a:	4c0d      	ldr	r4, [pc, #52]	; (80076b0 <__libc_init_array+0x3c>)
 800767c:	1ba4      	subs	r4, r4, r6
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	42a5      	cmp	r5, r4
 8007682:	d109      	bne.n	8007698 <__libc_init_array+0x24>
 8007684:	f000 fc36 	bl	8007ef4 <_init>
 8007688:	2500      	movs	r5, #0
 800768a:	4e0a      	ldr	r6, [pc, #40]	; (80076b4 <__libc_init_array+0x40>)
 800768c:	4c0a      	ldr	r4, [pc, #40]	; (80076b8 <__libc_init_array+0x44>)
 800768e:	1ba4      	subs	r4, r4, r6
 8007690:	10a4      	asrs	r4, r4, #2
 8007692:	42a5      	cmp	r5, r4
 8007694:	d105      	bne.n	80076a2 <__libc_init_array+0x2e>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800769c:	4798      	blx	r3
 800769e:	3501      	adds	r5, #1
 80076a0:	e7ee      	b.n	8007680 <__libc_init_array+0xc>
 80076a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076a6:	4798      	blx	r3
 80076a8:	3501      	adds	r5, #1
 80076aa:	e7f2      	b.n	8007692 <__libc_init_array+0x1e>
 80076ac:	0800808c 	.word	0x0800808c
 80076b0:	0800808c 	.word	0x0800808c
 80076b4:	0800808c 	.word	0x0800808c
 80076b8:	08008090 	.word	0x08008090

080076bc <memcpy>:
 80076bc:	b510      	push	{r4, lr}
 80076be:	1e43      	subs	r3, r0, #1
 80076c0:	440a      	add	r2, r1
 80076c2:	4291      	cmp	r1, r2
 80076c4:	d100      	bne.n	80076c8 <memcpy+0xc>
 80076c6:	bd10      	pop	{r4, pc}
 80076c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d0:	e7f7      	b.n	80076c2 <memcpy+0x6>

080076d2 <memset>:
 80076d2:	4603      	mov	r3, r0
 80076d4:	4402      	add	r2, r0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d100      	bne.n	80076dc <memset+0xa>
 80076da:	4770      	bx	lr
 80076dc:	f803 1b01 	strb.w	r1, [r3], #1
 80076e0:	e7f9      	b.n	80076d6 <memset+0x4>
	...

080076e4 <siprintf>:
 80076e4:	b40e      	push	{r1, r2, r3}
 80076e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076ea:	b500      	push	{lr}
 80076ec:	b09c      	sub	sp, #112	; 0x70
 80076ee:	ab1d      	add	r3, sp, #116	; 0x74
 80076f0:	9002      	str	r0, [sp, #8]
 80076f2:	9006      	str	r0, [sp, #24]
 80076f4:	9107      	str	r1, [sp, #28]
 80076f6:	9104      	str	r1, [sp, #16]
 80076f8:	4808      	ldr	r0, [pc, #32]	; (800771c <siprintf+0x38>)
 80076fa:	4909      	ldr	r1, [pc, #36]	; (8007720 <siprintf+0x3c>)
 80076fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007700:	9105      	str	r1, [sp, #20]
 8007702:	6800      	ldr	r0, [r0, #0]
 8007704:	a902      	add	r1, sp, #8
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	f000 f866 	bl	80077d8 <_svfiprintf_r>
 800770c:	2200      	movs	r2, #0
 800770e:	9b02      	ldr	r3, [sp, #8]
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	b01c      	add	sp, #112	; 0x70
 8007714:	f85d eb04 	ldr.w	lr, [sp], #4
 8007718:	b003      	add	sp, #12
 800771a:	4770      	bx	lr
 800771c:	2000006c 	.word	0x2000006c
 8007720:	ffff0208 	.word	0xffff0208

08007724 <__ssputs_r>:
 8007724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	688e      	ldr	r6, [r1, #8]
 800772a:	4682      	mov	sl, r0
 800772c:	429e      	cmp	r6, r3
 800772e:	460c      	mov	r4, r1
 8007730:	4690      	mov	r8, r2
 8007732:	4699      	mov	r9, r3
 8007734:	d837      	bhi.n	80077a6 <__ssputs_r+0x82>
 8007736:	898a      	ldrh	r2, [r1, #12]
 8007738:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800773c:	d031      	beq.n	80077a2 <__ssputs_r+0x7e>
 800773e:	2302      	movs	r3, #2
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	6909      	ldr	r1, [r1, #16]
 8007744:	1a6f      	subs	r7, r5, r1
 8007746:	6965      	ldr	r5, [r4, #20]
 8007748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800774c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007750:	f109 0301 	add.w	r3, r9, #1
 8007754:	443b      	add	r3, r7
 8007756:	429d      	cmp	r5, r3
 8007758:	bf38      	it	cc
 800775a:	461d      	movcc	r5, r3
 800775c:	0553      	lsls	r3, r2, #21
 800775e:	d530      	bpl.n	80077c2 <__ssputs_r+0x9e>
 8007760:	4629      	mov	r1, r5
 8007762:	f000 fb2d 	bl	8007dc0 <_malloc_r>
 8007766:	4606      	mov	r6, r0
 8007768:	b950      	cbnz	r0, 8007780 <__ssputs_r+0x5c>
 800776a:	230c      	movs	r3, #12
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	f8ca 3000 	str.w	r3, [sl]
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007780:	463a      	mov	r2, r7
 8007782:	6921      	ldr	r1, [r4, #16]
 8007784:	f7ff ff9a 	bl	80076bc <memcpy>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	6126      	str	r6, [r4, #16]
 8007796:	443e      	add	r6, r7
 8007798:	6026      	str	r6, [r4, #0]
 800779a:	464e      	mov	r6, r9
 800779c:	6165      	str	r5, [r4, #20]
 800779e:	1bed      	subs	r5, r5, r7
 80077a0:	60a5      	str	r5, [r4, #8]
 80077a2:	454e      	cmp	r6, r9
 80077a4:	d900      	bls.n	80077a8 <__ssputs_r+0x84>
 80077a6:	464e      	mov	r6, r9
 80077a8:	4632      	mov	r2, r6
 80077aa:	4641      	mov	r1, r8
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	f000 faa1 	bl	8007cf4 <memmove>
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	2000      	movs	r0, #0
 80077b6:	1b9b      	subs	r3, r3, r6
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	441e      	add	r6, r3
 80077be:	6026      	str	r6, [r4, #0]
 80077c0:	e7dc      	b.n	800777c <__ssputs_r+0x58>
 80077c2:	462a      	mov	r2, r5
 80077c4:	f000 fb56 	bl	8007e74 <_realloc_r>
 80077c8:	4606      	mov	r6, r0
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d1e2      	bne.n	8007794 <__ssputs_r+0x70>
 80077ce:	6921      	ldr	r1, [r4, #16]
 80077d0:	4650      	mov	r0, sl
 80077d2:	f000 faa9 	bl	8007d28 <_free_r>
 80077d6:	e7c8      	b.n	800776a <__ssputs_r+0x46>

080077d8 <_svfiprintf_r>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	461d      	mov	r5, r3
 80077de:	898b      	ldrh	r3, [r1, #12]
 80077e0:	b09d      	sub	sp, #116	; 0x74
 80077e2:	061f      	lsls	r7, r3, #24
 80077e4:	4680      	mov	r8, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	d50f      	bpl.n	800780c <_svfiprintf_r+0x34>
 80077ec:	690b      	ldr	r3, [r1, #16]
 80077ee:	b96b      	cbnz	r3, 800780c <_svfiprintf_r+0x34>
 80077f0:	2140      	movs	r1, #64	; 0x40
 80077f2:	f000 fae5 	bl	8007dc0 <_malloc_r>
 80077f6:	6020      	str	r0, [r4, #0]
 80077f8:	6120      	str	r0, [r4, #16]
 80077fa:	b928      	cbnz	r0, 8007808 <_svfiprintf_r+0x30>
 80077fc:	230c      	movs	r3, #12
 80077fe:	f8c8 3000 	str.w	r3, [r8]
 8007802:	f04f 30ff 	mov.w	r0, #4294967295
 8007806:	e0c8      	b.n	800799a <_svfiprintf_r+0x1c2>
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	6163      	str	r3, [r4, #20]
 800780c:	2300      	movs	r3, #0
 800780e:	9309      	str	r3, [sp, #36]	; 0x24
 8007810:	2320      	movs	r3, #32
 8007812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007816:	2330      	movs	r3, #48	; 0x30
 8007818:	f04f 0b01 	mov.w	fp, #1
 800781c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007820:	9503      	str	r5, [sp, #12]
 8007822:	4637      	mov	r7, r6
 8007824:	463d      	mov	r5, r7
 8007826:	f815 3b01 	ldrb.w	r3, [r5], #1
 800782a:	b10b      	cbz	r3, 8007830 <_svfiprintf_r+0x58>
 800782c:	2b25      	cmp	r3, #37	; 0x25
 800782e:	d13e      	bne.n	80078ae <_svfiprintf_r+0xd6>
 8007830:	ebb7 0a06 	subs.w	sl, r7, r6
 8007834:	d00b      	beq.n	800784e <_svfiprintf_r+0x76>
 8007836:	4653      	mov	r3, sl
 8007838:	4632      	mov	r2, r6
 800783a:	4621      	mov	r1, r4
 800783c:	4640      	mov	r0, r8
 800783e:	f7ff ff71 	bl	8007724 <__ssputs_r>
 8007842:	3001      	adds	r0, #1
 8007844:	f000 80a4 	beq.w	8007990 <_svfiprintf_r+0x1b8>
 8007848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784a:	4453      	add	r3, sl
 800784c:	9309      	str	r3, [sp, #36]	; 0x24
 800784e:	783b      	ldrb	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 809d 	beq.w	8007990 <_svfiprintf_r+0x1b8>
 8007856:	2300      	movs	r3, #0
 8007858:	f04f 32ff 	mov.w	r2, #4294967295
 800785c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	9307      	str	r3, [sp, #28]
 8007864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007868:	931a      	str	r3, [sp, #104]	; 0x68
 800786a:	462f      	mov	r7, r5
 800786c:	2205      	movs	r2, #5
 800786e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007872:	4850      	ldr	r0, [pc, #320]	; (80079b4 <_svfiprintf_r+0x1dc>)
 8007874:	f000 fa30 	bl	8007cd8 <memchr>
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	b9d0      	cbnz	r0, 80078b2 <_svfiprintf_r+0xda>
 800787c:	06d9      	lsls	r1, r3, #27
 800787e:	bf44      	itt	mi
 8007880:	2220      	movmi	r2, #32
 8007882:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007886:	071a      	lsls	r2, r3, #28
 8007888:	bf44      	itt	mi
 800788a:	222b      	movmi	r2, #43	; 0x2b
 800788c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007890:	782a      	ldrb	r2, [r5, #0]
 8007892:	2a2a      	cmp	r2, #42	; 0x2a
 8007894:	d015      	beq.n	80078c2 <_svfiprintf_r+0xea>
 8007896:	462f      	mov	r7, r5
 8007898:	2000      	movs	r0, #0
 800789a:	250a      	movs	r5, #10
 800789c:	9a07      	ldr	r2, [sp, #28]
 800789e:	4639      	mov	r1, r7
 80078a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a4:	3b30      	subs	r3, #48	; 0x30
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d94d      	bls.n	8007946 <_svfiprintf_r+0x16e>
 80078aa:	b1b8      	cbz	r0, 80078dc <_svfiprintf_r+0x104>
 80078ac:	e00f      	b.n	80078ce <_svfiprintf_r+0xf6>
 80078ae:	462f      	mov	r7, r5
 80078b0:	e7b8      	b.n	8007824 <_svfiprintf_r+0x4c>
 80078b2:	4a40      	ldr	r2, [pc, #256]	; (80079b4 <_svfiprintf_r+0x1dc>)
 80078b4:	463d      	mov	r5, r7
 80078b6:	1a80      	subs	r0, r0, r2
 80078b8:	fa0b f000 	lsl.w	r0, fp, r0
 80078bc:	4318      	orrs	r0, r3
 80078be:	9004      	str	r0, [sp, #16]
 80078c0:	e7d3      	b.n	800786a <_svfiprintf_r+0x92>
 80078c2:	9a03      	ldr	r2, [sp, #12]
 80078c4:	1d11      	adds	r1, r2, #4
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	9103      	str	r1, [sp, #12]
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	db01      	blt.n	80078d2 <_svfiprintf_r+0xfa>
 80078ce:	9207      	str	r2, [sp, #28]
 80078d0:	e004      	b.n	80078dc <_svfiprintf_r+0x104>
 80078d2:	4252      	negs	r2, r2
 80078d4:	f043 0302 	orr.w	r3, r3, #2
 80078d8:	9207      	str	r2, [sp, #28]
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	783b      	ldrb	r3, [r7, #0]
 80078de:	2b2e      	cmp	r3, #46	; 0x2e
 80078e0:	d10c      	bne.n	80078fc <_svfiprintf_r+0x124>
 80078e2:	787b      	ldrb	r3, [r7, #1]
 80078e4:	2b2a      	cmp	r3, #42	; 0x2a
 80078e6:	d133      	bne.n	8007950 <_svfiprintf_r+0x178>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	3702      	adds	r7, #2
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	9203      	str	r2, [sp, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bfb8      	it	lt
 80078f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	4d2e      	ldr	r5, [pc, #184]	; (80079b8 <_svfiprintf_r+0x1e0>)
 80078fe:	2203      	movs	r2, #3
 8007900:	7839      	ldrb	r1, [r7, #0]
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f9e8 	bl	8007cd8 <memchr>
 8007908:	b138      	cbz	r0, 800791a <_svfiprintf_r+0x142>
 800790a:	2340      	movs	r3, #64	; 0x40
 800790c:	1b40      	subs	r0, r0, r5
 800790e:	fa03 f000 	lsl.w	r0, r3, r0
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	3701      	adds	r7, #1
 8007916:	4303      	orrs	r3, r0
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	7839      	ldrb	r1, [r7, #0]
 800791c:	2206      	movs	r2, #6
 800791e:	4827      	ldr	r0, [pc, #156]	; (80079bc <_svfiprintf_r+0x1e4>)
 8007920:	1c7e      	adds	r6, r7, #1
 8007922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007926:	f000 f9d7 	bl	8007cd8 <memchr>
 800792a:	2800      	cmp	r0, #0
 800792c:	d038      	beq.n	80079a0 <_svfiprintf_r+0x1c8>
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <_svfiprintf_r+0x1e8>)
 8007930:	bb13      	cbnz	r3, 8007978 <_svfiprintf_r+0x1a0>
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	3307      	adds	r3, #7
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	3308      	adds	r3, #8
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	444b      	add	r3, r9
 8007942:	9309      	str	r3, [sp, #36]	; 0x24
 8007944:	e76d      	b.n	8007822 <_svfiprintf_r+0x4a>
 8007946:	fb05 3202 	mla	r2, r5, r2, r3
 800794a:	2001      	movs	r0, #1
 800794c:	460f      	mov	r7, r1
 800794e:	e7a6      	b.n	800789e <_svfiprintf_r+0xc6>
 8007950:	2300      	movs	r3, #0
 8007952:	250a      	movs	r5, #10
 8007954:	4619      	mov	r1, r3
 8007956:	3701      	adds	r7, #1
 8007958:	9305      	str	r3, [sp, #20]
 800795a:	4638      	mov	r0, r7
 800795c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007960:	3a30      	subs	r2, #48	; 0x30
 8007962:	2a09      	cmp	r2, #9
 8007964:	d903      	bls.n	800796e <_svfiprintf_r+0x196>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0c8      	beq.n	80078fc <_svfiprintf_r+0x124>
 800796a:	9105      	str	r1, [sp, #20]
 800796c:	e7c6      	b.n	80078fc <_svfiprintf_r+0x124>
 800796e:	fb05 2101 	mla	r1, r5, r1, r2
 8007972:	2301      	movs	r3, #1
 8007974:	4607      	mov	r7, r0
 8007976:	e7f0      	b.n	800795a <_svfiprintf_r+0x182>
 8007978:	ab03      	add	r3, sp, #12
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4622      	mov	r2, r4
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <_svfiprintf_r+0x1ec>)
 8007980:	a904      	add	r1, sp, #16
 8007982:	4640      	mov	r0, r8
 8007984:	f3af 8000 	nop.w
 8007988:	f1b0 3fff 	cmp.w	r0, #4294967295
 800798c:	4681      	mov	r9, r0
 800798e:	d1d6      	bne.n	800793e <_svfiprintf_r+0x166>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	065b      	lsls	r3, r3, #25
 8007994:	f53f af35 	bmi.w	8007802 <_svfiprintf_r+0x2a>
 8007998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799a:	b01d      	add	sp, #116	; 0x74
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	ab03      	add	r3, sp, #12
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4622      	mov	r2, r4
 80079a6:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <_svfiprintf_r+0x1ec>)
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	4640      	mov	r0, r8
 80079ac:	f000 f882 	bl	8007ab4 <_printf_i>
 80079b0:	e7ea      	b.n	8007988 <_svfiprintf_r+0x1b0>
 80079b2:	bf00      	nop
 80079b4:	08008058 	.word	0x08008058
 80079b8:	0800805e 	.word	0x0800805e
 80079bc:	08008062 	.word	0x08008062
 80079c0:	00000000 	.word	0x00000000
 80079c4:	08007725 	.word	0x08007725

080079c8 <_printf_common>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4691      	mov	r9, r2
 80079ce:	461f      	mov	r7, r3
 80079d0:	688a      	ldr	r2, [r1, #8]
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	4606      	mov	r6, r0
 80079d6:	4293      	cmp	r3, r2
 80079d8:	bfb8      	it	lt
 80079da:	4613      	movlt	r3, r2
 80079dc:	f8c9 3000 	str.w	r3, [r9]
 80079e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079e4:	460c      	mov	r4, r1
 80079e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079ea:	b112      	cbz	r2, 80079f2 <_printf_common+0x2a>
 80079ec:	3301      	adds	r3, #1
 80079ee:	f8c9 3000 	str.w	r3, [r9]
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	0699      	lsls	r1, r3, #26
 80079f6:	bf42      	ittt	mi
 80079f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079fc:	3302      	addmi	r3, #2
 80079fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007a02:	6825      	ldr	r5, [r4, #0]
 8007a04:	f015 0506 	ands.w	r5, r5, #6
 8007a08:	d107      	bne.n	8007a1a <_printf_common+0x52>
 8007a0a:	f104 0a19 	add.w	sl, r4, #25
 8007a0e:	68e3      	ldr	r3, [r4, #12]
 8007a10:	f8d9 2000 	ldr.w	r2, [r9]
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	42ab      	cmp	r3, r5
 8007a18:	dc29      	bgt.n	8007a6e <_printf_common+0xa6>
 8007a1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	3300      	adds	r3, #0
 8007a22:	bf18      	it	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	0692      	lsls	r2, r2, #26
 8007a28:	d42e      	bmi.n	8007a88 <_printf_common+0xc0>
 8007a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4630      	mov	r0, r6
 8007a32:	47c0      	blx	r8
 8007a34:	3001      	adds	r0, #1
 8007a36:	d021      	beq.n	8007a7c <_printf_common+0xb4>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	68e5      	ldr	r5, [r4, #12]
 8007a3c:	f003 0306 	and.w	r3, r3, #6
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	bf18      	it	ne
 8007a44:	2500      	movne	r5, #0
 8007a46:	f8d9 2000 	ldr.w	r2, [r9]
 8007a4a:	f04f 0900 	mov.w	r9, #0
 8007a4e:	bf08      	it	eq
 8007a50:	1aad      	subeq	r5, r5, r2
 8007a52:	68a3      	ldr	r3, [r4, #8]
 8007a54:	6922      	ldr	r2, [r4, #16]
 8007a56:	bf08      	it	eq
 8007a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	bfc4      	itt	gt
 8007a60:	1a9b      	subgt	r3, r3, r2
 8007a62:	18ed      	addgt	r5, r5, r3
 8007a64:	341a      	adds	r4, #26
 8007a66:	454d      	cmp	r5, r9
 8007a68:	d11a      	bne.n	8007aa0 <_printf_common+0xd8>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e008      	b.n	8007a80 <_printf_common+0xb8>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4652      	mov	r2, sl
 8007a72:	4639      	mov	r1, r7
 8007a74:	4630      	mov	r0, r6
 8007a76:	47c0      	blx	r8
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d103      	bne.n	8007a84 <_printf_common+0xbc>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7c2      	b.n	8007a0e <_printf_common+0x46>
 8007a88:	2030      	movs	r0, #48	; 0x30
 8007a8a:	18e1      	adds	r1, r4, r3
 8007a8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a96:	4422      	add	r2, r4
 8007a98:	3302      	adds	r3, #2
 8007a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9e:	e7c4      	b.n	8007a2a <_printf_common+0x62>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	47c0      	blx	r8
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d0e6      	beq.n	8007a7c <_printf_common+0xb4>
 8007aae:	f109 0901 	add.w	r9, r9, #1
 8007ab2:	e7d8      	b.n	8007a66 <_printf_common+0x9e>

08007ab4 <_printf_i>:
 8007ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007abc:	460c      	mov	r4, r1
 8007abe:	7e09      	ldrb	r1, [r1, #24]
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	296e      	cmp	r1, #110	; 0x6e
 8007ac4:	4617      	mov	r7, r2
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	4698      	mov	r8, r3
 8007aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007acc:	f000 80b3 	beq.w	8007c36 <_printf_i+0x182>
 8007ad0:	d822      	bhi.n	8007b18 <_printf_i+0x64>
 8007ad2:	2963      	cmp	r1, #99	; 0x63
 8007ad4:	d036      	beq.n	8007b44 <_printf_i+0x90>
 8007ad6:	d80a      	bhi.n	8007aee <_printf_i+0x3a>
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	f000 80b9 	beq.w	8007c50 <_printf_i+0x19c>
 8007ade:	2958      	cmp	r1, #88	; 0x58
 8007ae0:	f000 8083 	beq.w	8007bea <_printf_i+0x136>
 8007ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007aec:	e032      	b.n	8007b54 <_printf_i+0xa0>
 8007aee:	2964      	cmp	r1, #100	; 0x64
 8007af0:	d001      	beq.n	8007af6 <_printf_i+0x42>
 8007af2:	2969      	cmp	r1, #105	; 0x69
 8007af4:	d1f6      	bne.n	8007ae4 <_printf_i+0x30>
 8007af6:	6820      	ldr	r0, [r4, #0]
 8007af8:	6813      	ldr	r3, [r2, #0]
 8007afa:	0605      	lsls	r5, r0, #24
 8007afc:	f103 0104 	add.w	r1, r3, #4
 8007b00:	d52a      	bpl.n	8007b58 <_printf_i+0xa4>
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6011      	str	r1, [r2, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da03      	bge.n	8007b12 <_printf_i+0x5e>
 8007b0a:	222d      	movs	r2, #45	; 0x2d
 8007b0c:	425b      	negs	r3, r3
 8007b0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b12:	486f      	ldr	r0, [pc, #444]	; (8007cd0 <_printf_i+0x21c>)
 8007b14:	220a      	movs	r2, #10
 8007b16:	e039      	b.n	8007b8c <_printf_i+0xd8>
 8007b18:	2973      	cmp	r1, #115	; 0x73
 8007b1a:	f000 809d 	beq.w	8007c58 <_printf_i+0x1a4>
 8007b1e:	d808      	bhi.n	8007b32 <_printf_i+0x7e>
 8007b20:	296f      	cmp	r1, #111	; 0x6f
 8007b22:	d020      	beq.n	8007b66 <_printf_i+0xb2>
 8007b24:	2970      	cmp	r1, #112	; 0x70
 8007b26:	d1dd      	bne.n	8007ae4 <_printf_i+0x30>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	f043 0320 	orr.w	r3, r3, #32
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	e003      	b.n	8007b3a <_printf_i+0x86>
 8007b32:	2975      	cmp	r1, #117	; 0x75
 8007b34:	d017      	beq.n	8007b66 <_printf_i+0xb2>
 8007b36:	2978      	cmp	r1, #120	; 0x78
 8007b38:	d1d4      	bne.n	8007ae4 <_printf_i+0x30>
 8007b3a:	2378      	movs	r3, #120	; 0x78
 8007b3c:	4865      	ldr	r0, [pc, #404]	; (8007cd4 <_printf_i+0x220>)
 8007b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b42:	e055      	b.n	8007bf0 <_printf_i+0x13c>
 8007b44:	6813      	ldr	r3, [r2, #0]
 8007b46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6011      	str	r1, [r2, #0]
 8007b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b54:	2301      	movs	r3, #1
 8007b56:	e08c      	b.n	8007c72 <_printf_i+0x1be>
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	bf18      	it	ne
 8007b62:	b21b      	sxthne	r3, r3
 8007b64:	e7cf      	b.n	8007b06 <_printf_i+0x52>
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	6825      	ldr	r5, [r4, #0]
 8007b6a:	1d18      	adds	r0, r3, #4
 8007b6c:	6010      	str	r0, [r2, #0]
 8007b6e:	0628      	lsls	r0, r5, #24
 8007b70:	d501      	bpl.n	8007b76 <_printf_i+0xc2>
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	e002      	b.n	8007b7c <_printf_i+0xc8>
 8007b76:	0668      	lsls	r0, r5, #25
 8007b78:	d5fb      	bpl.n	8007b72 <_printf_i+0xbe>
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	296f      	cmp	r1, #111	; 0x6f
 8007b7e:	bf14      	ite	ne
 8007b80:	220a      	movne	r2, #10
 8007b82:	2208      	moveq	r2, #8
 8007b84:	4852      	ldr	r0, [pc, #328]	; (8007cd0 <_printf_i+0x21c>)
 8007b86:	2100      	movs	r1, #0
 8007b88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b8c:	6865      	ldr	r5, [r4, #4]
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	60a5      	str	r5, [r4, #8]
 8007b92:	f2c0 8095 	blt.w	8007cc0 <_printf_i+0x20c>
 8007b96:	6821      	ldr	r1, [r4, #0]
 8007b98:	f021 0104 	bic.w	r1, r1, #4
 8007b9c:	6021      	str	r1, [r4, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d13d      	bne.n	8007c1e <_printf_i+0x16a>
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	f040 808e 	bne.w	8007cc4 <_printf_i+0x210>
 8007ba8:	4665      	mov	r5, ip
 8007baa:	2a08      	cmp	r2, #8
 8007bac:	d10b      	bne.n	8007bc6 <_printf_i+0x112>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	07db      	lsls	r3, r3, #31
 8007bb2:	d508      	bpl.n	8007bc6 <_printf_i+0x112>
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	bfde      	ittt	le
 8007bbc:	2330      	movle	r3, #48	; 0x30
 8007bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bc6:	ebac 0305 	sub.w	r3, ip, r5
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	f8cd 8000 	str.w	r8, [sp]
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	aa03      	add	r2, sp, #12
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff fef6 	bl	80079c8 <_printf_common>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d14d      	bne.n	8007c7c <_printf_i+0x1c8>
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	b005      	add	sp, #20
 8007be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bea:	4839      	ldr	r0, [pc, #228]	; (8007cd0 <_printf_i+0x21c>)
 8007bec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bf0:	6813      	ldr	r3, [r2, #0]
 8007bf2:	6821      	ldr	r1, [r4, #0]
 8007bf4:	1d1d      	adds	r5, r3, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6015      	str	r5, [r2, #0]
 8007bfa:	060a      	lsls	r2, r1, #24
 8007bfc:	d50b      	bpl.n	8007c16 <_printf_i+0x162>
 8007bfe:	07ca      	lsls	r2, r1, #31
 8007c00:	bf44      	itt	mi
 8007c02:	f041 0120 	orrmi.w	r1, r1, #32
 8007c06:	6021      	strmi	r1, [r4, #0]
 8007c08:	b91b      	cbnz	r3, 8007c12 <_printf_i+0x15e>
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	f022 0220 	bic.w	r2, r2, #32
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	2210      	movs	r2, #16
 8007c14:	e7b7      	b.n	8007b86 <_printf_i+0xd2>
 8007c16:	064d      	lsls	r5, r1, #25
 8007c18:	bf48      	it	mi
 8007c1a:	b29b      	uxthmi	r3, r3
 8007c1c:	e7ef      	b.n	8007bfe <_printf_i+0x14a>
 8007c1e:	4665      	mov	r5, ip
 8007c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c24:	fb02 3311 	mls	r3, r2, r1, r3
 8007c28:	5cc3      	ldrb	r3, [r0, r3]
 8007c2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c2e:	460b      	mov	r3, r1
 8007c30:	2900      	cmp	r1, #0
 8007c32:	d1f5      	bne.n	8007c20 <_printf_i+0x16c>
 8007c34:	e7b9      	b.n	8007baa <_printf_i+0xf6>
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	6825      	ldr	r5, [r4, #0]
 8007c3a:	1d18      	adds	r0, r3, #4
 8007c3c:	6961      	ldr	r1, [r4, #20]
 8007c3e:	6010      	str	r0, [r2, #0]
 8007c40:	0628      	lsls	r0, r5, #24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	d501      	bpl.n	8007c4a <_printf_i+0x196>
 8007c46:	6019      	str	r1, [r3, #0]
 8007c48:	e002      	b.n	8007c50 <_printf_i+0x19c>
 8007c4a:	066a      	lsls	r2, r5, #25
 8007c4c:	d5fb      	bpl.n	8007c46 <_printf_i+0x192>
 8007c4e:	8019      	strh	r1, [r3, #0]
 8007c50:	2300      	movs	r3, #0
 8007c52:	4665      	mov	r5, ip
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	e7b9      	b.n	8007bcc <_printf_i+0x118>
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	1d19      	adds	r1, r3, #4
 8007c5c:	6011      	str	r1, [r2, #0]
 8007c5e:	681d      	ldr	r5, [r3, #0]
 8007c60:	6862      	ldr	r2, [r4, #4]
 8007c62:	2100      	movs	r1, #0
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f837 	bl	8007cd8 <memchr>
 8007c6a:	b108      	cbz	r0, 8007c70 <_printf_i+0x1bc>
 8007c6c:	1b40      	subs	r0, r0, r5
 8007c6e:	6060      	str	r0, [r4, #4]
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	6123      	str	r3, [r4, #16]
 8007c74:	2300      	movs	r3, #0
 8007c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7a:	e7a7      	b.n	8007bcc <_printf_i+0x118>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4639      	mov	r1, r7
 8007c82:	4630      	mov	r0, r6
 8007c84:	47c0      	blx	r8
 8007c86:	3001      	adds	r0, #1
 8007c88:	d0aa      	beq.n	8007be0 <_printf_i+0x12c>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	079b      	lsls	r3, r3, #30
 8007c8e:	d413      	bmi.n	8007cb8 <_printf_i+0x204>
 8007c90:	68e0      	ldr	r0, [r4, #12]
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	4298      	cmp	r0, r3
 8007c96:	bfb8      	it	lt
 8007c98:	4618      	movlt	r0, r3
 8007c9a:	e7a3      	b.n	8007be4 <_printf_i+0x130>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	464a      	mov	r2, r9
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	47c0      	blx	r8
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d09a      	beq.n	8007be0 <_printf_i+0x12c>
 8007caa:	3501      	adds	r5, #1
 8007cac:	68e3      	ldr	r3, [r4, #12]
 8007cae:	9a03      	ldr	r2, [sp, #12]
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	42ab      	cmp	r3, r5
 8007cb4:	dcf2      	bgt.n	8007c9c <_printf_i+0x1e8>
 8007cb6:	e7eb      	b.n	8007c90 <_printf_i+0x1dc>
 8007cb8:	2500      	movs	r5, #0
 8007cba:	f104 0919 	add.w	r9, r4, #25
 8007cbe:	e7f5      	b.n	8007cac <_printf_i+0x1f8>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1ac      	bne.n	8007c1e <_printf_i+0x16a>
 8007cc4:	7803      	ldrb	r3, [r0, #0]
 8007cc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cce:	e76c      	b.n	8007baa <_printf_i+0xf6>
 8007cd0:	08008069 	.word	0x08008069
 8007cd4:	0800807a 	.word	0x0800807a

08007cd8 <memchr>:
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	b2c9      	uxtb	r1, r1
 8007cdc:	4402      	add	r2, r0
 8007cde:	4290      	cmp	r0, r2
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	d101      	bne.n	8007ce8 <memchr+0x10>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e003      	b.n	8007cf0 <memchr+0x18>
 8007ce8:	781c      	ldrb	r4, [r3, #0]
 8007cea:	3001      	adds	r0, #1
 8007cec:	428c      	cmp	r4, r1
 8007cee:	d1f6      	bne.n	8007cde <memchr+0x6>
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <memmove>:
 8007cf4:	4288      	cmp	r0, r1
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	eb01 0302 	add.w	r3, r1, r2
 8007cfc:	d807      	bhi.n	8007d0e <memmove+0x1a>
 8007cfe:	1e42      	subs	r2, r0, #1
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d00a      	beq.n	8007d1a <memmove+0x26>
 8007d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d0c:	e7f8      	b.n	8007d00 <memmove+0xc>
 8007d0e:	4283      	cmp	r3, r0
 8007d10:	d9f5      	bls.n	8007cfe <memmove+0xa>
 8007d12:	1881      	adds	r1, r0, r2
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	42d3      	cmn	r3, r2
 8007d18:	d100      	bne.n	8007d1c <memmove+0x28>
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d24:	e7f7      	b.n	8007d16 <memmove+0x22>
	...

08007d28 <_free_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d043      	beq.n	8007db8 <_free_r+0x90>
 8007d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d34:	1f0c      	subs	r4, r1, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	18e4      	addlt	r4, r4, r3
 8007d3c:	f000 f8d0 	bl	8007ee0 <__malloc_lock>
 8007d40:	4a1e      	ldr	r2, [pc, #120]	; (8007dbc <_free_r+0x94>)
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	4610      	mov	r0, r2
 8007d46:	b933      	cbnz	r3, 8007d56 <_free_r+0x2e>
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	6014      	str	r4, [r2, #0]
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d52:	f000 b8c6 	b.w	8007ee2 <__malloc_unlock>
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	d90b      	bls.n	8007d72 <_free_r+0x4a>
 8007d5a:	6821      	ldr	r1, [r4, #0]
 8007d5c:	1862      	adds	r2, r4, r1
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	bf01      	itttt	eq
 8007d62:	681a      	ldreq	r2, [r3, #0]
 8007d64:	685b      	ldreq	r3, [r3, #4]
 8007d66:	1852      	addeq	r2, r2, r1
 8007d68:	6022      	streq	r2, [r4, #0]
 8007d6a:	6063      	str	r3, [r4, #4]
 8007d6c:	6004      	str	r4, [r0, #0]
 8007d6e:	e7ed      	b.n	8007d4c <_free_r+0x24>
 8007d70:	4613      	mov	r3, r2
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	b10a      	cbz	r2, 8007d7a <_free_r+0x52>
 8007d76:	42a2      	cmp	r2, r4
 8007d78:	d9fa      	bls.n	8007d70 <_free_r+0x48>
 8007d7a:	6819      	ldr	r1, [r3, #0]
 8007d7c:	1858      	adds	r0, r3, r1
 8007d7e:	42a0      	cmp	r0, r4
 8007d80:	d10b      	bne.n	8007d9a <_free_r+0x72>
 8007d82:	6820      	ldr	r0, [r4, #0]
 8007d84:	4401      	add	r1, r0
 8007d86:	1858      	adds	r0, r3, r1
 8007d88:	4282      	cmp	r2, r0
 8007d8a:	6019      	str	r1, [r3, #0]
 8007d8c:	d1de      	bne.n	8007d4c <_free_r+0x24>
 8007d8e:	6810      	ldr	r0, [r2, #0]
 8007d90:	6852      	ldr	r2, [r2, #4]
 8007d92:	4401      	add	r1, r0
 8007d94:	6019      	str	r1, [r3, #0]
 8007d96:	605a      	str	r2, [r3, #4]
 8007d98:	e7d8      	b.n	8007d4c <_free_r+0x24>
 8007d9a:	d902      	bls.n	8007da2 <_free_r+0x7a>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	e7d4      	b.n	8007d4c <_free_r+0x24>
 8007da2:	6820      	ldr	r0, [r4, #0]
 8007da4:	1821      	adds	r1, r4, r0
 8007da6:	428a      	cmp	r2, r1
 8007da8:	bf01      	itttt	eq
 8007daa:	6811      	ldreq	r1, [r2, #0]
 8007dac:	6852      	ldreq	r2, [r2, #4]
 8007dae:	1809      	addeq	r1, r1, r0
 8007db0:	6021      	streq	r1, [r4, #0]
 8007db2:	6062      	str	r2, [r4, #4]
 8007db4:	605c      	str	r4, [r3, #4]
 8007db6:	e7c9      	b.n	8007d4c <_free_r+0x24>
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
 8007dba:	bf00      	nop
 8007dbc:	20003134 	.word	0x20003134

08007dc0 <_malloc_r>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	1ccd      	adds	r5, r1, #3
 8007dc4:	f025 0503 	bic.w	r5, r5, #3
 8007dc8:	3508      	adds	r5, #8
 8007dca:	2d0c      	cmp	r5, #12
 8007dcc:	bf38      	it	cc
 8007dce:	250c      	movcc	r5, #12
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	db01      	blt.n	8007dda <_malloc_r+0x1a>
 8007dd6:	42a9      	cmp	r1, r5
 8007dd8:	d903      	bls.n	8007de2 <_malloc_r+0x22>
 8007dda:	230c      	movs	r3, #12
 8007ddc:	6033      	str	r3, [r6, #0]
 8007dde:	2000      	movs	r0, #0
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	f000 f87d 	bl	8007ee0 <__malloc_lock>
 8007de6:	4a21      	ldr	r2, [pc, #132]	; (8007e6c <_malloc_r+0xac>)
 8007de8:	6814      	ldr	r4, [r2, #0]
 8007dea:	4621      	mov	r1, r4
 8007dec:	b991      	cbnz	r1, 8007e14 <_malloc_r+0x54>
 8007dee:	4c20      	ldr	r4, [pc, #128]	; (8007e70 <_malloc_r+0xb0>)
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	b91b      	cbnz	r3, 8007dfc <_malloc_r+0x3c>
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 f863 	bl	8007ec0 <_sbrk_r>
 8007dfa:	6020      	str	r0, [r4, #0]
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 f85e 	bl	8007ec0 <_sbrk_r>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d124      	bne.n	8007e52 <_malloc_r+0x92>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	6033      	str	r3, [r6, #0]
 8007e0e:	f000 f868 	bl	8007ee2 <__malloc_unlock>
 8007e12:	e7e4      	b.n	8007dde <_malloc_r+0x1e>
 8007e14:	680b      	ldr	r3, [r1, #0]
 8007e16:	1b5b      	subs	r3, r3, r5
 8007e18:	d418      	bmi.n	8007e4c <_malloc_r+0x8c>
 8007e1a:	2b0b      	cmp	r3, #11
 8007e1c:	d90f      	bls.n	8007e3e <_malloc_r+0x7e>
 8007e1e:	600b      	str	r3, [r1, #0]
 8007e20:	18cc      	adds	r4, r1, r3
 8007e22:	50cd      	str	r5, [r1, r3]
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 f85c 	bl	8007ee2 <__malloc_unlock>
 8007e2a:	f104 000b 	add.w	r0, r4, #11
 8007e2e:	1d23      	adds	r3, r4, #4
 8007e30:	f020 0007 	bic.w	r0, r0, #7
 8007e34:	1ac3      	subs	r3, r0, r3
 8007e36:	d0d3      	beq.n	8007de0 <_malloc_r+0x20>
 8007e38:	425a      	negs	r2, r3
 8007e3a:	50e2      	str	r2, [r4, r3]
 8007e3c:	e7d0      	b.n	8007de0 <_malloc_r+0x20>
 8007e3e:	684b      	ldr	r3, [r1, #4]
 8007e40:	428c      	cmp	r4, r1
 8007e42:	bf16      	itet	ne
 8007e44:	6063      	strne	r3, [r4, #4]
 8007e46:	6013      	streq	r3, [r2, #0]
 8007e48:	460c      	movne	r4, r1
 8007e4a:	e7eb      	b.n	8007e24 <_malloc_r+0x64>
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6849      	ldr	r1, [r1, #4]
 8007e50:	e7cc      	b.n	8007dec <_malloc_r+0x2c>
 8007e52:	1cc4      	adds	r4, r0, #3
 8007e54:	f024 0403 	bic.w	r4, r4, #3
 8007e58:	42a0      	cmp	r0, r4
 8007e5a:	d005      	beq.n	8007e68 <_malloc_r+0xa8>
 8007e5c:	1a21      	subs	r1, r4, r0
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f82e 	bl	8007ec0 <_sbrk_r>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d0cf      	beq.n	8007e08 <_malloc_r+0x48>
 8007e68:	6025      	str	r5, [r4, #0]
 8007e6a:	e7db      	b.n	8007e24 <_malloc_r+0x64>
 8007e6c:	20003134 	.word	0x20003134
 8007e70:	20003138 	.word	0x20003138

08007e74 <_realloc_r>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	4607      	mov	r7, r0
 8007e78:	4614      	mov	r4, r2
 8007e7a:	460e      	mov	r6, r1
 8007e7c:	b921      	cbnz	r1, 8007e88 <_realloc_r+0x14>
 8007e7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e82:	4611      	mov	r1, r2
 8007e84:	f7ff bf9c 	b.w	8007dc0 <_malloc_r>
 8007e88:	b922      	cbnz	r2, 8007e94 <_realloc_r+0x20>
 8007e8a:	f7ff ff4d 	bl	8007d28 <_free_r>
 8007e8e:	4625      	mov	r5, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e94:	f000 f826 	bl	8007ee4 <_malloc_usable_size_r>
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d20f      	bcs.n	8007ebc <_realloc_r+0x48>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7ff ff8e 	bl	8007dc0 <_malloc_r>
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0f2      	beq.n	8007e90 <_realloc_r+0x1c>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4622      	mov	r2, r4
 8007eae:	f7ff fc05 	bl	80076bc <memcpy>
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ff37 	bl	8007d28 <_free_r>
 8007eba:	e7e9      	b.n	8007e90 <_realloc_r+0x1c>
 8007ebc:	4635      	mov	r5, r6
 8007ebe:	e7e7      	b.n	8007e90 <_realloc_r+0x1c>

08007ec0 <_sbrk_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4c05      	ldr	r4, [pc, #20]	; (8007edc <_sbrk_r+0x1c>)
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	6023      	str	r3, [r4, #0]
 8007ecc:	f7fe fdc4 	bl	8006a58 <_sbrk>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_sbrk_r+0x1a>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_sbrk_r+0x1a>
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	2000336c 	.word	0x2000336c

08007ee0 <__malloc_lock>:
 8007ee0:	4770      	bx	lr

08007ee2 <__malloc_unlock>:
 8007ee2:	4770      	bx	lr

08007ee4 <_malloc_usable_size_r>:
 8007ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee8:	1f18      	subs	r0, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bfbc      	itt	lt
 8007eee:	580b      	ldrlt	r3, [r1, r0]
 8007ef0:	18c0      	addlt	r0, r0, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_init>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr

08007f00 <_fini>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr
